import {
  registerNextDomDrop
} from "./chunk-RDFIOSVA.js";
import {
  Button,
  Plus,
  Spinner,
  mobileStyle,
  styled_default,
  t
} from "./chunk-EWQZPDGL.js";
import {
  getCrop,
  getImageSize,
  getVideoPreview
} from "./chunk-UKEGL2ZK.js";
import {
  require_react
} from "./chunk-RA4EGHW6.js";
import {
  __toESM
} from "./chunk-2LSFTFF7.js";

// node_modules/polotno/side-panel/images-grid.js
var import_react = __toESM(require_react(), 1);
var i = styled_default("div", import_react.default.forwardRef)`
  height: 100%;
  overflow: auto;
`;
var a = styled_default("div")`
  width: 33%;
  float: left;
`;
var s = styled_default("div")`
  padding: 5px;
  width: 100%;
  &:hover .credit {
    opacity: 1;
  }
  ${mobileStyle("\n    .credit {\n      opacity: 1;\n    }\n  ")}
`;
var c = styled_default("div")`
  border-radius: 5px;
  position: relative;
  overflow: hidden;
  box-shadow: ${(e3) => e3["data-shadowenabled"] ? "0 0 5px rgba(16, 22, 26, 0.3)" : ""};
`;
var d = styled_default("img")`
  width: 100%;
  cursor: pointer;
  display: block;
  max-height: 300px;
  min-height: 50px;
  object-fit: contain;
`;
var g = styled_default("div")`
  position: absolute;
  bottom: 0px;
  left: 0px;
  font-size: 10px;
  padding: 3px;
  padding-top: 10px;
  text-align: center;
  background: linear-gradient(
    to bottom,
    rgba(0, 0, 0, 0),
    rgba(0, 0, 0, 0.4),
    rgba(0, 0, 0, 0.6)
  );
  width: 100%;
  opacity: 0;
  color: white;
`;
var m = styled_default("p")`
  text-align: center;
  padding: 30px;
`;
var u = ({ url: t2, credit: r, onSelect: o, crossOrigin: n, shadowEnabled: i2, itemHeight: a2, className: m3, onLoad: u3 }) => {
  const p2 = null == i2 || i2;
  return import_react.default.createElement(s, { onClick: () => {
    o();
  }, className: "polotno-close-panel" }, import_react.default.createElement(c, { "data-shadowenabled": p2 }, import_react.default.createElement(d, { className: m3, style: { height: null != a2 ? a2 : "auto" }, src: t2, draggable: true, loading: "lazy", crossOrigin: n, onDragStart: () => {
    registerNextDomDrop(({ x: e3, y: t3 }, r2, l) => {
      o({ x: e3, y: t3 }, r2, l);
    });
  }, onDragEnd: () => {
    registerNextDomDrop(null);
  }, onLoad: u3 }), r && import_react.default.createElement(g, { className: "credit" }, r)));
};
var ImagesGrid = ({ images: t2, onSelect: l, isLoading: n, getPreview: s2, loadMore: c2, getCredit: d2, getImageClassName: g2, rowsNumber: p2, crossOrigin: h = "anonymous", shadowEnabled: f2, itemHeight: v, error: w, hideNoResults: b = false }) => {
  const x = p2 || 2, y = import_react.default.useRef(null), E = [];
  for (var N = 0; N < x; N++) {
    E.push((t2 || []).filter((e3, t3) => t3 % x === N));
  }
  const H = import_react.default.useRef(null), j = () => {
    var e3, r, o;
    const l2 = (null === (e3 = y.current) || void 0 === e3 ? void 0 : e3.scrollHeight) > (null === (r = y.current) || void 0 === r ? void 0 : r.offsetHeight) + 5, i2 = t2 && t2.length, a2 = Array.from(null === (o = y.current) || void 0 === o ? void 0 : o.querySelectorAll("img")).every((e4) => e4.complete);
    !l2 && c2 && !n && i2 && a2 && (H.current || (H.current = window.setTimeout(() => {
      H.current = null, c2 && c2();
    }, 100)));
  }, S = () => {
    j();
  };
  return import_react.default.useEffect(() => (j(), () => {
    window.clearTimeout(H.current), H.current = null;
  }), [t2 && t2.length, n]), import_react.default.createElement(i, { onScroll: (e3) => {
    const t3 = e3.target.scrollHeight - e3.target.scrollTop - e3.target.offsetHeight;
    c2 && !n && t3 < 200 && c2();
  }, ref: y }, E.map((t3, o) => import_react.default.createElement(a, { key: o, style: { width: 100 / x + "%" } }, t3.map((t4, r) => import_react.default.createElement(u, { url: s2(t4), onSelect: (e3, r2, o2) => l(t4, e3, r2, o2), key: r, credit: d2 && d2(t4), crossOrigin: h, shadowEnabled: f2, itemHeight: v, className: g2 && g2(t4), onLoad: S })), n && import_react.default.createElement("div", { style: { padding: "30px" } }, import_react.default.createElement(Spinner, null)))), !n && (!t2 || !t2.length) && !w && !b && import_react.default.createElement(m, null, t("sidePanel.noResults")), w && import_react.default.createElement(m, null, t("sidePanel.error")));
};

// node_modules/polotno/side-panel/upload-panel.js
var import_react2 = __toESM(require_react(), 1);

// node_modules/polotno/utils/file.js
async function localFileToURL(e3) {
  return new Promise((o, r) => {
    const n = new FileReader();
    n.readAsDataURL(e3), n.onload = () => o(n.result), n.onerror = (e4) => r(e4);
  });
}

// node_modules/polotno/side-panel/select-image.js
var selectImage = async ({ src: i2, droppedPos: s2, targetElement: n, store: d2 }) => {
  var a2;
  if (n && "svg" === n.type && n.contentEditable) {
    const t2 = n.parent, e3 = n.zIndex, s3 = Object.assign({}, n.toJSON());
    return delete s3.id, d2.deleteElements([n.id]), void t2.addElement(Object.assign(Object.assign({}, s3), { type: "image", src: i2, clipSrc: s3.src })).setZIndex(e3);
  }
  n && "figure" === n.type && n.contentEditable;
  let { width: c2, height: o } = await getImageSize(i2);
  if (n && "image" === n.type && n.contentEditable) {
    const t2 = getCrop(n, { width: c2, height: o });
    return void n.set(Object.assign({ src: i2 }, t2));
  }
  const r = Math.min(d2.width / c2, d2.height / o, 1);
  c2 *= r, o *= r;
  const l = ((null == s2 ? void 0 : s2.x) || d2.width / 2) - c2 / 2, g2 = ((null == s2 ? void 0 : s2.y) || d2.height / 2) - o / 2;
  null === (a2 = d2.activePage) || void 0 === a2 || a2.addElement({ type: "image", src: i2, width: c2, height: o, x: l, y: g2 });
};

// node_modules/polotno/side-panel/select-video.js
var selectVideo = async ({ src: e3, droppedPos: i2, targetElement: o, store: d2, attrs: s2 = {} }) => {
  var h;
  let n = s2.width || 300, r = s2.height || 200;
  if (o && "video" === o.type && o.contentEditable) {
    const i3 = getCrop(o, { width: n, height: r });
    return void o.set(Object.assign({ src: e3 }, i3));
  }
  const c2 = 0.8 * Math.min(d2.width / n, d2.height / r, 1);
  n *= c2, r *= c2;
  const l = ((null == i2 ? void 0 : i2.x) || d2.width / 2) - n / 2, a2 = ((null == i2 ? void 0 : i2.y) || d2.height / 2) - r / 2;
  return null === (h = d2.activePage) || void 0 === h ? void 0 : h.addElement({ type: "video", src: e3, width: n, height: r, x: l, y: a2 });
};

// node_modules/polotno/side-panel/select-svg.js
var selectSvg = async ({ src: e3, droppedPos: i2, targetElement: o, store: d2 }) => {
  var r;
  if (o && "image" === o.type && o.contentEditable) {
    return void o.set({ clipSrc: e3 });
  }
  if (o && "video" === o.type && o.contentEditable) {
    return void o.set({ clipSrc: e3 });
  }
  const { width: l, height: n } = await getImageSize(e3), c2 = ((null == i2 ? void 0 : i2.x) || d2.width / 2) - l / 2, s2 = ((null == i2 ? void 0 : i2.y) || d2.height / 2) - n / 2;
  null === (r = d2.activePage) || void 0 === r || r.addElement({ type: "svg", width: l, height: n, x: c2, y: s2, src: e3 });
};

// node_modules/polotno/side-panel/select-gif.js
var selectGif = async ({ src: e3, droppedPos: i2, targetElement: o, store: d2 }) => {
  var l;
  const { width: s2, height: a2 } = await getImageSize(e3), h = ((null == i2 ? void 0 : i2.x) || d2.width / 2) - s2 / 2, r = ((null == i2 ? void 0 : i2.y) || d2.height / 2) - a2 / 2;
  null === (l = d2.activePage) || void 0 === l || l.addElement({ type: "gif", width: s2, height: a2, x: h, y: r, src: e3 });
};

// node_modules/polotno/side-panel/upload-panel.js
var m2 = async (e3) => localFileToURL(e3);
function setUploadFunc(e3) {
  m2 = e3;
}
var p = [];
function f(e3) {
  const { type: t2 } = e3;
  return t2.indexOf("svg") >= 0 ? "svg" : t2.indexOf("gif") >= 0 ? "gif" : t2.indexOf("image") >= 0 ? "image" : t2.indexOf("video") >= 0 ? "video" : t2.indexOf("audio") >= 0 ? "audio" : "image";
}
function u2() {
  const e3 = new Blob(['\n    <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100">\n      <circle cx="50" cy="50" r="45" fill="#f0f0f0" stroke="#ccc" stroke-width="2"/>\n      <path d="M40,35 L40,65 L55,50 L70,50 M70,35 Q80,50 70,65" fill="none" stroke="#666" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"/>\n    </svg>\n  '], { type: "image/svg+xml" });
  return URL.createObjectURL(e3);
}
var UploadPanel = ({ store: r }) => {
  const [g2, v] = import_react2.default.useState(p), [y, h] = import_react2.default.useState(false), x = import_react2.default.useRef(null);
  return import_react2.default.useEffect(() => {
    p = g2;
  }, [g2]), import_react2.default.createElement("div", { style: { height: "100%", display: "flex", flexDirection: "column" } }, import_react2.default.createElement("div", { style: { height: "45px", paddingTop: "5px" } }, t("sidePanel.uploadTip")), import_react2.default.createElement("div", { style: { marginBottom: "20px" } }, import_react2.default.createElement("label", { htmlFor: "input-file" }, import_react2.default.createElement(Button, { icon: import_react2.default.createElement(Plus, null), style: { width: "100%" }, onClick: () => {
    var e3;
    null === (e3 = x.current) || void 0 === e3 || e3.click();
  } }, t("sidePanel.uploadImage")), import_react2.default.createElement("input", { type: "file", ref: x, style: { display: "none" }, onChange: async (e3) => {
    const { target: t2 } = e3;
    h(true);
    try {
      for (const e4 of t2.files) {
        const t3 = await m2(e4), o = f(e4);
        let r2 = t3;
        "video" === o ? r2 = await getVideoPreview(t3) : "audio" === o && (r2 = u2()), v((e5) => e5.concat([{ url: t3, type: o, preview: r2 }]));
      }
    } catch (e4) {
      console.error(e4);
    }
    h(false), t2.value = "";
  }, multiple: true }))), import_react2.default.createElement(ImagesGrid, { images: g2, isLoading: y, getPreview: (e3) => e3.preview, hideNoResults: true, onSelect: async (e3, t2, o) => {
    const i2 = e3.url, n = e3.type;
    "image" === n ? selectImage({ src: i2, store: r, droppedPos: t2, targetElement: o }) : "video" === n ? selectVideo({ src: i2, store: r, droppedPos: t2, targetElement: o }) : "gif" === n ? selectGif({ src: i2, store: r, droppedPos: t2, targetElement: o }) : "svg" === n ? selectSvg({ src: i2, store: r, droppedPos: t2, targetElement: o }) : "audio" === n && r.addAudio({ src: i2 });
  } }));
};

export {
  ImagesGrid,
  selectImage,
  selectVideo,
  setUploadFunc,
  UploadPanel
};
//# sourceMappingURL=chunk-66IZ6VUW.js.map
