import {
  DuplicateButton,
  ElementContainer,
  GroupButton,
  PositionPicker,
  RemoveButton,
  TextAiWrite,
  extendToolbar,
  useCopyStyle,
  useLock
} from "./chunk-XHG2TEJL.js";
import {
  ColorPicker,
  Select,
  color_picker_default,
  require_cjs,
  useSWR
} from "./chunk-T32FJGIG.js";
import {
  createQuill,
  getLinePositionFromMiddlePoints,
  getMiddlePoints,
  quillRef,
  setQuillContent
} from "./chunk-UTIUZPEP.js";
import {
  AlignCenter,
  AlignJustify,
  AlignLeft,
  AlignRight,
  Alignment,
  ArrowsHorizontal,
  ArrowsVertical,
  Bold,
  Button,
  ButtonGroup,
  CaretDown,
  Cog,
  Crop,
  Cross,
  Cut,
  Dialog,
  Disable,
  Divider,
  Document,
  Import,
  InputGroup,
  Italic,
  LeftJoin,
  Lock,
  Media,
  Menu,
  MenuDivider,
  MenuItem,
  Navbar,
  NavbarGroup,
  NumericInput,
  Popover,
  Position,
  Redo,
  Search,
  Settings,
  Slider,
  Strikethrough,
  Switch,
  Tick,
  Time,
  Tooltip,
  Underline,
  Undo,
  Unlock,
  Video,
  VolumeUp,
  _assertThisInitialized,
  _inheritsLoose,
  classes_exports,
  mobileStyle,
  observer,
  styled_default,
  t
} from "./chunk-SBOD4ZMK.js";
import {
  downloadFile,
  flags,
  getAPI,
  getCrop,
  getFontsList,
  getGoogleFontImage,
  getGoogleFontsListAPI,
  getImageSize,
  getKey,
  getVideoDuration,
  getVideoObjectPreview,
  getVideoSize,
  globalFonts,
  isGoogleFontChanged,
  removeBackground,
  sameColors,
  useSvgColors
} from "./chunk-R75DDQOF.js";
import {
  runInAction
} from "./chunk-TBUMKKT5.js";
import {
  _extends
} from "./chunk-KI5MAS3R.js";
import {
  require_react
} from "./chunk-RA4EGHW6.js";
import {
  __commonJS,
  __toESM
} from "./chunk-2LSFTFF7.js";

// node_modules/@meronex/icons/mdc/MdcFormatLineSpacing.js
var require_MdcFormatLineSpacing = __commonJS({
  "node_modules/@meronex/icons/mdc/MdcFormatLineSpacing.js"(exports, module) {
    var GenIcon = require_cjs().GenIcon;
    module.exports = function(props) {
      return GenIcon({ "tag": "svg", "attr": { "version": "1.1", "id": "mdi-format-line-spacing", "viewBox": "0 0 24 24", "fill": "currentColor" }, "child": [{ "tag": "path", "attr": { "d": "M10,13H22V11H10M10,19H22V17H10M10,7H22V5H10M6,7H8.5L5,3.5L1.5,7H4V17H1.5L5,20.5L8.5,17H6V7Z" } }] })(props);
    };
  }
});

// node_modules/@meronex/icons/mdc/MdcFormatLetterCase.js
var require_MdcFormatLetterCase = __commonJS({
  "node_modules/@meronex/icons/mdc/MdcFormatLetterCase.js"(exports, module) {
    var GenIcon = require_cjs().GenIcon;
    module.exports = function(props) {
      return GenIcon({ "tag": "svg", "attr": { "version": "1.1", "id": "mdi-format-letter-case", "viewBox": "0 0 24 24", "fill": "currentColor" }, "child": [{ "tag": "path", "attr": { "d": "M20.06,18C20,17.83 19.91,17.54 19.86,17.11C19.19,17.81 18.38,18.16 17.45,18.16C16.62,18.16 15.93,17.92 15.4,17.45C14.87,17 14.6,16.39 14.6,15.66C14.6,14.78 14.93,14.1 15.6,13.61C16.27,13.12 17.21,12.88 18.43,12.88H19.83V12.24C19.83,11.75 19.68,11.36 19.38,11.07C19.08,10.78 18.63,10.64 18.05,10.64C17.53,10.64 17.1,10.76 16.75,11C16.4,11.25 16.23,11.54 16.23,11.89H14.77C14.77,11.46 14.92,11.05 15.22,10.65C15.5,10.25 15.93,9.94 16.44,9.71C16.95,9.5 17.5,9.36 18.13,9.36C19.11,9.36 19.87,9.6 20.42,10.09C20.97,10.58 21.26,11.25 21.28,12.11V16C21.28,16.8 21.38,17.42 21.58,17.88V18H20.06M17.66,16.88C18.11,16.88 18.54,16.77 18.95,16.56C19.35,16.35 19.65,16.07 19.83,15.73V14.16H18.7C16.93,14.16 16.04,14.63 16.04,15.57C16.04,16 16.19,16.3 16.5,16.53C16.8,16.76 17.18,16.88 17.66,16.88M5.46,13.71H9.53L7.5,8.29L5.46,13.71M6.64,6H8.36L13.07,18H11.14L10.17,15.43H4.82L3.86,18H1.93L6.64,6Z" } }] })(props);
    };
  }
});

// node_modules/@meronex/icons/mdc/MdcFormatVerticalAlignTop.js
var require_MdcFormatVerticalAlignTop = __commonJS({
  "node_modules/@meronex/icons/mdc/MdcFormatVerticalAlignTop.js"(exports, module) {
    var GenIcon = require_cjs().GenIcon;
    module.exports = function(props) {
      return GenIcon({ "tag": "svg", "attr": { "version": "1.1", "id": "mdi-format-vertical-align-top", "viewBox": "0 0 24 24", "fill": "currentColor" }, "child": [{ "tag": "path", "attr": { "d": "M8,11H11V21H13V11H16L12,7L8,11M4,3V5H20V3H4Z" } }] })(props);
    };
  }
});

// node_modules/@meronex/icons/mdc/MdcFormatVerticalAlignCenter.js
var require_MdcFormatVerticalAlignCenter = __commonJS({
  "node_modules/@meronex/icons/mdc/MdcFormatVerticalAlignCenter.js"(exports, module) {
    var GenIcon = require_cjs().GenIcon;
    module.exports = function(props) {
      return GenIcon({ "tag": "svg", "attr": { "version": "1.1", "id": "mdi-format-vertical-align-center", "viewBox": "0 0 24 24", "fill": "currentColor" }, "child": [{ "tag": "path", "attr": { "d": "M8,19H11V23H13V19H16L12,15L8,19M16,5H13V1H11V5H8L12,9L16,5M4,11V13H20V11H4Z" } }] })(props);
    };
  }
});

// node_modules/@meronex/icons/mdc/MdcFormatVerticalAlignBottom.js
var require_MdcFormatVerticalAlignBottom = __commonJS({
  "node_modules/@meronex/icons/mdc/MdcFormatVerticalAlignBottom.js"(exports, module) {
    var GenIcon = require_cjs().GenIcon;
    module.exports = function(props) {
      return GenIcon({ "tag": "svg", "attr": { "version": "1.1", "id": "mdi-format-vertical-align-bottom", "viewBox": "0 0 24 24", "fill": "currentColor" }, "child": [{ "tag": "path", "attr": { "d": "M16,13H13V3H11V13H8L12,17L16,13M4,19V21H20V19H4Z" } }] })(props);
    };
  }
});

// node_modules/@meronex/icons/md/MdFormatTextdirectionRToL.js
var require_MdFormatTextdirectionRToL = __commonJS({
  "node_modules/@meronex/icons/md/MdFormatTextdirectionRToL.js"(exports, module) {
    var GenIcon = require_cjs().GenIcon;
    module.exports = function(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "fill": "currentColor" }, "child": [{ "tag": "path", "attr": { "d": "M10 10v5h2V4h2v11h2V4h2V2h-8C7.79 2 6 3.79 6 6s1.79 4 4 4zm-2 7v-3l-4 4 4 4v-3h12v-2H8z" } }] })(props);
    };
  }
});

// node_modules/@meronex/icons/md/MdFormatTextdirectionLToR.js
var require_MdFormatTextdirectionLToR = __commonJS({
  "node_modules/@meronex/icons/md/MdFormatTextdirectionLToR.js"(exports, module) {
    var GenIcon = require_cjs().GenIcon;
    module.exports = function(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "fill": "currentColor" }, "child": [{ "tag": "path", "attr": { "d": "M9 10v5h2V4h2v11h2V4h2V2H9C6.79 2 5 3.79 5 6s1.79 4 4 4zm12 8l-4-4v3H5v2h12v3l4-4z" } }] })(props);
    };
  }
});

// node_modules/@meronex/icons/mdc/MdcFormatListBulleted.js
var require_MdcFormatListBulleted = __commonJS({
  "node_modules/@meronex/icons/mdc/MdcFormatListBulleted.js"(exports, module) {
    var GenIcon = require_cjs().GenIcon;
    module.exports = function(props) {
      return GenIcon({ "tag": "svg", "attr": { "version": "1.1", "id": "mdi-format-list-bulleted", "viewBox": "0 0 24 24", "fill": "currentColor" }, "child": [{ "tag": "path", "attr": { "d": "M7,5H21V7H7V5M7,13V11H21V13H7M4,4.5A1.5,1.5 0 0,1 5.5,6A1.5,1.5 0 0,1 4,7.5A1.5,1.5 0 0,1 2.5,6A1.5,1.5 0 0,1 4,4.5M4,10.5A1.5,1.5 0 0,1 5.5,12A1.5,1.5 0 0,1 4,13.5A1.5,1.5 0 0,1 2.5,12A1.5,1.5 0 0,1 4,10.5M7,19V17H21V19H7M4,16.5A1.5,1.5 0 0,1 5.5,18A1.5,1.5 0 0,1 4,19.5A1.5,1.5 0 0,1 2.5,18A1.5,1.5 0 0,1 4,16.5Z" } }] })(props);
    };
  }
});

// node_modules/@meronex/icons/mdc/MdcFormatListNumbered.js
var require_MdcFormatListNumbered = __commonJS({
  "node_modules/@meronex/icons/mdc/MdcFormatListNumbered.js"(exports, module) {
    var GenIcon = require_cjs().GenIcon;
    module.exports = function(props) {
      return GenIcon({ "tag": "svg", "attr": { "version": "1.1", "id": "mdi-format-list-numbered", "viewBox": "0 0 24 24", "fill": "currentColor" }, "child": [{ "tag": "path", "attr": { "d": "M7,13V11H21V13H7M7,19V17H21V19H7M7,7V5H21V7H7M3,8V5H2V4H4V8H3M2,17V16H5V20H2V19H4V18.5H3V17.5H4V17H2M4.25,10A0.75,0.75 0 0,1 5,10.75C5,10.95 4.92,11.14 4.79,11.27L3.12,13H5V14H2V13.08L4,11H2V10H4.25Z" } }] })(props);
    };
  }
});

// node_modules/@meronex/icons/zo/ZoStrokeWidth.js
var require_ZoStrokeWidth = __commonJS({
  "node_modules/@meronex/icons/zo/ZoStrokeWidth.js"(exports, module) {
    var GenIcon = require_cjs().GenIcon;
    module.exports = function(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 20 20", "fill": "currentColor" }, "child": [{ "tag": "path", "attr": { "d": "M0 0h20v5H0V0zm0 7h20v4H0V7zm0 6h20v3H0v-3zm0 5h20v2H0v-2z" } }] })(props);
    };
  }
});

// node_modules/@meronex/icons/md/MdOpacity.js
var require_MdOpacity = __commonJS({
  "node_modules/@meronex/icons/md/MdOpacity.js"(exports, module) {
    var GenIcon = require_cjs().GenIcon;
    module.exports = function(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "fill": "currentColor" }, "child": [{ "tag": "path", "attr": { "d": "M17.66 8L12 2.35 6.34 8C4.78 9.56 4 11.64 4 13.64s.78 4.11 2.34 5.67 3.61 2.35 5.66 2.35 4.1-.79 5.66-2.35S20 15.64 20 13.64 19.22 9.56 17.66 8zM6 14c.01-2 .62-3.27 1.76-4.4L12 5.27l4.24 4.38C17.38 10.77 17.99 12 18 14H6z" } }] })(props);
    };
  }
});

// node_modules/polotno/toolbar/toolbar.js
var import_react22 = __toESM(require_react());

// node_modules/polotno/toolbar/history-buttons.js
var import_react = __toESM(require_react(), 1);
var HistoryButtons = observer(({ store: t6 }) => import_react.default.createElement(Navbar.Group, { align: Alignment.LEFT, style: { paddingRight: "10px" } }, import_react.default.createElement(Button, { icon: import_react.default.createElement(Undo, null), minimal: true, onClick: () => {
  t6.history.undo();
}, disabled: !t6.history.canUndo }), import_react.default.createElement(Button, { icon: import_react.default.createElement(Redo, null), minimal: true, onClick: () => {
  t6.history.redo();
}, disabled: !t6.history.canRedo })));

// node_modules/polotno/toolbar/text-toolbar.js
var import_react5 = __toESM(require_react(), 1);

// node_modules/memoize-one/dist/memoize-one.esm.js
var safeIsNaN = Number.isNaN || function ponyfill(value) {
  return typeof value === "number" && value !== value;
};
function isEqual(first, second) {
  if (first === second) {
    return true;
  }
  if (safeIsNaN(first) && safeIsNaN(second)) {
    return true;
  }
  return false;
}
function areInputsEqual(newInputs, lastInputs) {
  if (newInputs.length !== lastInputs.length) {
    return false;
  }
  for (var i = 0; i < newInputs.length; i++) {
    if (!isEqual(newInputs[i], lastInputs[i])) {
      return false;
    }
  }
  return true;
}
function memoizeOne(resultFn, isEqual2) {
  if (isEqual2 === void 0) {
    isEqual2 = areInputsEqual;
  }
  var lastThis;
  var lastArgs = [];
  var lastResult;
  var calledOnce = false;
  function memoized() {
    var newArgs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      newArgs[_i] = arguments[_i];
    }
    if (calledOnce && lastThis === this && isEqual2(newArgs, lastArgs)) {
      return lastResult;
    }
    lastResult = resultFn.apply(this, newArgs);
    calledOnce = true;
    lastThis = this;
    lastArgs = newArgs;
    return lastResult;
  }
  return memoized;
}
var memoize_one_esm_default = memoizeOne;

// node_modules/react-window/dist/index.esm.js
var import_react2 = __toESM(require_react());
var hasNativePerformanceNow = typeof performance === "object" && typeof performance.now === "function";
var now = hasNativePerformanceNow ? function() {
  return performance.now();
} : function() {
  return Date.now();
};
function cancelTimeout(timeoutID) {
  cancelAnimationFrame(timeoutID.id);
}
function requestTimeout(callback, delay) {
  var start = now();
  function tick() {
    if (now() - start >= delay) {
      callback.call(null);
    } else {
      timeoutID.id = requestAnimationFrame(tick);
    }
  }
  var timeoutID = {
    id: requestAnimationFrame(tick)
  };
  return timeoutID;
}
var size = -1;
function getScrollbarSize(recalculate) {
  if (recalculate === void 0) {
    recalculate = false;
  }
  if (size === -1 || recalculate) {
    var div = document.createElement("div");
    var style = div.style;
    style.width = "50px";
    style.height = "50px";
    style.overflow = "scroll";
    document.body.appendChild(div);
    size = div.offsetWidth - div.clientWidth;
    document.body.removeChild(div);
  }
  return size;
}
var cachedRTLResult = null;
function getRTLOffsetType(recalculate) {
  if (recalculate === void 0) {
    recalculate = false;
  }
  if (cachedRTLResult === null || recalculate) {
    var outerDiv = document.createElement("div");
    var outerStyle = outerDiv.style;
    outerStyle.width = "50px";
    outerStyle.height = "50px";
    outerStyle.overflow = "scroll";
    outerStyle.direction = "rtl";
    var innerDiv = document.createElement("div");
    var innerStyle = innerDiv.style;
    innerStyle.width = "100px";
    innerStyle.height = "100px";
    outerDiv.appendChild(innerDiv);
    document.body.appendChild(outerDiv);
    if (outerDiv.scrollLeft > 0) {
      cachedRTLResult = "positive-descending";
    } else {
      outerDiv.scrollLeft = 1;
      if (outerDiv.scrollLeft === 0) {
        cachedRTLResult = "negative";
      } else {
        cachedRTLResult = "positive-ascending";
      }
    }
    document.body.removeChild(outerDiv);
    return cachedRTLResult;
  }
  return cachedRTLResult;
}
var IS_SCROLLING_DEBOUNCE_INTERVAL = 150;
var defaultItemKey = function defaultItemKey2(_ref) {
  var columnIndex = _ref.columnIndex, data = _ref.data, rowIndex = _ref.rowIndex;
  return rowIndex + ":" + columnIndex;
};
var devWarningsOverscanCount = null;
var devWarningsOverscanRowsColumnsCount = null;
var devWarningsTagName = null;
if (true) {
  if (typeof window !== "undefined" && typeof window.WeakSet !== "undefined") {
    devWarningsOverscanCount = /* @__PURE__ */ new WeakSet();
    devWarningsOverscanRowsColumnsCount = /* @__PURE__ */ new WeakSet();
    devWarningsTagName = /* @__PURE__ */ new WeakSet();
  }
}
function createGridComponent(_ref2) {
  var _class;
  var getColumnOffset3 = _ref2.getColumnOffset, getColumnStartIndexForOffset3 = _ref2.getColumnStartIndexForOffset, getColumnStopIndexForStartIndex3 = _ref2.getColumnStopIndexForStartIndex, getColumnWidth3 = _ref2.getColumnWidth, getEstimatedTotalHeight4 = _ref2.getEstimatedTotalHeight, getEstimatedTotalWidth4 = _ref2.getEstimatedTotalWidth, getOffsetForColumnAndAlignment3 = _ref2.getOffsetForColumnAndAlignment, getOffsetForRowAndAlignment3 = _ref2.getOffsetForRowAndAlignment, getRowHeight3 = _ref2.getRowHeight, getRowOffset3 = _ref2.getRowOffset, getRowStartIndexForOffset3 = _ref2.getRowStartIndexForOffset, getRowStopIndexForStartIndex3 = _ref2.getRowStopIndexForStartIndex, initInstanceProps5 = _ref2.initInstanceProps, shouldResetStyleCacheOnItemSizeChange = _ref2.shouldResetStyleCacheOnItemSizeChange, validateProps5 = _ref2.validateProps;
  return _class = function(_PureComponent) {
    _inheritsLoose(Grid, _PureComponent);
    function Grid(props) {
      var _this;
      _this = _PureComponent.call(this, props) || this;
      _this._instanceProps = initInstanceProps5(_this.props, _assertThisInitialized(_this));
      _this._resetIsScrollingTimeoutId = null;
      _this._outerRef = void 0;
      _this.state = {
        instance: _assertThisInitialized(_this),
        isScrolling: false,
        horizontalScrollDirection: "forward",
        scrollLeft: typeof _this.props.initialScrollLeft === "number" ? _this.props.initialScrollLeft : 0,
        scrollTop: typeof _this.props.initialScrollTop === "number" ? _this.props.initialScrollTop : 0,
        scrollUpdateWasRequested: false,
        verticalScrollDirection: "forward"
      };
      _this._callOnItemsRendered = void 0;
      _this._callOnItemsRendered = memoize_one_esm_default(function(overscanColumnStartIndex, overscanColumnStopIndex, overscanRowStartIndex, overscanRowStopIndex, visibleColumnStartIndex, visibleColumnStopIndex, visibleRowStartIndex, visibleRowStopIndex) {
        return _this.props.onItemsRendered({
          overscanColumnStartIndex,
          overscanColumnStopIndex,
          overscanRowStartIndex,
          overscanRowStopIndex,
          visibleColumnStartIndex,
          visibleColumnStopIndex,
          visibleRowStartIndex,
          visibleRowStopIndex
        });
      });
      _this._callOnScroll = void 0;
      _this._callOnScroll = memoize_one_esm_default(function(scrollLeft, scrollTop, horizontalScrollDirection, verticalScrollDirection, scrollUpdateWasRequested) {
        return _this.props.onScroll({
          horizontalScrollDirection,
          scrollLeft,
          scrollTop,
          verticalScrollDirection,
          scrollUpdateWasRequested
        });
      });
      _this._getItemStyle = void 0;
      _this._getItemStyle = function(rowIndex, columnIndex) {
        var _this$props = _this.props, columnWidth = _this$props.columnWidth, direction = _this$props.direction, rowHeight = _this$props.rowHeight;
        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && columnWidth, shouldResetStyleCacheOnItemSizeChange && direction, shouldResetStyleCacheOnItemSizeChange && rowHeight);
        var key = rowIndex + ":" + columnIndex;
        var style;
        if (itemStyleCache.hasOwnProperty(key)) {
          style = itemStyleCache[key];
        } else {
          var _offset = getColumnOffset3(_this.props, columnIndex, _this._instanceProps);
          var isRtl = direction === "rtl";
          itemStyleCache[key] = style = {
            position: "absolute",
            left: isRtl ? void 0 : _offset,
            right: isRtl ? _offset : void 0,
            top: getRowOffset3(_this.props, rowIndex, _this._instanceProps),
            height: getRowHeight3(_this.props, rowIndex, _this._instanceProps),
            width: getColumnWidth3(_this.props, columnIndex, _this._instanceProps)
          };
        }
        return style;
      };
      _this._getItemStyleCache = void 0;
      _this._getItemStyleCache = memoize_one_esm_default(function(_2, __, ___) {
        return {};
      });
      _this._onScroll = function(event) {
        var _event$currentTarget = event.currentTarget, clientHeight = _event$currentTarget.clientHeight, clientWidth = _event$currentTarget.clientWidth, scrollLeft = _event$currentTarget.scrollLeft, scrollTop = _event$currentTarget.scrollTop, scrollHeight = _event$currentTarget.scrollHeight, scrollWidth = _event$currentTarget.scrollWidth;
        _this.setState(function(prevState) {
          if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {
            return null;
          }
          var direction = _this.props.direction;
          var calculatedScrollLeft = scrollLeft;
          if (direction === "rtl") {
            switch (getRTLOffsetType()) {
              case "negative":
                calculatedScrollLeft = -scrollLeft;
                break;
              case "positive-descending":
                calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;
                break;
            }
          }
          calculatedScrollLeft = Math.max(0, Math.min(calculatedScrollLeft, scrollWidth - clientWidth));
          var calculatedScrollTop = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));
          return {
            isScrolling: true,
            horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? "forward" : "backward",
            scrollLeft: calculatedScrollLeft,
            scrollTop: calculatedScrollTop,
            verticalScrollDirection: prevState.scrollTop < scrollTop ? "forward" : "backward",
            scrollUpdateWasRequested: false
          };
        }, _this._resetIsScrollingDebounced);
      };
      _this._outerRefSetter = function(ref) {
        var outerRef = _this.props.outerRef;
        _this._outerRef = ref;
        if (typeof outerRef === "function") {
          outerRef(ref);
        } else if (outerRef != null && typeof outerRef === "object" && outerRef.hasOwnProperty("current")) {
          outerRef.current = ref;
        }
      };
      _this._resetIsScrollingDebounced = function() {
        if (_this._resetIsScrollingTimeoutId !== null) {
          cancelTimeout(_this._resetIsScrollingTimeoutId);
        }
        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL);
      };
      _this._resetIsScrolling = function() {
        _this._resetIsScrollingTimeoutId = null;
        _this.setState({
          isScrolling: false
        }, function() {
          _this._getItemStyleCache(-1);
        });
      };
      return _this;
    }
    Grid.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
      validateSharedProps(nextProps, prevState);
      validateProps5(nextProps);
      return null;
    };
    var _proto = Grid.prototype;
    _proto.scrollTo = function scrollTo(_ref3) {
      var scrollLeft = _ref3.scrollLeft, scrollTop = _ref3.scrollTop;
      if (scrollLeft !== void 0) {
        scrollLeft = Math.max(0, scrollLeft);
      }
      if (scrollTop !== void 0) {
        scrollTop = Math.max(0, scrollTop);
      }
      this.setState(function(prevState) {
        if (scrollLeft === void 0) {
          scrollLeft = prevState.scrollLeft;
        }
        if (scrollTop === void 0) {
          scrollTop = prevState.scrollTop;
        }
        if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {
          return null;
        }
        return {
          horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? "forward" : "backward",
          scrollLeft,
          scrollTop,
          scrollUpdateWasRequested: true,
          verticalScrollDirection: prevState.scrollTop < scrollTop ? "forward" : "backward"
        };
      }, this._resetIsScrollingDebounced);
    };
    _proto.scrollToItem = function scrollToItem(_ref4) {
      var _ref4$align = _ref4.align, align = _ref4$align === void 0 ? "auto" : _ref4$align, columnIndex = _ref4.columnIndex, rowIndex = _ref4.rowIndex;
      var _this$props2 = this.props, columnCount = _this$props2.columnCount, height = _this$props2.height, rowCount = _this$props2.rowCount, width = _this$props2.width;
      var _this$state = this.state, scrollLeft = _this$state.scrollLeft, scrollTop = _this$state.scrollTop;
      var scrollbarSize = getScrollbarSize();
      if (columnIndex !== void 0) {
        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));
      }
      if (rowIndex !== void 0) {
        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));
      }
      var estimatedTotalHeight = getEstimatedTotalHeight4(this.props, this._instanceProps);
      var estimatedTotalWidth = getEstimatedTotalWidth4(this.props, this._instanceProps);
      var horizontalScrollbarSize = estimatedTotalWidth > width ? scrollbarSize : 0;
      var verticalScrollbarSize = estimatedTotalHeight > height ? scrollbarSize : 0;
      this.scrollTo({
        scrollLeft: columnIndex !== void 0 ? getOffsetForColumnAndAlignment3(this.props, columnIndex, align, scrollLeft, this._instanceProps, verticalScrollbarSize) : scrollLeft,
        scrollTop: rowIndex !== void 0 ? getOffsetForRowAndAlignment3(this.props, rowIndex, align, scrollTop, this._instanceProps, horizontalScrollbarSize) : scrollTop
      });
    };
    _proto.componentDidMount = function componentDidMount() {
      var _this$props3 = this.props, initialScrollLeft = _this$props3.initialScrollLeft, initialScrollTop = _this$props3.initialScrollTop;
      if (this._outerRef != null) {
        var outerRef = this._outerRef;
        if (typeof initialScrollLeft === "number") {
          outerRef.scrollLeft = initialScrollLeft;
        }
        if (typeof initialScrollTop === "number") {
          outerRef.scrollTop = initialScrollTop;
        }
      }
      this._callPropsCallbacks();
    };
    _proto.componentDidUpdate = function componentDidUpdate() {
      var direction = this.props.direction;
      var _this$state2 = this.state, scrollLeft = _this$state2.scrollLeft, scrollTop = _this$state2.scrollTop, scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;
      if (scrollUpdateWasRequested && this._outerRef != null) {
        var outerRef = this._outerRef;
        if (direction === "rtl") {
          switch (getRTLOffsetType()) {
            case "negative":
              outerRef.scrollLeft = -scrollLeft;
              break;
            case "positive-ascending":
              outerRef.scrollLeft = scrollLeft;
              break;
            default:
              var clientWidth = outerRef.clientWidth, scrollWidth = outerRef.scrollWidth;
              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;
              break;
          }
        } else {
          outerRef.scrollLeft = Math.max(0, scrollLeft);
        }
        outerRef.scrollTop = Math.max(0, scrollTop);
      }
      this._callPropsCallbacks();
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      if (this._resetIsScrollingTimeoutId !== null) {
        cancelTimeout(this._resetIsScrollingTimeoutId);
      }
    };
    _proto.render = function render() {
      var _this$props4 = this.props, children = _this$props4.children, className = _this$props4.className, columnCount = _this$props4.columnCount, direction = _this$props4.direction, height = _this$props4.height, innerRef = _this$props4.innerRef, innerElementType = _this$props4.innerElementType, innerTagName = _this$props4.innerTagName, itemData = _this$props4.itemData, _this$props4$itemKey = _this$props4.itemKey, itemKey = _this$props4$itemKey === void 0 ? defaultItemKey : _this$props4$itemKey, outerElementType = _this$props4.outerElementType, outerTagName = _this$props4.outerTagName, rowCount = _this$props4.rowCount, style = _this$props4.style, useIsScrolling = _this$props4.useIsScrolling, width = _this$props4.width;
      var isScrolling = this.state.isScrolling;
      var _this$_getHorizontalR = this._getHorizontalRangeToRender(), columnStartIndex = _this$_getHorizontalR[0], columnStopIndex = _this$_getHorizontalR[1];
      var _this$_getVerticalRan = this._getVerticalRangeToRender(), rowStartIndex = _this$_getVerticalRan[0], rowStopIndex = _this$_getVerticalRan[1];
      var items = [];
      if (columnCount > 0 && rowCount) {
        for (var _rowIndex = rowStartIndex; _rowIndex <= rowStopIndex; _rowIndex++) {
          for (var _columnIndex = columnStartIndex; _columnIndex <= columnStopIndex; _columnIndex++) {
            items.push((0, import_react2.createElement)(children, {
              columnIndex: _columnIndex,
              data: itemData,
              isScrolling: useIsScrolling ? isScrolling : void 0,
              key: itemKey({
                columnIndex: _columnIndex,
                data: itemData,
                rowIndex: _rowIndex
              }),
              rowIndex: _rowIndex,
              style: this._getItemStyle(_rowIndex, _columnIndex)
            }));
          }
        }
      }
      var estimatedTotalHeight = getEstimatedTotalHeight4(this.props, this._instanceProps);
      var estimatedTotalWidth = getEstimatedTotalWidth4(this.props, this._instanceProps);
      return (0, import_react2.createElement)(outerElementType || outerTagName || "div", {
        className,
        onScroll: this._onScroll,
        ref: this._outerRefSetter,
        style: _extends({
          position: "relative",
          height,
          width,
          overflow: "auto",
          WebkitOverflowScrolling: "touch",
          willChange: "transform",
          direction
        }, style)
      }, (0, import_react2.createElement)(innerElementType || innerTagName || "div", {
        children: items,
        ref: innerRef,
        style: {
          height: estimatedTotalHeight,
          pointerEvents: isScrolling ? "none" : void 0,
          width: estimatedTotalWidth
        }
      }));
    };
    _proto._callPropsCallbacks = function _callPropsCallbacks() {
      var _this$props5 = this.props, columnCount = _this$props5.columnCount, onItemsRendered = _this$props5.onItemsRendered, onScroll = _this$props5.onScroll, rowCount = _this$props5.rowCount;
      if (typeof onItemsRendered === "function") {
        if (columnCount > 0 && rowCount > 0) {
          var _this$_getHorizontalR2 = this._getHorizontalRangeToRender(), _overscanColumnStartIndex = _this$_getHorizontalR2[0], _overscanColumnStopIndex = _this$_getHorizontalR2[1], _visibleColumnStartIndex = _this$_getHorizontalR2[2], _visibleColumnStopIndex = _this$_getHorizontalR2[3];
          var _this$_getVerticalRan2 = this._getVerticalRangeToRender(), _overscanRowStartIndex = _this$_getVerticalRan2[0], _overscanRowStopIndex = _this$_getVerticalRan2[1], _visibleRowStartIndex = _this$_getVerticalRan2[2], _visibleRowStopIndex = _this$_getVerticalRan2[3];
          this._callOnItemsRendered(_overscanColumnStartIndex, _overscanColumnStopIndex, _overscanRowStartIndex, _overscanRowStopIndex, _visibleColumnStartIndex, _visibleColumnStopIndex, _visibleRowStartIndex, _visibleRowStopIndex);
        }
      }
      if (typeof onScroll === "function") {
        var _this$state3 = this.state, _horizontalScrollDirection = _this$state3.horizontalScrollDirection, _scrollLeft = _this$state3.scrollLeft, _scrollTop = _this$state3.scrollTop, _scrollUpdateWasRequested = _this$state3.scrollUpdateWasRequested, _verticalScrollDirection = _this$state3.verticalScrollDirection;
        this._callOnScroll(_scrollLeft, _scrollTop, _horizontalScrollDirection, _verticalScrollDirection, _scrollUpdateWasRequested);
      }
    };
    _proto._getHorizontalRangeToRender = function _getHorizontalRangeToRender() {
      var _this$props6 = this.props, columnCount = _this$props6.columnCount, overscanColumnCount = _this$props6.overscanColumnCount, overscanColumnsCount = _this$props6.overscanColumnsCount, overscanCount = _this$props6.overscanCount, rowCount = _this$props6.rowCount;
      var _this$state4 = this.state, horizontalScrollDirection = _this$state4.horizontalScrollDirection, isScrolling = _this$state4.isScrolling, scrollLeft = _this$state4.scrollLeft;
      var overscanCountResolved = overscanColumnCount || overscanColumnsCount || overscanCount || 1;
      if (columnCount === 0 || rowCount === 0) {
        return [0, 0, 0, 0];
      }
      var startIndex = getColumnStartIndexForOffset3(this.props, scrollLeft, this._instanceProps);
      var stopIndex = getColumnStopIndexForStartIndex3(this.props, startIndex, scrollLeft, this._instanceProps);
      var overscanBackward = !isScrolling || horizontalScrollDirection === "backward" ? Math.max(1, overscanCountResolved) : 1;
      var overscanForward = !isScrolling || horizontalScrollDirection === "forward" ? Math.max(1, overscanCountResolved) : 1;
      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];
    };
    _proto._getVerticalRangeToRender = function _getVerticalRangeToRender() {
      var _this$props7 = this.props, columnCount = _this$props7.columnCount, overscanCount = _this$props7.overscanCount, overscanRowCount = _this$props7.overscanRowCount, overscanRowsCount = _this$props7.overscanRowsCount, rowCount = _this$props7.rowCount;
      var _this$state5 = this.state, isScrolling = _this$state5.isScrolling, verticalScrollDirection = _this$state5.verticalScrollDirection, scrollTop = _this$state5.scrollTop;
      var overscanCountResolved = overscanRowCount || overscanRowsCount || overscanCount || 1;
      if (columnCount === 0 || rowCount === 0) {
        return [0, 0, 0, 0];
      }
      var startIndex = getRowStartIndexForOffset3(this.props, scrollTop, this._instanceProps);
      var stopIndex = getRowStopIndexForStartIndex3(this.props, startIndex, scrollTop, this._instanceProps);
      var overscanBackward = !isScrolling || verticalScrollDirection === "backward" ? Math.max(1, overscanCountResolved) : 1;
      var overscanForward = !isScrolling || verticalScrollDirection === "forward" ? Math.max(1, overscanCountResolved) : 1;
      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];
    };
    return Grid;
  }(import_react2.PureComponent), _class.defaultProps = {
    direction: "ltr",
    itemData: void 0,
    useIsScrolling: false
  }, _class;
}
var validateSharedProps = function validateSharedProps2(_ref5, _ref6) {
  var children = _ref5.children, direction = _ref5.direction, height = _ref5.height, innerTagName = _ref5.innerTagName, outerTagName = _ref5.outerTagName, overscanColumnsCount = _ref5.overscanColumnsCount, overscanCount = _ref5.overscanCount, overscanRowsCount = _ref5.overscanRowsCount, width = _ref5.width;
  var instance = _ref6.instance;
  if (true) {
    if (typeof overscanCount === "number") {
      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {
        devWarningsOverscanCount.add(instance);
        console.warn("The overscanCount prop has been deprecated. Please use the overscanColumnCount and overscanRowCount props instead.");
      }
    }
    if (typeof overscanColumnsCount === "number" || typeof overscanRowsCount === "number") {
      if (devWarningsOverscanRowsColumnsCount && !devWarningsOverscanRowsColumnsCount.has(instance)) {
        devWarningsOverscanRowsColumnsCount.add(instance);
        console.warn("The overscanColumnsCount and overscanRowsCount props have been deprecated. Please use the overscanColumnCount and overscanRowCount props instead.");
      }
    }
    if (innerTagName != null || outerTagName != null) {
      if (devWarningsTagName && !devWarningsTagName.has(instance)) {
        devWarningsTagName.add(instance);
        console.warn("The innerTagName and outerTagName props have been deprecated. Please use the innerElementType and outerElementType props instead.");
      }
    }
    if (children == null) {
      throw Error('An invalid "children" prop has been specified. Value should be a React component. ' + ('"' + (children === null ? "null" : typeof children) + '" was specified.'));
    }
    switch (direction) {
      case "ltr":
      case "rtl":
        break;
      default:
        throw Error('An invalid "direction" prop has been specified. Value should be either "ltr" or "rtl". ' + ('"' + direction + '" was specified.'));
    }
    if (typeof width !== "number") {
      throw Error('An invalid "width" prop has been specified. Grids must specify a number for width. ' + ('"' + (width === null ? "null" : typeof width) + '" was specified.'));
    }
    if (typeof height !== "number") {
      throw Error('An invalid "height" prop has been specified. Grids must specify a number for height. ' + ('"' + (height === null ? "null" : typeof height) + '" was specified.'));
    }
  }
};
var DEFAULT_ESTIMATED_ITEM_SIZE = 50;
var getEstimatedTotalHeight = function getEstimatedTotalHeight2(_ref, _ref2) {
  var rowCount = _ref.rowCount;
  var rowMetadataMap = _ref2.rowMetadataMap, estimatedRowHeight = _ref2.estimatedRowHeight, lastMeasuredRowIndex = _ref2.lastMeasuredRowIndex;
  var totalSizeOfMeasuredRows = 0;
  if (lastMeasuredRowIndex >= rowCount) {
    lastMeasuredRowIndex = rowCount - 1;
  }
  if (lastMeasuredRowIndex >= 0) {
    var itemMetadata = rowMetadataMap[lastMeasuredRowIndex];
    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;
  }
  var numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;
  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;
  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;
};
var getEstimatedTotalWidth = function getEstimatedTotalWidth2(_ref3, _ref4) {
  var columnCount = _ref3.columnCount;
  var columnMetadataMap = _ref4.columnMetadataMap, estimatedColumnWidth = _ref4.estimatedColumnWidth, lastMeasuredColumnIndex = _ref4.lastMeasuredColumnIndex;
  var totalSizeOfMeasuredRows = 0;
  if (lastMeasuredColumnIndex >= columnCount) {
    lastMeasuredColumnIndex = columnCount - 1;
  }
  if (lastMeasuredColumnIndex >= 0) {
    var itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];
    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;
  }
  var numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;
  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;
  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;
};
var getItemMetadata = function getItemMetadata2(itemType, props, index, instanceProps) {
  var itemMetadataMap, itemSize, lastMeasuredIndex;
  if (itemType === "column") {
    itemMetadataMap = instanceProps.columnMetadataMap;
    itemSize = props.columnWidth;
    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;
  } else {
    itemMetadataMap = instanceProps.rowMetadataMap;
    itemSize = props.rowHeight;
    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;
  }
  if (index > lastMeasuredIndex) {
    var offset = 0;
    if (lastMeasuredIndex >= 0) {
      var itemMetadata = itemMetadataMap[lastMeasuredIndex];
      offset = itemMetadata.offset + itemMetadata.size;
    }
    for (var i = lastMeasuredIndex + 1; i <= index; i++) {
      var size2 = itemSize(i);
      itemMetadataMap[i] = {
        offset,
        size: size2
      };
      offset += size2;
    }
    if (itemType === "column") {
      instanceProps.lastMeasuredColumnIndex = index;
    } else {
      instanceProps.lastMeasuredRowIndex = index;
    }
  }
  return itemMetadataMap[index];
};
var findNearestItem = function findNearestItem2(itemType, props, instanceProps, offset) {
  var itemMetadataMap, lastMeasuredIndex;
  if (itemType === "column") {
    itemMetadataMap = instanceProps.columnMetadataMap;
    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;
  } else {
    itemMetadataMap = instanceProps.rowMetadataMap;
    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;
  }
  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;
  if (lastMeasuredItemOffset >= offset) {
    return findNearestItemBinarySearch(itemType, props, instanceProps, lastMeasuredIndex, 0, offset);
  } else {
    return findNearestItemExponentialSearch(itemType, props, instanceProps, Math.max(0, lastMeasuredIndex), offset);
  }
};
var findNearestItemBinarySearch = function findNearestItemBinarySearch2(itemType, props, instanceProps, high, low, offset) {
  while (low <= high) {
    var middle = low + Math.floor((high - low) / 2);
    var currentOffset = getItemMetadata(itemType, props, middle, instanceProps).offset;
    if (currentOffset === offset) {
      return middle;
    } else if (currentOffset < offset) {
      low = middle + 1;
    } else if (currentOffset > offset) {
      high = middle - 1;
    }
  }
  if (low > 0) {
    return low - 1;
  } else {
    return 0;
  }
};
var findNearestItemExponentialSearch = function findNearestItemExponentialSearch2(itemType, props, instanceProps, index, offset) {
  var itemCount = itemType === "column" ? props.columnCount : props.rowCount;
  var interval = 1;
  while (index < itemCount && getItemMetadata(itemType, props, index, instanceProps).offset < offset) {
    index += interval;
    interval *= 2;
  }
  return findNearestItemBinarySearch(itemType, props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);
};
var getOffsetForIndexAndAlignment = function getOffsetForIndexAndAlignment2(itemType, props, index, align, scrollOffset, instanceProps, scrollbarSize) {
  var size2 = itemType === "column" ? props.width : props.height;
  var itemMetadata = getItemMetadata(itemType, props, index, instanceProps);
  var estimatedTotalSize = itemType === "column" ? getEstimatedTotalWidth(props, instanceProps) : getEstimatedTotalHeight(props, instanceProps);
  var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size2, itemMetadata.offset));
  var minOffset = Math.max(0, itemMetadata.offset - size2 + scrollbarSize + itemMetadata.size);
  if (align === "smart") {
    if (scrollOffset >= minOffset - size2 && scrollOffset <= maxOffset + size2) {
      align = "auto";
    } else {
      align = "center";
    }
  }
  switch (align) {
    case "start":
      return maxOffset;
    case "end":
      return minOffset;
    case "center":
      return Math.round(minOffset + (maxOffset - minOffset) / 2);
    case "auto":
    default:
      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {
        return scrollOffset;
      } else if (minOffset > maxOffset) {
        return minOffset;
      } else if (scrollOffset < minOffset) {
        return minOffset;
      } else {
        return maxOffset;
      }
  }
};
var VariableSizeGrid = createGridComponent({
  getColumnOffset: function getColumnOffset(props, index, instanceProps) {
    return getItemMetadata("column", props, index, instanceProps).offset;
  },
  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(props, scrollLeft, instanceProps) {
    return findNearestItem("column", props, instanceProps, scrollLeft);
  },
  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(props, startIndex, scrollLeft, instanceProps) {
    var columnCount = props.columnCount, width = props.width;
    var itemMetadata = getItemMetadata("column", props, startIndex, instanceProps);
    var maxOffset = scrollLeft + width;
    var offset = itemMetadata.offset + itemMetadata.size;
    var stopIndex = startIndex;
    while (stopIndex < columnCount - 1 && offset < maxOffset) {
      stopIndex++;
      offset += getItemMetadata("column", props, stopIndex, instanceProps).size;
    }
    return stopIndex;
  },
  getColumnWidth: function getColumnWidth(props, index, instanceProps) {
    return instanceProps.columnMetadataMap[index].size;
  },
  getEstimatedTotalHeight,
  getEstimatedTotalWidth,
  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {
    return getOffsetForIndexAndAlignment("column", props, index, align, scrollOffset, instanceProps, scrollbarSize);
  },
  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {
    return getOffsetForIndexAndAlignment("row", props, index, align, scrollOffset, instanceProps, scrollbarSize);
  },
  getRowOffset: function getRowOffset(props, index, instanceProps) {
    return getItemMetadata("row", props, index, instanceProps).offset;
  },
  getRowHeight: function getRowHeight(props, index, instanceProps) {
    return instanceProps.rowMetadataMap[index].size;
  },
  getRowStartIndexForOffset: function getRowStartIndexForOffset(props, scrollTop, instanceProps) {
    return findNearestItem("row", props, instanceProps, scrollTop);
  },
  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(props, startIndex, scrollTop, instanceProps) {
    var rowCount = props.rowCount, height = props.height;
    var itemMetadata = getItemMetadata("row", props, startIndex, instanceProps);
    var maxOffset = scrollTop + height;
    var offset = itemMetadata.offset + itemMetadata.size;
    var stopIndex = startIndex;
    while (stopIndex < rowCount - 1 && offset < maxOffset) {
      stopIndex++;
      offset += getItemMetadata("row", props, stopIndex, instanceProps).size;
    }
    return stopIndex;
  },
  initInstanceProps: function initInstanceProps(props, instance) {
    var _ref5 = props, estimatedColumnWidth = _ref5.estimatedColumnWidth, estimatedRowHeight = _ref5.estimatedRowHeight;
    var instanceProps = {
      columnMetadataMap: {},
      estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,
      estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,
      lastMeasuredColumnIndex: -1,
      lastMeasuredRowIndex: -1,
      rowMetadataMap: {}
    };
    instance.resetAfterColumnIndex = function(columnIndex, shouldForceUpdate) {
      if (shouldForceUpdate === void 0) {
        shouldForceUpdate = true;
      }
      instance.resetAfterIndices({
        columnIndex,
        shouldForceUpdate
      });
    };
    instance.resetAfterRowIndex = function(rowIndex, shouldForceUpdate) {
      if (shouldForceUpdate === void 0) {
        shouldForceUpdate = true;
      }
      instance.resetAfterIndices({
        rowIndex,
        shouldForceUpdate
      });
    };
    instance.resetAfterIndices = function(_ref6) {
      var columnIndex = _ref6.columnIndex, rowIndex = _ref6.rowIndex, _ref6$shouldForceUpda = _ref6.shouldForceUpdate, shouldForceUpdate = _ref6$shouldForceUpda === void 0 ? true : _ref6$shouldForceUpda;
      if (typeof columnIndex === "number") {
        instanceProps.lastMeasuredColumnIndex = Math.min(instanceProps.lastMeasuredColumnIndex, columnIndex - 1);
      }
      if (typeof rowIndex === "number") {
        instanceProps.lastMeasuredRowIndex = Math.min(instanceProps.lastMeasuredRowIndex, rowIndex - 1);
      }
      instance._getItemStyleCache(-1);
      if (shouldForceUpdate) {
        instance.forceUpdate();
      }
    };
    return instanceProps;
  },
  shouldResetStyleCacheOnItemSizeChange: false,
  validateProps: function validateProps(_ref7) {
    var columnWidth = _ref7.columnWidth, rowHeight = _ref7.rowHeight;
    if (true) {
      if (typeof columnWidth !== "function") {
        throw Error('An invalid "columnWidth" prop has been specified. Value should be a function. ' + ('"' + (columnWidth === null ? "null" : typeof columnWidth) + '" was specified.'));
      } else if (typeof rowHeight !== "function") {
        throw Error('An invalid "rowHeight" prop has been specified. Value should be a function. ' + ('"' + (rowHeight === null ? "null" : typeof rowHeight) + '" was specified.'));
      }
    }
  }
});
var IS_SCROLLING_DEBOUNCE_INTERVAL$1 = 150;
var defaultItemKey$1 = function defaultItemKey3(index, data) {
  return index;
};
var devWarningsDirection = null;
var devWarningsTagName$1 = null;
if (true) {
  if (typeof window !== "undefined" && typeof window.WeakSet !== "undefined") {
    devWarningsDirection = /* @__PURE__ */ new WeakSet();
    devWarningsTagName$1 = /* @__PURE__ */ new WeakSet();
  }
}
function createListComponent(_ref) {
  var _class;
  var getItemOffset3 = _ref.getItemOffset, getEstimatedTotalSize4 = _ref.getEstimatedTotalSize, getItemSize3 = _ref.getItemSize, getOffsetForIndexAndAlignment5 = _ref.getOffsetForIndexAndAlignment, getStartIndexForOffset3 = _ref.getStartIndexForOffset, getStopIndexForStartIndex3 = _ref.getStopIndexForStartIndex, initInstanceProps5 = _ref.initInstanceProps, shouldResetStyleCacheOnItemSizeChange = _ref.shouldResetStyleCacheOnItemSizeChange, validateProps5 = _ref.validateProps;
  return _class = function(_PureComponent) {
    _inheritsLoose(List, _PureComponent);
    function List(props) {
      var _this;
      _this = _PureComponent.call(this, props) || this;
      _this._instanceProps = initInstanceProps5(_this.props, _assertThisInitialized(_this));
      _this._outerRef = void 0;
      _this._resetIsScrollingTimeoutId = null;
      _this.state = {
        instance: _assertThisInitialized(_this),
        isScrolling: false,
        scrollDirection: "forward",
        scrollOffset: typeof _this.props.initialScrollOffset === "number" ? _this.props.initialScrollOffset : 0,
        scrollUpdateWasRequested: false
      };
      _this._callOnItemsRendered = void 0;
      _this._callOnItemsRendered = memoize_one_esm_default(function(overscanStartIndex, overscanStopIndex, visibleStartIndex, visibleStopIndex) {
        return _this.props.onItemsRendered({
          overscanStartIndex,
          overscanStopIndex,
          visibleStartIndex,
          visibleStopIndex
        });
      });
      _this._callOnScroll = void 0;
      _this._callOnScroll = memoize_one_esm_default(function(scrollDirection, scrollOffset, scrollUpdateWasRequested) {
        return _this.props.onScroll({
          scrollDirection,
          scrollOffset,
          scrollUpdateWasRequested
        });
      });
      _this._getItemStyle = void 0;
      _this._getItemStyle = function(index) {
        var _this$props = _this.props, direction = _this$props.direction, itemSize = _this$props.itemSize, layout = _this$props.layout;
        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && itemSize, shouldResetStyleCacheOnItemSizeChange && layout, shouldResetStyleCacheOnItemSizeChange && direction);
        var style;
        if (itemStyleCache.hasOwnProperty(index)) {
          style = itemStyleCache[index];
        } else {
          var _offset = getItemOffset3(_this.props, index, _this._instanceProps);
          var size2 = getItemSize3(_this.props, index, _this._instanceProps);
          var isHorizontal = direction === "horizontal" || layout === "horizontal";
          var isRtl = direction === "rtl";
          var offsetHorizontal = isHorizontal ? _offset : 0;
          itemStyleCache[index] = style = {
            position: "absolute",
            left: isRtl ? void 0 : offsetHorizontal,
            right: isRtl ? offsetHorizontal : void 0,
            top: !isHorizontal ? _offset : 0,
            height: !isHorizontal ? size2 : "100%",
            width: isHorizontal ? size2 : "100%"
          };
        }
        return style;
      };
      _this._getItemStyleCache = void 0;
      _this._getItemStyleCache = memoize_one_esm_default(function(_2, __, ___) {
        return {};
      });
      _this._onScrollHorizontal = function(event) {
        var _event$currentTarget = event.currentTarget, clientWidth = _event$currentTarget.clientWidth, scrollLeft = _event$currentTarget.scrollLeft, scrollWidth = _event$currentTarget.scrollWidth;
        _this.setState(function(prevState) {
          if (prevState.scrollOffset === scrollLeft) {
            return null;
          }
          var direction = _this.props.direction;
          var scrollOffset = scrollLeft;
          if (direction === "rtl") {
            switch (getRTLOffsetType()) {
              case "negative":
                scrollOffset = -scrollLeft;
                break;
              case "positive-descending":
                scrollOffset = scrollWidth - clientWidth - scrollLeft;
                break;
            }
          }
          scrollOffset = Math.max(0, Math.min(scrollOffset, scrollWidth - clientWidth));
          return {
            isScrolling: true,
            scrollDirection: prevState.scrollOffset < scrollOffset ? "forward" : "backward",
            scrollOffset,
            scrollUpdateWasRequested: false
          };
        }, _this._resetIsScrollingDebounced);
      };
      _this._onScrollVertical = function(event) {
        var _event$currentTarget2 = event.currentTarget, clientHeight = _event$currentTarget2.clientHeight, scrollHeight = _event$currentTarget2.scrollHeight, scrollTop = _event$currentTarget2.scrollTop;
        _this.setState(function(prevState) {
          if (prevState.scrollOffset === scrollTop) {
            return null;
          }
          var scrollOffset = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));
          return {
            isScrolling: true,
            scrollDirection: prevState.scrollOffset < scrollOffset ? "forward" : "backward",
            scrollOffset,
            scrollUpdateWasRequested: false
          };
        }, _this._resetIsScrollingDebounced);
      };
      _this._outerRefSetter = function(ref) {
        var outerRef = _this.props.outerRef;
        _this._outerRef = ref;
        if (typeof outerRef === "function") {
          outerRef(ref);
        } else if (outerRef != null && typeof outerRef === "object" && outerRef.hasOwnProperty("current")) {
          outerRef.current = ref;
        }
      };
      _this._resetIsScrollingDebounced = function() {
        if (_this._resetIsScrollingTimeoutId !== null) {
          cancelTimeout(_this._resetIsScrollingTimeoutId);
        }
        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL$1);
      };
      _this._resetIsScrolling = function() {
        _this._resetIsScrollingTimeoutId = null;
        _this.setState({
          isScrolling: false
        }, function() {
          _this._getItemStyleCache(-1, null);
        });
      };
      return _this;
    }
    List.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
      validateSharedProps$1(nextProps, prevState);
      validateProps5(nextProps);
      return null;
    };
    var _proto = List.prototype;
    _proto.scrollTo = function scrollTo(scrollOffset) {
      scrollOffset = Math.max(0, scrollOffset);
      this.setState(function(prevState) {
        if (prevState.scrollOffset === scrollOffset) {
          return null;
        }
        return {
          scrollDirection: prevState.scrollOffset < scrollOffset ? "forward" : "backward",
          scrollOffset,
          scrollUpdateWasRequested: true
        };
      }, this._resetIsScrollingDebounced);
    };
    _proto.scrollToItem = function scrollToItem(index, align) {
      if (align === void 0) {
        align = "auto";
      }
      var _this$props2 = this.props, itemCount = _this$props2.itemCount, layout = _this$props2.layout;
      var scrollOffset = this.state.scrollOffset;
      index = Math.max(0, Math.min(index, itemCount - 1));
      var scrollbarSize = 0;
      if (this._outerRef) {
        var outerRef = this._outerRef;
        if (layout === "vertical") {
          scrollbarSize = outerRef.scrollWidth > outerRef.clientWidth ? getScrollbarSize() : 0;
        } else {
          scrollbarSize = outerRef.scrollHeight > outerRef.clientHeight ? getScrollbarSize() : 0;
        }
      }
      this.scrollTo(getOffsetForIndexAndAlignment5(this.props, index, align, scrollOffset, this._instanceProps, scrollbarSize));
    };
    _proto.componentDidMount = function componentDidMount() {
      var _this$props3 = this.props, direction = _this$props3.direction, initialScrollOffset = _this$props3.initialScrollOffset, layout = _this$props3.layout;
      if (typeof initialScrollOffset === "number" && this._outerRef != null) {
        var outerRef = this._outerRef;
        if (direction === "horizontal" || layout === "horizontal") {
          outerRef.scrollLeft = initialScrollOffset;
        } else {
          outerRef.scrollTop = initialScrollOffset;
        }
      }
      this._callPropsCallbacks();
    };
    _proto.componentDidUpdate = function componentDidUpdate() {
      var _this$props4 = this.props, direction = _this$props4.direction, layout = _this$props4.layout;
      var _this$state = this.state, scrollOffset = _this$state.scrollOffset, scrollUpdateWasRequested = _this$state.scrollUpdateWasRequested;
      if (scrollUpdateWasRequested && this._outerRef != null) {
        var outerRef = this._outerRef;
        if (direction === "horizontal" || layout === "horizontal") {
          if (direction === "rtl") {
            switch (getRTLOffsetType()) {
              case "negative":
                outerRef.scrollLeft = -scrollOffset;
                break;
              case "positive-ascending":
                outerRef.scrollLeft = scrollOffset;
                break;
              default:
                var clientWidth = outerRef.clientWidth, scrollWidth = outerRef.scrollWidth;
                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;
                break;
            }
          } else {
            outerRef.scrollLeft = scrollOffset;
          }
        } else {
          outerRef.scrollTop = scrollOffset;
        }
      }
      this._callPropsCallbacks();
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      if (this._resetIsScrollingTimeoutId !== null) {
        cancelTimeout(this._resetIsScrollingTimeoutId);
      }
    };
    _proto.render = function render() {
      var _this$props5 = this.props, children = _this$props5.children, className = _this$props5.className, direction = _this$props5.direction, height = _this$props5.height, innerRef = _this$props5.innerRef, innerElementType = _this$props5.innerElementType, innerTagName = _this$props5.innerTagName, itemCount = _this$props5.itemCount, itemData = _this$props5.itemData, _this$props5$itemKey = _this$props5.itemKey, itemKey = _this$props5$itemKey === void 0 ? defaultItemKey$1 : _this$props5$itemKey, layout = _this$props5.layout, outerElementType = _this$props5.outerElementType, outerTagName = _this$props5.outerTagName, style = _this$props5.style, useIsScrolling = _this$props5.useIsScrolling, width = _this$props5.width;
      var isScrolling = this.state.isScrolling;
      var isHorizontal = direction === "horizontal" || layout === "horizontal";
      var onScroll = isHorizontal ? this._onScrollHorizontal : this._onScrollVertical;
      var _this$_getRangeToRend = this._getRangeToRender(), startIndex = _this$_getRangeToRend[0], stopIndex = _this$_getRangeToRend[1];
      var items = [];
      if (itemCount > 0) {
        for (var _index = startIndex; _index <= stopIndex; _index++) {
          items.push((0, import_react2.createElement)(children, {
            data: itemData,
            key: itemKey(_index, itemData),
            index: _index,
            isScrolling: useIsScrolling ? isScrolling : void 0,
            style: this._getItemStyle(_index)
          }));
        }
      }
      var estimatedTotalSize = getEstimatedTotalSize4(this.props, this._instanceProps);
      return (0, import_react2.createElement)(outerElementType || outerTagName || "div", {
        className,
        onScroll,
        ref: this._outerRefSetter,
        style: _extends({
          position: "relative",
          height,
          width,
          overflow: "auto",
          WebkitOverflowScrolling: "touch",
          willChange: "transform",
          direction
        }, style)
      }, (0, import_react2.createElement)(innerElementType || innerTagName || "div", {
        children: items,
        ref: innerRef,
        style: {
          height: isHorizontal ? "100%" : estimatedTotalSize,
          pointerEvents: isScrolling ? "none" : void 0,
          width: isHorizontal ? estimatedTotalSize : "100%"
        }
      }));
    };
    _proto._callPropsCallbacks = function _callPropsCallbacks() {
      if (typeof this.props.onItemsRendered === "function") {
        var itemCount = this.props.itemCount;
        if (itemCount > 0) {
          var _this$_getRangeToRend2 = this._getRangeToRender(), _overscanStartIndex = _this$_getRangeToRend2[0], _overscanStopIndex = _this$_getRangeToRend2[1], _visibleStartIndex = _this$_getRangeToRend2[2], _visibleStopIndex = _this$_getRangeToRend2[3];
          this._callOnItemsRendered(_overscanStartIndex, _overscanStopIndex, _visibleStartIndex, _visibleStopIndex);
        }
      }
      if (typeof this.props.onScroll === "function") {
        var _this$state2 = this.state, _scrollDirection = _this$state2.scrollDirection, _scrollOffset = _this$state2.scrollOffset, _scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;
        this._callOnScroll(_scrollDirection, _scrollOffset, _scrollUpdateWasRequested);
      }
    };
    _proto._getRangeToRender = function _getRangeToRender() {
      var _this$props6 = this.props, itemCount = _this$props6.itemCount, overscanCount = _this$props6.overscanCount;
      var _this$state3 = this.state, isScrolling = _this$state3.isScrolling, scrollDirection = _this$state3.scrollDirection, scrollOffset = _this$state3.scrollOffset;
      if (itemCount === 0) {
        return [0, 0, 0, 0];
      }
      var startIndex = getStartIndexForOffset3(this.props, scrollOffset, this._instanceProps);
      var stopIndex = getStopIndexForStartIndex3(this.props, startIndex, scrollOffset, this._instanceProps);
      var overscanBackward = !isScrolling || scrollDirection === "backward" ? Math.max(1, overscanCount) : 1;
      var overscanForward = !isScrolling || scrollDirection === "forward" ? Math.max(1, overscanCount) : 1;
      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];
    };
    return List;
  }(import_react2.PureComponent), _class.defaultProps = {
    direction: "ltr",
    itemData: void 0,
    layout: "vertical",
    overscanCount: 2,
    useIsScrolling: false
  }, _class;
}
var validateSharedProps$1 = function validateSharedProps3(_ref2, _ref3) {
  var children = _ref2.children, direction = _ref2.direction, height = _ref2.height, layout = _ref2.layout, innerTagName = _ref2.innerTagName, outerTagName = _ref2.outerTagName, width = _ref2.width;
  var instance = _ref3.instance;
  if (true) {
    if (innerTagName != null || outerTagName != null) {
      if (devWarningsTagName$1 && !devWarningsTagName$1.has(instance)) {
        devWarningsTagName$1.add(instance);
        console.warn("The innerTagName and outerTagName props have been deprecated. Please use the innerElementType and outerElementType props instead.");
      }
    }
    var isHorizontal = direction === "horizontal" || layout === "horizontal";
    switch (direction) {
      case "horizontal":
      case "vertical":
        if (devWarningsDirection && !devWarningsDirection.has(instance)) {
          devWarningsDirection.add(instance);
          console.warn('The direction prop should be either "ltr" (default) or "rtl". Please use the layout prop to specify "vertical" (default) or "horizontal" orientation.');
        }
        break;
      case "ltr":
      case "rtl":
        break;
      default:
        throw Error('An invalid "direction" prop has been specified. Value should be either "ltr" or "rtl". ' + ('"' + direction + '" was specified.'));
    }
    switch (layout) {
      case "horizontal":
      case "vertical":
        break;
      default:
        throw Error('An invalid "layout" prop has been specified. Value should be either "horizontal" or "vertical". ' + ('"' + layout + '" was specified.'));
    }
    if (children == null) {
      throw Error('An invalid "children" prop has been specified. Value should be a React component. ' + ('"' + (children === null ? "null" : typeof children) + '" was specified.'));
    }
    if (isHorizontal && typeof width !== "number") {
      throw Error('An invalid "width" prop has been specified. Horizontal lists must specify a number for width. ' + ('"' + (width === null ? "null" : typeof width) + '" was specified.'));
    } else if (!isHorizontal && typeof height !== "number") {
      throw Error('An invalid "height" prop has been specified. Vertical lists must specify a number for height. ' + ('"' + (height === null ? "null" : typeof height) + '" was specified.'));
    }
  }
};
var DEFAULT_ESTIMATED_ITEM_SIZE$1 = 50;
var getItemMetadata$1 = function getItemMetadata3(props, index, instanceProps) {
  var _ref = props, itemSize = _ref.itemSize;
  var itemMetadataMap = instanceProps.itemMetadataMap, lastMeasuredIndex = instanceProps.lastMeasuredIndex;
  if (index > lastMeasuredIndex) {
    var offset = 0;
    if (lastMeasuredIndex >= 0) {
      var itemMetadata = itemMetadataMap[lastMeasuredIndex];
      offset = itemMetadata.offset + itemMetadata.size;
    }
    for (var i = lastMeasuredIndex + 1; i <= index; i++) {
      var size2 = itemSize(i);
      itemMetadataMap[i] = {
        offset,
        size: size2
      };
      offset += size2;
    }
    instanceProps.lastMeasuredIndex = index;
  }
  return itemMetadataMap[index];
};
var findNearestItem$1 = function findNearestItem3(props, instanceProps, offset) {
  var itemMetadataMap = instanceProps.itemMetadataMap, lastMeasuredIndex = instanceProps.lastMeasuredIndex;
  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;
  if (lastMeasuredItemOffset >= offset) {
    return findNearestItemBinarySearch$1(props, instanceProps, lastMeasuredIndex, 0, offset);
  } else {
    return findNearestItemExponentialSearch$1(props, instanceProps, Math.max(0, lastMeasuredIndex), offset);
  }
};
var findNearestItemBinarySearch$1 = function findNearestItemBinarySearch3(props, instanceProps, high, low, offset) {
  while (low <= high) {
    var middle = low + Math.floor((high - low) / 2);
    var currentOffset = getItemMetadata$1(props, middle, instanceProps).offset;
    if (currentOffset === offset) {
      return middle;
    } else if (currentOffset < offset) {
      low = middle + 1;
    } else if (currentOffset > offset) {
      high = middle - 1;
    }
  }
  if (low > 0) {
    return low - 1;
  } else {
    return 0;
  }
};
var findNearestItemExponentialSearch$1 = function findNearestItemExponentialSearch3(props, instanceProps, index, offset) {
  var itemCount = props.itemCount;
  var interval = 1;
  while (index < itemCount && getItemMetadata$1(props, index, instanceProps).offset < offset) {
    index += interval;
    interval *= 2;
  }
  return findNearestItemBinarySearch$1(props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);
};
var getEstimatedTotalSize = function getEstimatedTotalSize2(_ref2, _ref3) {
  var itemCount = _ref2.itemCount;
  var itemMetadataMap = _ref3.itemMetadataMap, estimatedItemSize = _ref3.estimatedItemSize, lastMeasuredIndex = _ref3.lastMeasuredIndex;
  var totalSizeOfMeasuredItems = 0;
  if (lastMeasuredIndex >= itemCount) {
    lastMeasuredIndex = itemCount - 1;
  }
  if (lastMeasuredIndex >= 0) {
    var itemMetadata = itemMetadataMap[lastMeasuredIndex];
    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;
  }
  var numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;
  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;
  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;
};
var VariableSizeList = createListComponent({
  getItemOffset: function getItemOffset(props, index, instanceProps) {
    return getItemMetadata$1(props, index, instanceProps).offset;
  },
  getItemSize: function getItemSize(props, index, instanceProps) {
    return instanceProps.itemMetadataMap[index].size;
  },
  getEstimatedTotalSize,
  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment3(props, index, align, scrollOffset, instanceProps, scrollbarSize) {
    var direction = props.direction, height = props.height, layout = props.layout, width = props.width;
    var isHorizontal = direction === "horizontal" || layout === "horizontal";
    var size2 = isHorizontal ? width : height;
    var itemMetadata = getItemMetadata$1(props, index, instanceProps);
    var estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);
    var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size2, itemMetadata.offset));
    var minOffset = Math.max(0, itemMetadata.offset - size2 + itemMetadata.size + scrollbarSize);
    if (align === "smart") {
      if (scrollOffset >= minOffset - size2 && scrollOffset <= maxOffset + size2) {
        align = "auto";
      } else {
        align = "center";
      }
    }
    switch (align) {
      case "start":
        return maxOffset;
      case "end":
        return minOffset;
      case "center":
        return Math.round(minOffset + (maxOffset - minOffset) / 2);
      case "auto":
      default:
        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {
          return scrollOffset;
        } else if (scrollOffset < minOffset) {
          return minOffset;
        } else {
          return maxOffset;
        }
    }
  },
  getStartIndexForOffset: function getStartIndexForOffset(props, offset, instanceProps) {
    return findNearestItem$1(props, instanceProps, offset);
  },
  getStopIndexForStartIndex: function getStopIndexForStartIndex(props, startIndex, scrollOffset, instanceProps) {
    var direction = props.direction, height = props.height, itemCount = props.itemCount, layout = props.layout, width = props.width;
    var isHorizontal = direction === "horizontal" || layout === "horizontal";
    var size2 = isHorizontal ? width : height;
    var itemMetadata = getItemMetadata$1(props, startIndex, instanceProps);
    var maxOffset = scrollOffset + size2;
    var offset = itemMetadata.offset + itemMetadata.size;
    var stopIndex = startIndex;
    while (stopIndex < itemCount - 1 && offset < maxOffset) {
      stopIndex++;
      offset += getItemMetadata$1(props, stopIndex, instanceProps).size;
    }
    return stopIndex;
  },
  initInstanceProps: function initInstanceProps2(props, instance) {
    var _ref4 = props, estimatedItemSize = _ref4.estimatedItemSize;
    var instanceProps = {
      itemMetadataMap: {},
      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE$1,
      lastMeasuredIndex: -1
    };
    instance.resetAfterIndex = function(index, shouldForceUpdate) {
      if (shouldForceUpdate === void 0) {
        shouldForceUpdate = true;
      }
      instanceProps.lastMeasuredIndex = Math.min(instanceProps.lastMeasuredIndex, index - 1);
      instance._getItemStyleCache(-1);
      if (shouldForceUpdate) {
        instance.forceUpdate();
      }
    };
    return instanceProps;
  },
  shouldResetStyleCacheOnItemSizeChange: false,
  validateProps: function validateProps2(_ref5) {
    var itemSize = _ref5.itemSize;
    if (true) {
      if (typeof itemSize !== "function") {
        throw Error('An invalid "itemSize" prop has been specified. Value should be a function. ' + ('"' + (itemSize === null ? "null" : typeof itemSize) + '" was specified.'));
      }
    }
  }
});
var FixedSizeGrid = createGridComponent({
  getColumnOffset: function getColumnOffset2(_ref, index) {
    var columnWidth = _ref.columnWidth;
    return index * columnWidth;
  },
  getColumnWidth: function getColumnWidth2(_ref2, index) {
    var columnWidth = _ref2.columnWidth;
    return columnWidth;
  },
  getRowOffset: function getRowOffset2(_ref3, index) {
    var rowHeight = _ref3.rowHeight;
    return index * rowHeight;
  },
  getRowHeight: function getRowHeight2(_ref4, index) {
    var rowHeight = _ref4.rowHeight;
    return rowHeight;
  },
  getEstimatedTotalHeight: function getEstimatedTotalHeight3(_ref5) {
    var rowCount = _ref5.rowCount, rowHeight = _ref5.rowHeight;
    return rowHeight * rowCount;
  },
  getEstimatedTotalWidth: function getEstimatedTotalWidth3(_ref6) {
    var columnCount = _ref6.columnCount, columnWidth = _ref6.columnWidth;
    return columnWidth * columnCount;
  },
  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment2(_ref7, columnIndex, align, scrollLeft, instanceProps, scrollbarSize) {
    var columnCount = _ref7.columnCount, columnWidth = _ref7.columnWidth, width = _ref7.width;
    var lastColumnOffset = Math.max(0, columnCount * columnWidth - width);
    var maxOffset = Math.min(lastColumnOffset, columnIndex * columnWidth);
    var minOffset = Math.max(0, columnIndex * columnWidth - width + scrollbarSize + columnWidth);
    if (align === "smart") {
      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {
        align = "auto";
      } else {
        align = "center";
      }
    }
    switch (align) {
      case "start":
        return maxOffset;
      case "end":
        return minOffset;
      case "center":
        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);
        if (middleOffset < Math.ceil(width / 2)) {
          return 0;
        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {
          return lastColumnOffset;
        } else {
          return middleOffset;
        }
      case "auto":
      default:
        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {
          return scrollLeft;
        } else if (minOffset > maxOffset) {
          return minOffset;
        } else if (scrollLeft < minOffset) {
          return minOffset;
        } else {
          return maxOffset;
        }
    }
  },
  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment2(_ref8, rowIndex, align, scrollTop, instanceProps, scrollbarSize) {
    var rowHeight = _ref8.rowHeight, height = _ref8.height, rowCount = _ref8.rowCount;
    var lastRowOffset = Math.max(0, rowCount * rowHeight - height);
    var maxOffset = Math.min(lastRowOffset, rowIndex * rowHeight);
    var minOffset = Math.max(0, rowIndex * rowHeight - height + scrollbarSize + rowHeight);
    if (align === "smart") {
      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {
        align = "auto";
      } else {
        align = "center";
      }
    }
    switch (align) {
      case "start":
        return maxOffset;
      case "end":
        return minOffset;
      case "center":
        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);
        if (middleOffset < Math.ceil(height / 2)) {
          return 0;
        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {
          return lastRowOffset;
        } else {
          return middleOffset;
        }
      case "auto":
      default:
        if (scrollTop >= minOffset && scrollTop <= maxOffset) {
          return scrollTop;
        } else if (minOffset > maxOffset) {
          return minOffset;
        } else if (scrollTop < minOffset) {
          return minOffset;
        } else {
          return maxOffset;
        }
    }
  },
  getColumnStartIndexForOffset: function getColumnStartIndexForOffset2(_ref9, scrollLeft) {
    var columnWidth = _ref9.columnWidth, columnCount = _ref9.columnCount;
    return Math.max(0, Math.min(columnCount - 1, Math.floor(scrollLeft / columnWidth)));
  },
  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex2(_ref10, startIndex, scrollLeft) {
    var columnWidth = _ref10.columnWidth, columnCount = _ref10.columnCount, width = _ref10.width;
    var left = startIndex * columnWidth;
    var numVisibleColumns = Math.ceil((width + scrollLeft - left) / columnWidth);
    return Math.max(0, Math.min(
      columnCount - 1,
      startIndex + numVisibleColumns - 1
      // -1 is because stop index is inclusive
    ));
  },
  getRowStartIndexForOffset: function getRowStartIndexForOffset2(_ref11, scrollTop) {
    var rowHeight = _ref11.rowHeight, rowCount = _ref11.rowCount;
    return Math.max(0, Math.min(rowCount - 1, Math.floor(scrollTop / rowHeight)));
  },
  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex2(_ref12, startIndex, scrollTop) {
    var rowHeight = _ref12.rowHeight, rowCount = _ref12.rowCount, height = _ref12.height;
    var top = startIndex * rowHeight;
    var numVisibleRows = Math.ceil((height + scrollTop - top) / rowHeight);
    return Math.max(0, Math.min(
      rowCount - 1,
      startIndex + numVisibleRows - 1
      // -1 is because stop index is inclusive
    ));
  },
  initInstanceProps: function initInstanceProps3(props) {
  },
  shouldResetStyleCacheOnItemSizeChange: true,
  validateProps: function validateProps3(_ref13) {
    var columnWidth = _ref13.columnWidth, rowHeight = _ref13.rowHeight;
    if (true) {
      if (typeof columnWidth !== "number") {
        throw Error('An invalid "columnWidth" prop has been specified. Value should be a number. ' + ('"' + (columnWidth === null ? "null" : typeof columnWidth) + '" was specified.'));
      }
      if (typeof rowHeight !== "number") {
        throw Error('An invalid "rowHeight" prop has been specified. Value should be a number. ' + ('"' + (rowHeight === null ? "null" : typeof rowHeight) + '" was specified.'));
      }
    }
  }
});
var FixedSizeList = createListComponent({
  getItemOffset: function getItemOffset2(_ref, index) {
    var itemSize = _ref.itemSize;
    return index * itemSize;
  },
  getItemSize: function getItemSize2(_ref2, index) {
    var itemSize = _ref2.itemSize;
    return itemSize;
  },
  getEstimatedTotalSize: function getEstimatedTotalSize3(_ref3) {
    var itemCount = _ref3.itemCount, itemSize = _ref3.itemSize;
    return itemSize * itemCount;
  },
  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment4(_ref4, index, align, scrollOffset, instanceProps, scrollbarSize) {
    var direction = _ref4.direction, height = _ref4.height, itemCount = _ref4.itemCount, itemSize = _ref4.itemSize, layout = _ref4.layout, width = _ref4.width;
    var isHorizontal = direction === "horizontal" || layout === "horizontal";
    var size2 = isHorizontal ? width : height;
    var lastItemOffset = Math.max(0, itemCount * itemSize - size2);
    var maxOffset = Math.min(lastItemOffset, index * itemSize);
    var minOffset = Math.max(0, index * itemSize - size2 + itemSize + scrollbarSize);
    if (align === "smart") {
      if (scrollOffset >= minOffset - size2 && scrollOffset <= maxOffset + size2) {
        align = "auto";
      } else {
        align = "center";
      }
    }
    switch (align) {
      case "start":
        return maxOffset;
      case "end":
        return minOffset;
      case "center": {
        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);
        if (middleOffset < Math.ceil(size2 / 2)) {
          return 0;
        } else if (middleOffset > lastItemOffset + Math.floor(size2 / 2)) {
          return lastItemOffset;
        } else {
          return middleOffset;
        }
      }
      case "auto":
      default:
        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {
          return scrollOffset;
        } else if (scrollOffset < minOffset) {
          return minOffset;
        } else {
          return maxOffset;
        }
    }
  },
  getStartIndexForOffset: function getStartIndexForOffset2(_ref5, offset) {
    var itemCount = _ref5.itemCount, itemSize = _ref5.itemSize;
    return Math.max(0, Math.min(itemCount - 1, Math.floor(offset / itemSize)));
  },
  getStopIndexForStartIndex: function getStopIndexForStartIndex2(_ref6, startIndex, scrollOffset) {
    var direction = _ref6.direction, height = _ref6.height, itemCount = _ref6.itemCount, itemSize = _ref6.itemSize, layout = _ref6.layout, width = _ref6.width;
    var isHorizontal = direction === "horizontal" || layout === "horizontal";
    var offset = startIndex * itemSize;
    var size2 = isHorizontal ? width : height;
    var numVisibleItems = Math.ceil((size2 + scrollOffset - offset) / itemSize);
    return Math.max(0, Math.min(
      itemCount - 1,
      startIndex + numVisibleItems - 1
      // -1 is because stop index is inclusive
    ));
  },
  initInstanceProps: function initInstanceProps4(props) {
  },
  shouldResetStyleCacheOnItemSizeChange: true,
  validateProps: function validateProps4(_ref7) {
    var itemSize = _ref7.itemSize;
    if (true) {
      if (typeof itemSize !== "number") {
        throw Error('An invalid "itemSize" prop has been specified. Value should be a number. ' + ('"' + (itemSize === null ? "null" : typeof itemSize) + '" was specified.'));
      }
    }
  }
});

// node_modules/polotno/toolbar/filters-picker.js
var import_react3 = __toESM(require_react(), 1);
var e2 = function(e20, t6) {
  var n2 = {};
  for (var a in e20) {
    Object.prototype.hasOwnProperty.call(e20, a) && t6.indexOf(a) < 0 && (n2[a] = e20[a]);
  }
  if (null != e20 && "function" == typeof Object.getOwnPropertySymbols) {
    var l3 = 0;
    for (a = Object.getOwnPropertySymbols(e20); l3 < a.length; l3++) {
      t6.indexOf(a[l3]) < 0 && Object.prototype.propertyIsEnumerable.call(e20, a[l3]) && (n2[a[l3]] = e20[a[l3]]);
    }
  }
  return n2;
};
var p = (e20, t6, n2) => Math.max(t6, Math.min(n2, e20));
var NumberInput = (n2) => {
  var { value: a, onValueChange: l3 } = n2, r = e2(n2, ["value", "onValueChange"]);
  const [o2, d2] = import_react3.default.useState(a.toString());
  return import_react3.default.useEffect(() => {
    d2(a.toString());
  }, [a]), import_react3.default.createElement(NumericInput, Object.assign({ value: o2, onValueChange: (e20, t6) => {
    d2(t6), Number.isNaN(e20) || l3(e20);
  } }, r));
};
var h = ({ label: e20, enabled: n2, visible: a = true, onEnabledChange: d2, numberValue: c2, onNumberValueChange: s3, min: m2, max: u2 }) => a ? import_react3.default.createElement(import_react3.default.Fragment, null, import_react3.default.createElement(Switch, { checked: n2, label: e20, onChange: (e21) => {
  d2(e21.target.checked);
}, alignIndicator: Alignment.RIGHT, style: { marginTop: "20px" } }), n2 && import_react3.default.createElement("div", { style: { display: "flex", width: "100%", justifyContent: "space-between" } }, import_react3.default.createElement("div", { style: { paddingTop: "7px" } }, import_react3.default.createElement(Slider, { value: c2, onChange: (e21) => {
  s3(e21);
}, min: m2, max: u2, labelStepSize: 50, showTrackFill: false, labelRenderer: false })), import_react3.default.createElement(NumericInput, { value: c2, onValueChange: (e21) => {
  s3(p(e21, m2, u2));
}, buttonPosition: "none", style: { width: "45px", padding: "0 5px", marginLeft: "10px" }, min: m2, max: u2 }))) : null;
var FiltersPicker = observer(({ element: e20, store: c2, elements: g4 }) => {
  const b3 = g4 || [e20], E4 = b3[0], x2 = "text" === E4.type, y2 = "image" === E4.type, v3 = "svg" === E4.type, f2 = y2 || v3, w2 = (e21) => {
    c2.history.transaction(() => {
      b3.forEach((t6) => {
        t6.set(e21);
      });
    });
  };
  return import_react3.default.createElement(Popover, { content: import_react3.default.createElement("div", { style: { padding: "15px", paddingTop: "15px", width: "230px", maxHeight: "calc(100vh - 150px)", overflow: "auto" } }, import_react3.default.createElement(h, { label: t("toolbar.blur"), enabled: E4.blurEnabled, visible: f2 || x2, onEnabledChange: (e21) => {
    w2({ blurEnabled: e21 });
  }, numberValue: E4.blurRadius, onNumberValueChange: (e21) => {
    w2({ blurRadius: e21 });
  }, min: 0, max: 100 }), import_react3.default.createElement(h, { label: t("toolbar.brightness"), visible: f2, enabled: E4.brightnessEnabled, onEnabledChange: (e21) => {
    w2({ brightnessEnabled: e21 });
  }, numberValue: 100 * E4.brightness + 100, onNumberValueChange: (e21) => {
    w2({ brightness: (e21 - 100) / 100 });
  }, min: 0, max: 200 }), f2 && import_react3.default.createElement(Switch, { checked: E4.sepiaEnabled, label: t("toolbar.sepia"), onChange: (e21) => {
    w2({ sepiaEnabled: e21.target.checked });
  }, alignIndicator: Alignment.RIGHT, style: { marginTop: "20px" } }), f2 && import_react3.default.createElement(Switch, { checked: E4.grayscaleEnabled, label: t("toolbar.grayscale"), onChange: (e21) => {
    w2({ grayscaleEnabled: e21.target.checked });
  }, alignIndicator: Alignment.RIGHT, style: { marginTop: "20px" } }), x2 && import_react3.default.createElement(Switch, { checked: !!E4.curveEnabled, label: t("toolbar.curvedText") || "Curved text", onChange: (e21) => {
    w2({ curveEnabled: e21.target.checked });
  }, alignIndicator: Alignment.RIGHT, style: { marginTop: "20px" } }), x2 && E4.curveEnabled && import_react3.default.createElement(import_react3.default.Fragment, null, import_react3.default.createElement("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between", paddingTop: "5px", paddingBottom: "5px" } }, import_react3.default.createElement("div", null, t("toolbar.curvePower") || "Curve"), import_react3.default.createElement("div", null, import_react3.default.createElement(NumberInput, { value: Math.round(100 * E4.curvePower), onValueChange: (e21) => {
    w2({ curvePower: p(e21, -100, 100) / 100 });
  }, style: { width: "50px" }, min: -100, max: 100, buttonPosition: "none" }))), import_react3.default.createElement(Slider, { value: 100 * E4.curvePower, onChange: (e21) => {
    w2({ curvePower: p(e21, -100, 100) / 100 });
  }, min: -100, max: 100, labelStepSize: 50, labelRenderer: (e21) => 0 === e21 ? "0" : e21.toString() })), x2 && import_react3.default.createElement(Switch, { checked: !!E4.strokeWidth, label: t("toolbar.textStroke"), onChange: (e21) => {
    w2({ strokeWidth: e21.target.checked ? 2 : 0 });
  }, alignIndicator: Alignment.RIGHT, style: { marginTop: "20px" } }), x2 && !!E4.strokeWidth && import_react3.default.createElement(import_react3.default.Fragment, null, import_react3.default.createElement("div", { style: { display: "flex", justifyContent: "space-between" } }, import_react3.default.createElement(color_picker_default, { value: E4.stroke, size: 30, onChange: (e21) => {
    w2({ stroke: e21 });
  }, store: c2 }), import_react3.default.createElement(NumericInput, { defaultValue: E4.strokeWidth, onValueChange: (e21) => {
    w2({ strokeWidth: p(e21, 1, 30) });
  }, style: { width: "80px" }, min: 1, max: Math.round(E4.fontSize / 2) }))), x2 && import_react3.default.createElement(Switch, { checked: !!E4.backgroundEnabled, label: t("toolbar.textBackground"), onChange: (e21) => {
    w2({ backgroundEnabled: e21.target.checked });
  }, alignIndicator: Alignment.RIGHT, style: { marginTop: "20px" } }), !!E4.backgroundEnabled && import_react3.default.createElement(import_react3.default.Fragment, null, import_react3.default.createElement("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between", paddingTop: "5px", paddingBottom: "5px" } }, import_react3.default.createElement("div", null, t("toolbar.backgroundCornerRadius")), import_react3.default.createElement("div", null, import_react3.default.createElement(NumberInput, { value: 100 * E4.backgroundCornerRadius, onValueChange: (e21) => {
    w2({ backgroundCornerRadius: p(e21, 0, 100) / 100 });
  }, style: { width: "50px" }, min: 0, max: 100, buttonPosition: "none" }))), import_react3.default.createElement(Slider, { value: 100 * E4.backgroundCornerRadius, onChange: (e21) => {
    w2({ backgroundCornerRadius: p(e21, 0, 100) / 100 });
  }, min: 0, max: 100, labelRenderer: false }), import_react3.default.createElement("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between", paddingTop: "5px", paddingBottom: "5px" } }, import_react3.default.createElement("div", null, t("toolbar.backgroundPadding")), import_react3.default.createElement("div", null, import_react3.default.createElement(NumberInput, { value: Math.round(100 * E4.backgroundPadding), onValueChange: (e21) => {
    w2({ backgroundPadding: p(e21, 0, 100) / 100 });
  }, style: { width: "50px" }, min: 0, max: 100, buttonPosition: "none" }))), import_react3.default.createElement(Slider, { value: Math.round(100 * E4.backgroundPadding), onChange: (e21) => {
    w2({ backgroundPadding: p(e21, 0, 100) / 100 });
  }, min: 0, max: 100, labelRenderer: false }), import_react3.default.createElement("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between", paddingTop: "5px", paddingBottom: "5px" } }, import_react3.default.createElement("div", null, t("toolbar.opacity")), import_react3.default.createElement("div", null, import_react3.default.createElement(NumberInput, { value: Math.round(100 * E4.backgroundOpacity), onValueChange: (e21) => {
    w2({ backgroundOpacity: e21 / 100 });
  }, style: { width: "50px" }, min: 0, max: 100, buttonPosition: "none" }))), import_react3.default.createElement(Slider, { value: 100 * E4.backgroundOpacity, onChange: (e21) => {
    w2({ backgroundOpacity: e21 / 100 });
  }, min: 0, max: 100, labelRenderer: false }), import_react3.default.createElement("div", { style: { display: "flex", justifyContent: "space-between", paddingTop: "5px", paddingBottom: "5px" } }, import_react3.default.createElement("div", { style: { lineHeight: "30px" } }, t("toolbar.color")), import_react3.default.createElement(color_picker_default, { value: E4.backgroundColor, size: 30, onChange: (e21) => {
    w2({ backgroundColor: e21 });
  }, store: c2 }))), f2 && import_react3.default.createElement(Switch, { checked: !!E4.borderSize, label: t("toolbar.border"), onChange: (e21) => {
    w2({ borderSize: e21.target.checked ? 2 : 0 });
  }, alignIndicator: Alignment.RIGHT, style: { marginTop: "20px" } }), !!E4.borderSize && import_react3.default.createElement(import_react3.default.Fragment, null, import_react3.default.createElement("div", { style: { display: "flex", justifyContent: "space-between" } }, import_react3.default.createElement(color_picker_default, { value: E4.borderColor, size: 30, onChange: (e21) => {
    w2({ borderColor: e21 });
  }, store: c2 }), import_react3.default.createElement(NumericInput, { defaultValue: E4.borderSize, onValueChange: (e21) => {
    w2({ borderSize: p(e21, 1, Math.min(E4.width, E4.height) / 2) });
  }, style: { width: "80px" }, min: 1, max: Math.max(1, Math.min(E4.width, E4.height) / 2) }))), f2 && import_react3.default.createElement(Switch, { checked: !!E4.cornerRadius, label: t("toolbar.cornerRadius"), onChange: (e21) => {
    w2({ cornerRadius: e21.target.checked ? Math.min(E4.width / 4, E4.height / 4) : 0 });
  }, alignIndicator: Alignment.RIGHT, style: { marginTop: "20px" } }), f2 && !!E4.cornerRadius && import_react3.default.createElement("div", { style: { display: "flex", width: "100%", justifyContent: "space-between" } }, import_react3.default.createElement("div", { style: { width: "150px", paddingTop: "7px" } }, import_react3.default.createElement(Slider, { value: Math.min(E4.cornerRadius, Math.round(Math.min(E4.width / 2, E4.height / 2))), onChange: (e21) => {
    w2({ cornerRadius: e21 });
  }, min: 1, max: Math.round(Math.min(E4.width / 2, E4.height / 2)), labelStepSize: 50, showTrackFill: false, labelRenderer: false })), import_react3.default.createElement(NumericInput, { value: E4.cornerRadius, onValueChange: (e21) => {
    w2({ cornerRadius: p(e21, 1, Math.min(E4.width, E4.height) / 2) });
  }, buttonPosition: "none", style: { width: "45px", padding: "0 5px" }, min: 1, max: Math.round(Math.min(E4.width / 2, E4.height / 2)) })), import_react3.default.createElement(Switch, { checked: E4.shadowEnabled, label: t("toolbar.shadow"), onChange: (e21) => {
    w2({ shadowEnabled: e21.target.checked });
  }, alignIndicator: Alignment.RIGHT, style: { marginTop: "20px" } }), E4.shadowEnabled && import_react3.default.createElement(import_react3.default.Fragment, null, import_react3.default.createElement("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between", paddingTop: "5px", paddingBottom: "5px" } }, import_react3.default.createElement("div", null, t("toolbar.blur")), import_react3.default.createElement("div", null, import_react3.default.createElement(NumberInput, { value: E4.shadowBlur, onValueChange: (e21) => {
    w2({ shadowBlur: p(e21, -50, 50) });
  }, style: { width: "50px" }, min: 0, max: 50, buttonPosition: "none" }))), import_react3.default.createElement(Slider, { value: E4.shadowBlur, onChange: (e21) => {
    w2({ shadowBlur: e21 });
  }, min: 0, max: 50, showTrackFill: false, labelRenderer: false }), import_react3.default.createElement("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between", paddingTop: "5px", paddingBottom: "5px" } }, import_react3.default.createElement("div", null, t("toolbar.offsetX")), import_react3.default.createElement("div", null, import_react3.default.createElement(NumberInput, { value: E4.shadowOffsetX, onValueChange: (e21) => {
    w2({ shadowOffsetX: p(e21, -50, 50) });
  }, style: { width: "50px" }, min: -50, max: 50, buttonPosition: "none" }))), import_react3.default.createElement(Slider, { value: E4.shadowOffsetX, onChange: (e21) => {
    w2({ shadowOffsetX: e21 });
  }, min: -50, max: 50, showTrackFill: false, labelRenderer: false }), import_react3.default.createElement("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between", paddingTop: "5px", paddingBottom: "5px" } }, import_react3.default.createElement("div", null, t("toolbar.offsetY")), import_react3.default.createElement("div", null, import_react3.default.createElement(NumberInput, { value: E4.shadowOffsetY, onValueChange: (e21) => {
    w2({ shadowOffsetY: p(e21, -50, 50) });
  }, style: { width: "50px" }, min: -50, max: 50, buttonPosition: "none" }))), import_react3.default.createElement(Slider, { value: E4.shadowOffsetY, onChange: (e21) => {
    w2({ shadowOffsetY: e21 });
  }, min: -50, max: 50, showTrackFill: false, labelRenderer: false }), import_react3.default.createElement("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between", paddingTop: "5px", paddingBottom: "5px" } }, import_react3.default.createElement("div", null, t("toolbar.opacity")), import_react3.default.createElement("div", null, import_react3.default.createElement(NumberInput, { value: Math.round(100 * E4.shadowOpacity), onValueChange: (e21) => {
    w2({ shadowOpacity: e21 / 100 });
  }, style: { width: "50px" }, min: 0, max: 100, buttonPosition: "none" }))), import_react3.default.createElement(Slider, { value: 100 * E4.shadowOpacity, onChange: (e21) => {
    w2({ shadowOpacity: e21 / 100 });
  }, min: 0, max: 100, labelRenderer: false }), import_react3.default.createElement("div", { style: { display: "flex", justifyContent: "space-between", paddingTop: "5px", paddingBottom: "5px" } }, import_react3.default.createElement("div", { style: { lineHeight: "30px" } }, t("toolbar.color")), import_react3.default.createElement(color_picker_default, { value: E4.shadowColor, size: 30, onChange: (e21) => {
    w2({ shadowColor: e21 });
  }, store: c2 })))), position: Position.BOTTOM }, import_react3.default.createElement(Button, { icon: import_react3.default.createElement(LeftJoin, null), text: t("toolbar.effects"), minimal: true }));
});
var EffectsPicker = observer(({ element: e20, store: a }) => e20.contentEditable ? import_react3.default.createElement(Button, { minimal: true, icon: import_react3.default.createElement(LeftJoin, null), text: t("toolbar.effects"), onClickCapture: (e21) => {
  e21.stopPropagation(), a.openSidePanel("effects");
} }) : null);
var filters_picker_default = EffectsPicker;

// node_modules/polotno/toolbar/animations-picker.js
var import_react4 = __toESM(require_react(), 1);
var e3 = function(e20, t6) {
  var n2 = {};
  for (var a in e20) {
    Object.prototype.hasOwnProperty.call(e20, a) && t6.indexOf(a) < 0 && (n2[a] = e20[a]);
  }
  if (null != e20 && "function" == typeof Object.getOwnPropertySymbols) {
    var i = 0;
    for (a = Object.getOwnPropertySymbols(e20); i < a.length; i++) {
      t6.indexOf(a[i]) < 0 && Object.prototype.propertyIsEnumerable.call(e20, a[i]) && (n2[a[i]] = e20[a[i]]);
    }
  }
  return n2;
};
var NumberInput2 = (n2) => {
  var { value: a, onValueChange: i } = n2, o2 = e3(n2, ["value", "onValueChange"]);
  const [l3, m2] = import_react4.default.useState(a.toString());
  return import_react4.default.useEffect(() => {
    m2(a.toString());
  }, [a]), import_react4.default.createElement(NumericInput, Object.assign({ value: l3, onValueChange: (e20, t6) => {
    m2(t6), Number.isNaN(e20) || i(e20);
  } }, o2));
};
var b = observer(({ element: e20, store: a, enabled: i }) => {
  const o2 = e20.animations.find((e21) => "enter" === e21.type), l3 = e20.animations.find((e21) => "exit" === e21.type);
  return i ? import_react4.default.createElement(ButtonGroup, { style: { width: "100%" } }, import_react4.default.createElement(Button, { fill: true, active: (null == o2 ? void 0 : o2.enabled) && !(null == l3 ? void 0 : l3.enabled), onClick: () => {
    a.history.transaction(() => {
      e20.setAnimation("enter", { enabled: true }), e20.setAnimation("exit", { enabled: false });
    });
  } }, "Enter"), import_react4.default.createElement(Button, { fill: true, active: (null == o2 ? void 0 : o2.enabled) && (null == l3 ? void 0 : l3.enabled), onClick: () => {
    a.history.transaction(() => {
      e20.setAnimation("enter", { enabled: true }), e20.setAnimation("exit", { enabled: true });
    });
  } }, "Both"), import_react4.default.createElement(Button, { fill: true, active: (null == l3 ? void 0 : l3.enabled) && !(null == o2 ? void 0 : o2.enabled), onClick: () => {
    a.history.transaction(() => {
      e20.setAnimation("enter", { enabled: false }), e20.setAnimation("exit", { enabled: true });
    });
  } }, "Exit")) : null;
});
var v = (e20, { handleClick: n2, handleFocus: a, modifiers: i, query: o2 }) => i.matchesPredicate ? import_react4.default.createElement(MenuItem, { active: i.active, disabled: i.disabled, key: e20, onClick: n2, icon: "arrow-" + e20, onFocus: a, roleStructure: "listoption", text: e20, shouldDismissPopover: false }) : null;
var g = ["right", "left", "up", "down", "bottom-right", "bottom-left", "top-right", "top-left"];
var h2 = observer(({ value: e20, onChange: a }) => import_react4.default.createElement("div", { style: { paddingTop: "10px" } }, import_react4.default.createElement(Select, { items: g, itemRenderer: v, filterable: false, activeItem: e20, onItemSelect: (e21) => {
  a(e21);
} }, import_react4.default.createElement(Button, { text: e20, icon: "arrow-" + e20, fill: true }))));
var f = observer(({ element: e20, store: n2 }) => {
  const a = e20.animations.find((e21) => "enter" === e21.type);
  return a ? import_react4.default.createElement("div", { style: { padding: "10px" } }, import_react4.default.createElement("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between", paddingTop: "5px", paddingBottom: "5px" } }, import_react4.default.createElement("div", null, "Delay"), import_react4.default.createElement("div", null, import_react4.default.createElement(NumberInput2, { value: parseFloat((a.delay / 1e3).toFixed(2)), onValueChange: (t6) => {
    e20.setAnimation("enter", { delay: 1e3 * t6 });
  }, style: { width: "50px" }, minorStepSize: 0.01, stepSize: 0.01, min: 0, max: 2.5, buttonPosition: "none" }))), import_react4.default.createElement(Slider, { min: 0, max: 1e3, value: a.delay, showTrackFill: false, labelRenderer: false, onChange: (t6) => {
    e20.setAnimation("enter", { delay: t6 });
  } })) : null;
});
var y = observer(({ element: e20, store: n2 }) => {
  const a = e20.animations.find((e21) => "enter" === e21.type);
  return a ? import_react4.default.createElement("div", { style: { padding: "10px" } }, import_react4.default.createElement("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between", paddingTop: "5px", paddingBottom: "5px" } }, import_react4.default.createElement("div", null, "Duration"), import_react4.default.createElement("div", null, import_react4.default.createElement(NumberInput2, { value: parseFloat((a.duration / 1e3).toFixed(2)), onValueChange: (t6) => {
    e20.setAnimation("enter", { duration: 1e3 * t6 }), e20.setAnimation("exit", { duration: 1e3 * t6 });
  }, style: { width: "50px" }, minorStepSize: 0.01, stepSize: 0.01, min: 0, max: 2.5, buttonPosition: "none" }))), import_react4.default.createElement(Slider, { min: 0, max: 2500, value: a.duration, showTrackFill: false, labelRenderer: false, onChange: (t6) => {
    e20.setAnimation("enter", { duration: t6 }), e20.setAnimation("exit", { duration: t6 });
  } })) : null;
});
var AnimationsPickerOld = observer(({ element: e20, store: o2, elements: r }) => {
  var m2, d2;
  const c2 = r || [e20], p3 = c2[0], v3 = (p3.type, p3.type, p3.type, (e21, t6) => {
    o2.history.transaction(() => {
      c2.forEach((n2) => {
        n2.setAnimation("enter", Object.assign({ name: e21 }, t6)), n2.setAnimation("exit", Object.assign(Object.assign({ name: e21 }, t6), { from: t6.to, to: t6.from }));
      });
    }), t6.enabled && (o2.play({ animatedElementsIds: c2.map((e22) => e22.id), currentTime: p3.page.startTime }), setTimeout(() => {
      o2.stop();
    }, 1e3));
  }), g4 = (e21, t6) => {
    var n2;
    return !!((e21 ? null === (n2 = p3.animations) || void 0 === n2 ? void 0 : n2.filter((t7) => t7.name === e21) : p3.animations) || []).find((e22) => e22.enabled);
  };
  return import_react4.default.createElement(Popover, { hasBackdrop: false, autoFocus: false, content: import_react4.default.createElement("div", { style: { padding: "15px", paddingTop: "25px", width: "230px" } }, import_react4.default.createElement(Switch, { checked: g4("fade"), label: t("toolbar.fade"), onChange: (e21) => {
    v3("fade", { enabled: e21.target.checked });
  }, alignIndicator: Alignment.RIGHT }), import_react4.default.createElement(Switch, { checked: g4("move"), label: t("toolbar.move"), onChange: (e21) => {
    v3("move", { enabled: e21.target.checked });
  }, alignIndicator: Alignment.RIGHT }), import_react4.default.createElement(Switch, { checked: g4("zoom"), label: t("toolbar.zoom"), onChange: (e21) => {
    v3("zoom", { enabled: e21.target.checked });
  }, alignIndicator: Alignment.RIGHT }), import_react4.default.createElement(b, { element: p3, store: o2, name: "move", enabled: g4() }), g4("move") && import_react4.default.createElement(h2, { value: (null === (d2 = null === (m2 = p3.animations.find((e21) => "move" === e21.name)) || void 0 === m2 ? void 0 : m2.data) || void 0 === d2 ? void 0 : d2.direction) || "right", onChange: (e21) => {
    v3("move", { data: { direction: e21 }, enabled: true });
  } }), g4() && import_react4.default.createElement(f, { store: o2, element: e20 }), g4() && import_react4.default.createElement(y, { store: o2, element: e20 }), import_react4.default.createElement(Switch, { checked: g4("rotate"), label: t("toolbar.rotate"), onChange: (e21) => {
    var t6;
    t6 = { enabled: e21.target.checked }, o2.history.transaction(() => {
      c2.forEach((e22) => {
        e22.setAnimation("loop", Object.assign({ name: "rotate" }, t6));
      });
    }), t6.enabled && (o2.play({ animatedElementsIds: c2.map((e22) => e22.id), currentTime: p3.page.startTime }), setTimeout(() => {
      o2.stop();
    }, 1e3));
  }, alignIndicator: Alignment.RIGHT })), position: Position.BOTTOM }, import_react4.default.createElement(Button, { text: t("toolbar.animate"), minimal: true }));
});
var AnimationsPicker = observer(({ element: e20, store: a }) => e20.contentEditable ? import_react4.default.createElement(Button, { minimal: true, text: t("toolbar.animate"), onClickCapture: (e21) => {
  e21.stopPropagation(), a.openSidePanel("animation");
} }) : null);

// node_modules/polotno/toolbar/text-toolbar.js
var import_MdcFormatLineSpacing = __toESM(require_MdcFormatLineSpacing(), 1);
var import_MdcFormatLetterCase = __toESM(require_MdcFormatLetterCase(), 1);
var import_MdcFormatVerticalAlignTop = __toESM(require_MdcFormatVerticalAlignTop(), 1);
var import_MdcFormatVerticalAlignCenter = __toESM(require_MdcFormatVerticalAlignCenter(), 1);
var import_MdcFormatVerticalAlignBottom = __toESM(require_MdcFormatVerticalAlignBottom(), 1);
var e4 = function(e20, t6) {
  var n2 = {};
  for (var o2 in e20) {
    Object.prototype.hasOwnProperty.call(e20, o2) && t6.indexOf(o2) < 0 && (n2[o2] = e20[o2]);
  }
  if (null != e20 && "function" == typeof Object.getOwnPropertySymbols) {
    var r = 0;
    for (o2 = Object.getOwnPropertySymbols(e20); r < o2.length; r++) {
      t6.indexOf(o2[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e20, o2[r]) && (n2[o2[r]] = e20[o2[r]]);
    }
  }
  return n2;
};
var q = styled_default("img")`
  height: 20px;

  .bp5-dark & {
    filter: invert(1);
  }
`;
var J = getFontsList();
var K = ({ fontFamily: e20, handleClick: n2, modifiers: o2, store: r, isCustom: i }) => {
  const [l3, s3] = import_react5.default.useState(!i);
  if (import_react5.default.useEffect(() => {
    l3 || r.loadFont(e20);
  }, [e20, l3]), "_divider" === e20) {
    return import_react5.default.createElement("div", { style: { paddingTop: "10px" } }, import_react5.default.createElement(MenuDivider, null));
  }
  const m2 = l3 ? import_react5.default.createElement(q, { src: getGoogleFontImage(e20), alt: e20, onError: () => {
    s3(false);
  } }) : e20;
  return import_react5.default.createElement(MenuItem, { text: m2, active: o2.active, disabled: o2.disabled, onClick: n2, style: { fontFamily: '"' + e20 + '"' } });
};
var Q = ({ onChange: e20, defaultValue: n2 }) => {
  const o2 = import_react5.default.useRef(null);
  return import_react5.default.useEffect(() => {
    o2.current && o2.current.focus();
  }, []), import_react5.default.createElement(InputGroup, { leftIcon: import_react5.default.createElement(Search, null), inputRef: o2, defaultValue: n2, onChange: (t6) => e20(t6.target.value) });
};
var U = ({ store: e20, fonts: n2, activeFont: r, activeFontLabel: i, onFontSelect: a }) => {
  const [c2, s3] = import_react5.default.useState(""), p3 = n2.filter((e21) => e21.toLowerCase().indexOf(c2.toLowerCase()) >= 0);
  return import_react5.default.createElement(Popover, { content: import_react5.default.createElement("div", null, import_react5.default.createElement(Q, { onChange: (e21) => s3(e21), defaultValue: c2 }), import_react5.default.createElement("div", { style: { paddingTop: "5px" } }, import_react5.default.createElement(FixedSizeList, { innerElementType: import_react5.default.forwardRef((e21, n3) => import_react5.default.createElement(Menu, Object.assign({ ref: n3 }, e21))), height: Math.min(400, 30 * p3.length) + 10, width: 210, itemCount: p3.length, itemSize: 30, children: ({ index: n3, style: o2 }) => {
    const i2 = p3[n3];
    return import_react5.default.createElement("div", { style: o2 }, import_react5.default.createElement(K, { key: i2, fontFamily: i2, modifiers: { active: r === i2 }, handleClick: () => a(i2), store: e20, isCustom: e20.fonts.find((e21) => e21.fontFamily === i2) || globalFonts.find((e21) => e21.fontFamily === i2) }));
  } }))) }, import_react5.default.createElement(Button, { text: i, rightIcon: import_react5.default.createElement(CaretDown, null), minimal: true, style: { marginRight: "5px", fontFamily: '"' + r + '"', overflow: "hidden", whiteSpace: "nowrap", maxHeight: "30px" } }));
};
var X = {};
var fetcher = (e20) => X[e20] ? Promise.resolve(X[e20]) : fetch(e20).then((e21) => e21.json()).then((t6) => (X[e20] = t6, t6));
var TextFontFamily = observer(({ elements: e20, store: n2 }) => {
  const { data: o2, mutate: r } = useSWR(getGoogleFontsListAPI(), fetcher, { isPaused: () => isGoogleFontChanged(), fallbackData: [] });
  import_react5.default.useEffect(() => {
    r();
  }, [isGoogleFontChanged()]);
  const i = n2.fonts.concat(globalFonts).map((e21) => e21.fontFamily).concat((null == o2 ? void 0 : o2.length) && !isGoogleFontChanged() ? o2 : J);
  let l3 = e20[0].fontFamily;
  l3.length > 15 && (l3 = l3.slice(0, 15) + "...");
  const a = [];
  n2.find((e21) => ("text" === e21.type && a.push(e21.fontFamily), false));
  const c2 = [...new Set(a.concat("_divider").concat(i))];
  return import_react5.default.createElement(U, { fonts: c2, activeFont: e20[0].fontFamily, activeFontLabel: l3, store: n2, onFontSelect: (t6) => {
    n2.history.transaction(() => {
      e20.forEach((e21) => {
        e21.set({ fontFamily: t6 });
      });
    });
  } });
});
var TextFontSize = observer(({ elements: e20, store: n2 }) => import_react5.default.createElement(NumericInput, { onValueChange: (t6) => {
  Number.isNaN(t6) || n2.history.transaction(() => {
    e20.forEach((e21) => {
      e21.set({ fontSize: t6, width: Math.max(t6, e21.width) });
    });
  });
}, value: Math.round(e20[0].fontSize), style: { width: "50px" }, min: 5, max: 4 * n2.height }));
var ALIGN_OPTIONS = ["left", "center", "right", "justify"];
var Y = ["top", "middle", "bottom"];
var Z = { top: import_react5.default.createElement("span", { className: "bp5-icon" }, import_react5.default.createElement(import_MdcFormatVerticalAlignTop.default, null)), middle: import_react5.default.createElement("span", { className: "bp5-icon" }, import_react5.default.createElement(import_MdcFormatVerticalAlignCenter.default, null)), bottom: import_react5.default.createElement("span", { className: "bp5-icon" }, import_react5.default.createElement(import_MdcFormatVerticalAlignBottom.default, null)) };
var TextFontVariant = observer(({ elements: e20, store: n2 }) => {
  const i = e20[0];
  return import_react5.default.createElement(ButtonGroup, null, import_react5.default.createElement(Button, { minimal: true, icon: "left" === i.align ? import_react5.default.createElement(AlignLeft, null) : "center" === i.align ? import_react5.default.createElement(AlignCenter, null) : "right" === i.align ? import_react5.default.createElement(AlignRight, null) : import_react5.default.createElement(AlignJustify, null), onMouseDown: (e21) => {
    e21.preventDefault();
  }, onClick: () => {
    const t6 = (ALIGN_OPTIONS.indexOf(i.align) + 1 + ALIGN_OPTIONS.length) % ALIGN_OPTIONS.length, o2 = ALIGN_OPTIONS[t6];
    n2.history.transaction(() => {
      e20.forEach((e21) => {
        e21.set({ align: o2 });
      });
    });
  } }), flags.textVerticalResizeEnabled && import_react5.default.createElement(Button, { minimal: true, icon: Z[i.verticalAlign], onMouseDown: (e21) => {
    e21.preventDefault();
  }, onClick: () => {
    const t6 = (Y.indexOf(i.verticalAlign) + 1 + Y.length) % Y.length, o2 = Y[t6];
    n2.history.transaction(() => {
      e20.forEach((e21) => {
        e21.set({ verticalAlign: o2 });
      });
    });
  } }), import_react5.default.createElement(Button, { minimal: true, icon: import_react5.default.createElement(Bold, null), active: "bold" === i.fontWeight || "700" === i.fontWeight, onMouseDown: (e21) => {
    e21.preventDefault();
  }, onClick: () => {
    const t6 = "bold" === i.fontWeight || "700" === i.fontWeight;
    n2.history.transaction(() => {
      e20.forEach((e21) => {
        t6 ? e21.set({ fontWeight: "normal" }) : e21.set({ fontWeight: "bold" });
      });
    });
  } }), import_react5.default.createElement(Button, { minimal: true, icon: import_react5.default.createElement(Italic, null), active: "italic" === i.fontStyle, onMouseDown: (e21) => {
    e21.preventDefault();
  }, onClick: () => {
    const t6 = "italic" === i.fontStyle;
    n2.history.transaction(() => {
      e20.forEach((e21) => {
        t6 ? e21.set({ fontStyle: "normal" }) : e21.set({ fontStyle: "italic" });
      });
    });
  } }), import_react5.default.createElement(Button, { minimal: true, icon: import_react5.default.createElement(Underline, null), active: i.textDecoration.indexOf("underline") >= 0, onMouseDown: (e21) => {
    e21.preventDefault();
  }, onClick: () => {
    let t6 = i.textDecoration.split(" ");
    t6.indexOf("underline") >= 0 ? t6 = t6.filter((e21) => "underline" !== e21) : t6.push("underline"), n2.history.transaction(() => {
      e20.forEach((e21) => {
        e21.set({ textDecoration: t6.join(" ") });
      });
    });
  } }), import_react5.default.createElement(Button, { minimal: true, icon: import_react5.default.createElement(Strikethrough, null), active: i.textDecoration.indexOf("line-through") >= 0, onMouseDown: (e21) => {
    e21.preventDefault();
  }, onClick: () => {
    let t6 = i.textDecoration.split(" ");
    t6.indexOf("line-through") >= 0 ? t6 = t6.filter((e21) => "line-through" !== e21) : t6.push("line-through"), n2.history.transaction(() => {
      e20.forEach((e21) => {
        e21.set({ textDecoration: t6.join(" ") });
      });
    });
  } }));
});
var TextTransform = observer(({ elements: e20, store: n2 }) => import_react5.default.createElement(ButtonGroup, null, import_react5.default.createElement(Tooltip, { content: t("toolbar.uppercase") }, import_react5.default.createElement(Button, { variant: "minimal", active: "uppercase" == e20[0].textTransform, icon: import_react5.default.createElement(import_MdcFormatLetterCase.default, { size: 16, className: "bp5-icon" }), onMouseDown: (e21) => {
  e21.preventDefault();
}, onClick: () => {
  n2.history.transaction(() => {
    e20.forEach((e21) => {
      e21.set({ textTransform: "uppercase" === e21.textTransform ? "none" : "uppercase" });
    });
  });
} }))));
var TextFill = observer(({ elements: e20, store: n2 }) => import_react5.default.createElement(color_picker_default, { value: e20[0].fill, style: { marginRight: "5px" }, gradientEnabled: true, onChange: (t6) => n2.history.transaction(() => {
  e20.forEach((e21) => {
    e21.set({ fill: t6 });
  });
}), store: n2 }));
var NumberInput3 = (n2) => {
  var { value: o2, onValueChange: r } = n2, i = e4(n2, ["value", "onValueChange"]);
  const [l3, a] = import_react5.default.useState(o2.toString());
  return import_react5.default.useEffect(() => {
    a(o2.toString());
  }, [o2]), import_react5.default.createElement(NumericInput, Object.assign({ value: l3, onValueChange: (e20, t6) => {
    a(t6), Number.isNaN(e20) || r(e20);
  } }, i));
};
var TextSpacing = observer(({ elements: e20, store: n2 }) => {
  const r = e20[0], i = (t6) => {
    n2.history.transaction(() => {
      e20.forEach((e21) => {
        e21.set(t6);
      });
    });
  }, l3 = "number" == typeof r.lineHeight ? 100 * r.lineHeight : 120;
  return import_react5.default.createElement(Popover, { content: import_react5.default.createElement("div", { style: { padding: "15px", width: "230px" } }, import_react5.default.createElement("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between", paddingTop: "5px", paddingBottom: "5px" } }, import_react5.default.createElement("div", null, t("toolbar.lineHeight")), import_react5.default.createElement("div", null, import_react5.default.createElement(NumberInput3, { value: Math.round(l3), onValueChange: (e21) => {
    i({ lineHeight: e21 / 100 });
  }, style: { width: "50px" }, min: 50, max: 250, buttonPosition: "none" }))), import_react5.default.createElement(Slider, { value: Math.round(l3), onChange: (e21) => {
    i({ lineHeight: e21 / 100 });
  }, min: 50, max: 250, stepSize: 1, showTrackFill: false, labelRenderer: false }), import_react5.default.createElement("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between", paddingTop: "5px", paddingBottom: "5px" } }, import_react5.default.createElement("div", null, t("toolbar.letterSpacing")), import_react5.default.createElement("div", null, import_react5.default.createElement(NumberInput3, { value: Math.round(100 * r.letterSpacing), onValueChange: (e21) => {
    i({ letterSpacing: e21 / 100 });
  }, style: { width: "50px" }, min: -50, max: 250, buttonPosition: "none" }))), import_react5.default.createElement(Slider, { value: Math.round(100 * r.letterSpacing), onChange: (e21) => {
    i({ letterSpacing: e21 / 100 });
  }, min: -50, max: 250, stepSize: 1, showTrackFill: false, labelRenderer: false })), position: Position.BOTTOM }, import_react5.default.createElement(Button, { icon: import_react5.default.createElement(import_MdcFormatLineSpacing.default, { className: "bp5-icon", style: { fontSize: "20px" } }), minimal: true }));
});
var $ = { TextFontFamily, TextFontSize, TextFontVariant, TextTransform, TextFill, TextSpacing, TextAiWrite, TextFilters: filters_picker_default, TextAnimations: AnimationsPicker };
var TextToolbar = observer(({ store: e20, components: n2 }) => {
  const o2 = e20.selectedElements, r = ["TextFill", "TextFontFamily", "TextFontSize", "TextFontVariant", "TextSpacing", "TextTransform", "TextFilters", flags.animationsEnabled && "TextAnimations", "TextAiWrite"], i = extendToolbar({ type: "text", usedItems: r, components: n2 });
  return import_react5.default.createElement(ElementContainer, { items: i, itemRender: (r2) => {
    const i2 = n2[r2] || $[r2];
    return import_react5.default.createElement(i2, { elements: o2, element: o2[0], store: e20, key: r2 });
  } });
});

// node_modules/polotno/toolbar/html-toolbar.js
var import_react6 = __toESM(require_react(), 1);
var import_MdFormatTextdirectionRToL = __toESM(require_MdFormatTextdirectionRToL(), 1);
var import_MdFormatTextdirectionLToR = __toESM(require_MdFormatTextdirectionLToR(), 1);
var import_MdcFormatVerticalAlignTop2 = __toESM(require_MdcFormatVerticalAlignTop(), 1);
var import_MdcFormatVerticalAlignCenter2 = __toESM(require_MdcFormatVerticalAlignCenter(), 1);
var import_MdcFormatVerticalAlignBottom2 = __toESM(require_MdcFormatVerticalAlignBottom(), 1);
var import_MdcFormatListBulleted = __toESM(require_MdcFormatListBulleted(), 1);
var import_MdcFormatListNumbered = __toESM(require_MdcFormatListNumbered(), 1);
var L2 = ({ html: e20 }) => {
  const t6 = document.createElement("div");
  document.body.appendChild(t6), t6.style.display = "none", t6.style.whiteSpace = "pre-wrap";
  const n2 = createQuill(t6);
  return setQuillContent(n2, e20), n2;
};
var W2 = (e20) => {
  e20.root.parentElement.remove();
};
var N = ["left", "center", "right", "justify"];
var O = ["top", "middle", "bottom"];
var B = { top: import_react6.default.createElement("span", { className: "bp5-icon" }, import_react6.default.createElement(import_MdcFormatVerticalAlignTop2.default, null)), middle: import_react6.default.createElement("span", { className: "bp5-icon" }, import_react6.default.createElement(import_MdcFormatVerticalAlignCenter2.default, null)), bottom: import_react6.default.createElement("span", { className: "bp5-icon" }, import_react6.default.createElement(import_MdcFormatVerticalAlignBottom2.default, null)) };
var V = observer(({ active: t6, globalActive: l3, format: r, element: i, disableGlobal: a, enableGlobal: c2, icon: m2 }) => import_react6.default.createElement(Button, { minimal: true, icon: m2, active: t6, onMouseDown: (e20) => {
  e20.preventDefault();
}, onClick: (e20) => {
  let t7 = window.__polotnoQuill;
  if (t7) {
    const e21 = t7.getSelection();
    return e21.length > 0 ? t7.formatText(e21.index, e21.length, r, !quillRef.currentFormat[r], "user") : t7.format(r, !quillRef.currentFormat[r], "user"), runInAction(() => {
      quillRef.currentFormat = t7.getFormat(t7.getSelection());
    }), void (l3 && a());
  }
  t7 = L2({ html: i.text }), t7.setSelection(0, t7.getLength(), "api"), t7.format(r, false);
  const o2 = t7.root.innerHTML;
  W2(t7), i.set({ text: o2 }), l3 ? a() : c2();
} }));
var TextBold = observer(({ element: t6, store: n2 }) => import_react6.default.createElement(V, { format: "bold", active: quillRef.currentFormat.bold || "bold" === t6.fontWeight || "700" === t6.fontWeight, globalActive: "bold" === t6.fontWeight || "700" === t6.fontWeight, element: t6, disableGlobal: () => t6.set({ fontWeight: "normal" }), enableGlobal: () => t6.set({ fontWeight: "bold" }), icon: import_react6.default.createElement(Bold, null) }));
var FontStyleGroup = observer(({ element: t6, store: n2, elements: r, components: u2 }) => {
  const x2 = (null == u2 ? void 0 : u2.TextBold) || TextBold;
  return import_react6.default.createElement(ButtonGroup, null, import_react6.default.createElement(x2, { element: t6, store: n2 }), import_react6.default.createElement(V, { format: "italic", active: quillRef.currentFormat.italic || "italic" === t6.fontStyle, globalActive: "italic" === t6.fontStyle, element: t6, disableGlobal: () => t6.set({ fontStyle: "normal" }), enableGlobal: () => t6.set({ fontStyle: "italic" }), icon: import_react6.default.createElement(Italic, null) }), import_react6.default.createElement(V, { format: "underline", active: quillRef.currentFormat.underline || t6.textDecoration.indexOf("underline") >= 0, globalActive: t6.textDecoration.indexOf("underline") >= 0, element: t6, disableGlobal: () => {
    let e20 = t6.textDecoration.split(" ");
    e20 = e20.filter((e21) => "underline" !== e21), t6.set({ textDecoration: e20.join(" ") });
  }, enableGlobal: () => {
    let e20 = t6.textDecoration.split(" ");
    e20.push("underline"), t6.set({ textDecoration: e20.join(" ") });
  }, icon: import_react6.default.createElement(Underline, null) }), import_react6.default.createElement(V, { format: "strike", active: quillRef.currentFormat.strike || t6.textDecoration.indexOf("line-through") >= 0, globalActive: t6.textDecoration.indexOf("line-through") >= 0, element: t6, disableGlobal: () => {
    let e20 = t6.textDecoration.split(" ");
    e20 = e20.filter((e21) => "line-through" !== e21), t6.set({ textDecoration: e20.join(" ") });
  }, enableGlobal: () => {
    let e20 = t6.textDecoration.split(" ");
    e20.push("line-through"), t6.set({ textDecoration: e20.join(" ") });
  }, icon: import_react6.default.createElement(Strikethrough, null) }), import_react6.default.createElement(Button, { minimal: true, icon: "left" === t6.align ? import_react6.default.createElement(AlignLeft, null) : "center" === t6.align ? import_react6.default.createElement(AlignCenter, null) : "right" === t6.align ? import_react6.default.createElement(AlignRight, null) : import_react6.default.createElement(AlignJustify, null), onClick: () => {
    const e20 = (N.indexOf(t6.align) + 1 + N.length) % N.length, o2 = N[e20];
    n2.history.transaction(() => {
      r.forEach((e21) => {
        e21.set({ align: o2 });
      });
    });
  } }), flags.textVerticalResizeEnabled && import_react6.default.createElement(Button, { minimal: true, icon: B[t6.verticalAlign], onClick: () => {
    const e20 = (O.indexOf(t6.verticalAlign) + 1 + O.length) % O.length, o2 = O[e20];
    n2.history.transaction(() => {
      t6.set({ verticalAlign: o2 });
    });
  } }), import_react6.default.createElement(Button, { minimal: true, icon: "bullet" === quillRef.currentFormat.list ? import_react6.default.createElement("span", { className: "bp5-icon" }, import_react6.default.createElement(import_MdcFormatListNumbered.default, { style: { width: "20px", height: "20px" } })) : import_react6.default.createElement("span", { className: "bp5-icon" }, import_react6.default.createElement(import_MdcFormatListBulleted.default, { style: { width: "20px", height: "20px" } })), onMouseDown: (e20) => {
    e20.preventDefault();
  }, onClick: () => {
    let e20 = window.__polotnoQuill, n3 = !e20;
    e20 = e20 || L2({ html: t6.text }), n3 && e20.setSelection(0, e20.getLength(), "api");
    const o2 = e20.getFormat();
    o2.list ? "bullet" === o2.list ? e20.format("list", "ordered") : e20.format("list", false) : e20.format("list", "bullet"), n3 && (t6.set({ text: e20.root.innerHTML }), W2(e20));
  } }));
});
var FontColorInput = observer(({ element: t6, store: n2 }) => {
  const [o2, l3] = import_react6.default.useState(null);
  return import_react6.default.createElement(color_picker_default, { value: quillRef.currentFormat.color || t6.fill, gradientEnabled: true, onOpen: () => {
    const e20 = window.__polotnoQuill;
    e20 && l3(e20.getSelection());
  }, onClose: () => {
    const e20 = window.__polotnoQuill;
    e20 && e20.setSelection(o2);
  }, onChange: (e20) => {
    const n3 = window.__polotnoQuill, l4 = (null == n3 ? void 0 : n3.getSelection()) || o2;
    if (!l4) {
      var r = t6.text.replace(/style=".*?"/g, "");
      return void t6.set({ fill: e20, text: r });
    }
    const i = (null == l4 ? void 0 : l4.length) >= (null == n3 ? void 0 : n3.getLength()) - 1;
    n3 && !i && (null == l4 ? void 0 : l4.length) ? n3.formatText(l4.index, l4.length, "color", e20, "user") : (r = t6.text.replace(/style=".*?"/g, ""), t6.set({ fill: e20, text: r }));
  }, store: n2 });
});
var DirectionInput = observer(({ element: t6 }) => {
  const n2 = "rtl" === t6.dir ? import_MdFormatTextdirectionRToL.default : import_MdFormatTextdirectionLToR.default;
  return import_react6.default.createElement(Button, { icon: import_react6.default.createElement(n2, { className: "bp5-icon", style: { fontSize: "20px" } }), minimal: true, onClick: () => {
    t6.set({ dir: "rtl" === t6.dir ? "ltr" : "rtl" });
  } });
});
var I = { TextFontFamily, TextFontSize, TextFontVariant: FontStyleGroup, TextTransform, TextFilters: filters_picker_default, TextFill: FontColorInput, TextSpacing, TextDirection: DirectionInput, TextAnimations: AnimationsPicker, TextAiWrite };
var HtmlToolbar = observer(({ store: t6, components: n2 }) => {
  const o2 = t6.selectedElements, l3 = t6.selectedElements[0], r = ["TextFill", "TextFontFamily", "TextFontSize", "TextFontVariant", "TextSpacing", "TextTransform", "TextFilters", flags.animationsEnabled && "TextAnimations", "TextAiWrite"], i = extendToolbar({ type: "text", usedItems: r, components: n2 });
  return import_react6.default.createElement(ElementContainer, { items: i, itemRender: (r2) => {
    if ("TextBold" === r2) {
      return null;
    }
    const i2 = n2[r2] || I[r2];
    return import_react6.default.createElement(i2, { element: l3, elements: o2, store: t6, key: r2, components: n2 });
  } });
});

// node_modules/polotno/toolbar/image-toolbar.js
var import_react9 = __toESM(require_react(), 1);

// node_modules/polotno/toolbar/flip-button.js
var import_react7 = __toESM(require_react(), 1);
var FlipButton = ({ element: c2, elements: s3 }) => import_react7.default.createElement(Popover, { content: import_react7.default.createElement(Menu, null, import_react7.default.createElement(MenuItem, { shouldDismissPopover: false, icon: import_react7.default.createElement(ArrowsHorizontal, null), text: t("toolbar.flipHorizontally"), onClick: () => {
  s3.forEach((e20) => {
    e20.set({ flipX: !e20.flipX });
  });
} }), import_react7.default.createElement(MenuItem, { shouldDismissPopover: false, text: t("toolbar.flipVertically"), icon: import_react7.default.createElement(ArrowsVertical, null), onClick: () => {
  s3.forEach((e20) => {
    e20.set({ flipY: !e20.flipY });
  });
} })), position: Position.BOTTOM }, import_react7.default.createElement(Button, { text: t("toolbar.flip"), minimal: true }));
var flip_button_default = FlipButton;

// node_modules/polotno/toolbar/image-remove-background-button.js
var import_react8 = __toESM(require_react(), 1);
var l = async (e20) => {
  const t6 = await fetch(removeBackground(), { method: "POST", body: JSON.stringify({ url: e20 }) });
  return 200 !== t6.status ? (alert(t("error.removeBackground")), e20) : (await t6.json()).url;
};
var RemoveBackgroundDialog = observer(({ isOpen: t6, onClose: a, element: m2 }) => {
  const [i, s3] = import_react8.default.useState(m2.src);
  import_react8.default.useEffect(() => {
    s3(m2.src);
  }, [m2.src]);
  const [u2, d2] = import_react8.default.useState(false), g4 = i !== m2.src;
  return import_react8.default.createElement(Dialog, { onClose: a, title: t("toolbar.removeBackgroundTitle"), isOpen: t6, style: { width: "80%", maxWidth: "700px" } }, import_react8.default.createElement("div", { className: classes_exports.DIALOG_BODY }, import_react8.default.createElement("img", { src: i, style: { width: "100%", maxHeight: "400px", objectFit: "contain" } })), import_react8.default.createElement("div", { className: classes_exports.DIALOG_FOOTER, style: { position: "relative" } }, import_react8.default.createElement("div", { className: classes_exports.DIALOG_FOOTER_ACTIONS }, !g4 && import_react8.default.createElement(Button, { onClick: async () => {
    d2(true);
    try {
      s3(await l(m2.src));
    } catch (e20) {
      console.error(e20);
    }
    d2(false);
  }, loading: u2 }, t("toolbar.removeBackground")), g4 && import_react8.default.createElement(import_react8.default.Fragment, null, import_react8.default.createElement(Button, { onClick: () => {
    s3(m2.src), a();
  }, loading: u2 }, t("toolbar.cancelRemoveBackground")), import_react8.default.createElement(Button, { onClick: () => {
    m2.set({ src: i }), a();
  }, loading: u2, intent: "primary" }, t("toolbar.confirmRemoveBackground"))))));
});
var ImageRemoveBackground = ({ element: t6 }) => {
  const [r, n2] = import_react8.default.useState(false);
  return import_react8.default.createElement(import_react8.default.Fragment, null, import_react8.default.createElement(Button, { text: t("toolbar.removeBackground"), minimal: true, onClick: (e20) => {
    n2(true);
  } }), import_react8.default.createElement(RemoveBackgroundDialog, { isOpen: r, onClose: () => {
    n2(false);
  }, element: t6 }));
};

// node_modules/polotno/toolbar/image-toolbar.js
var ImageFitToBackground = ({ element: t6 }) => import_react9.default.createElement(Button, { text: t("toolbar.fitToBackground"), minimal: true, onClick: async () => {
  const { page: e20 } = t6, o2 = e20.computedWidth + 2 * e20.bleed, r = e20.computedHeight + 2 * e20.bleed, n2 = await getImageSize(t6.src), m2 = t6.stretchEnabled ? { cropX: 0, cropY: 0, cropWidth: 1, cropHeight: 1 } : getCrop({ width: o2, height: r }, n2);
  t6.set(Object.assign({ x: -e20.bleed, y: -e20.bleed, width: o2, height: r, rotation: 0 }, m2));
} });
var ImageClip = observer(({ element: t6, store: r, elements: n2 }) => t6.contentEditable ? t6.clipSrc ? import_react9.default.createElement(Button, { text: t("toolbar.removeClip"), minimal: true, onClickCapture: (e20) => {
  n2.forEach((e21) => {
    e21.set({ clipSrc: "" });
  });
} }) : import_react9.default.createElement(Button, { minimal: true, text: t("toolbar.clip"), onClickCapture: (e20) => {
  e20.stopPropagation(), r.openSidePanel("image-clip");
} }) : null);
var ImageCrop = observer(({ element: t6, store: r }) => t6.contentEditable ? t6.stretchEnabled ? null : import_react9.default.createElement(Tooltip, { content: t("toolbar.crop"), position: "bottom" }, import_react9.default.createElement(Button, { minimal: true, icon: import_react9.default.createElement(Crop, null), onClickCapture: (e20) => {
  e20.stopPropagation(), t6.toggleCropMode(true);
} })) : null);
var ImageRemoveClip = observer(({ element: t6, store: r }) => t6.clipSrc ? import_react9.default.createElement(Button, { text: t("toolbar.removeClip"), minimal: true, onClickCapture: (e20) => {
  t6.set({ clipSrc: "" });
} }) : null);
var I2 = { ImageFlip: flip_button_default, ImageFilters: filters_picker_default, ImageFitToBackground, ImageCrop, ImageClip, ImageRemoveBackground, ImageAnimations: AnimationsPicker };
var ImageToolbar = observer(({ store: t6, components: n2 }) => {
  const l3 = t6.selectedElements[0], p3 = l3._cropModeEnabled, s3 = import_react9.default.useRef({});
  import_react9.default.useEffect(() => {
    p3 && (s3.current = { x: l3.x, y: l3.y, width: l3.width, height: l3.height, cropX: l3.cropX, cropY: l3.cropY, cropWidth: l3.cropWidth, cropHeight: l3.cropHeight });
  }, [p3]);
  const g4 = ["ImageFlip", "ImageFilters", "ImageFitToBackground", "ImageClip", "ImageCrop", flags.animationsEnabled && "ImageAnimations", flags.removeBackgroundEnabled && "ImageRemoveBackground"], d2 = extendToolbar({ type: "image", usedItems: g4, components: n2 });
  return import_react9.default.createElement(import_react9.default.Fragment, null, !p3 && import_react9.default.createElement(ElementContainer, { items: d2, itemRender: (o2) => {
    const r = n2[o2] || I2[o2];
    return import_react9.default.createElement(r, { element: l3, store: t6, key: o2, elements: t6.selectedElements });
  } }), p3 && import_react9.default.createElement(Navbar.Group, null, import_react9.default.createElement(Button, { text: t("toolbar.cropDone"), minimal: true, icon: import_react9.default.createElement(Tick, null), onClickCapture: (e20) => {
    l3.toggleCropMode(false);
  } }), import_react9.default.createElement(Button, { text: t("toolbar.cropCancel"), minimal: true, icon: import_react9.default.createElement(Cross, null), onClickCapture: (e20) => {
    l3.set(Object.assign({}, s3.current)), l3.toggleCropMode(false);
  } })));
});

// node_modules/polotno/toolbar/svg-toolbar.js
var import_react10 = __toESM(require_react(), 1);
var c = (e20, t6) => Array.from(e20.keys()).find((e21) => sameColors(e21, t6));
var p2 = (e20, t6) => {
  const r = c(e20, t6);
  return e20.get(r || "") || t6;
};
var g2 = { SvgFlip: flip_button_default, SvgFilters: filters_picker_default, SvgColors: observer(({ element: t6, elements: o2, store: s3 }) => {
  const n2 = useSvgColors(t6.src);
  return import_react10.default.createElement(import_react10.default.Fragment, null, !t6.maskSrc && n2.slice(0, 5).map((r) => import_react10.default.createElement(color_picker_default, { key: r, value: p2(t6.colorsReplace, r), style: { marginLeft: "5px" }, onChange: (e20) => {
    const o3 = c(t6.colorsReplace, r) || r;
    t6.replaceColor(o3, e20);
  }, store: s3, gradientEnabled: true })));
}), SvgAnimations: AnimationsPicker };
var SvgToolbar = observer(({ store: t6, hideSvgEffects: r, components: n2 }) => {
  const m2 = t6.selectedElements, l3 = ["SvgFlip", !r && "SvgFilters", "SvgColors", flags.animationsEnabled && "SvgAnimations"].filter((e20) => !!e20), i = extendToolbar({ type: "svg", usedItems: l3, components: n2 });
  return import_react10.default.createElement(ElementContainer, { items: i, itemRender: (r2) => {
    const o2 = n2[r2] || g2[r2];
    return import_react10.default.createElement(o2, { elements: m2, element: m2[0], store: t6, key: r2 });
  } });
});

// node_modules/polotno/toolbar/line-toolbar.js
var import_react11 = __toESM(require_react(), 1);
var LineSettings = observer(({ store: t6, elements: s3 }) => {
  const l3 = (e20) => {
    t6.history.transaction(() => {
      s3.forEach((t7) => {
        t7.set(e20);
      });
    });
  }, m2 = (e20) => {
    t6.history.transaction(() => {
      s3.forEach((t7) => {
        const { middleLeft: r, middleRight: n2 } = getMiddlePoints(t7), { x: o2, y: i, rotation: a } = getLinePositionFromMiddlePoints(r, n2, e20);
        t7.set({ x: o2, y: i, rotation: a, height: e20 });
      });
    });
  };
  return import_react11.default.createElement(Popover, { content: import_react11.default.createElement("div", { style: { padding: "15px", paddingTop: "15px", width: "230px" } }, import_react11.default.createElement("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between", paddingBottom: "5px" } }, import_react11.default.createElement("div", null, t("toolbar.lineSize")), import_react11.default.createElement("div", null, import_react11.default.createElement(NumberInput, { value: s3[0].height, onValueChange: (e20) => {
    m2(e20);
  }, style: { width: "50px" }, min: 1, max: 100, buttonPosition: "none" }))), import_react11.default.createElement(Slider, { value: s3[0].height, onChange: (e20) => {
    m2(e20);
  }, min: 1, max: 100, labelRenderer: false }), import_react11.default.createElement("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between", paddingBottom: "5px", paddingTop: "15px" } }, import_react11.default.createElement(Button, { onClick: () => {
    l3({ dash: [] });
  }, active: 0 === s3[0].dash.length }, import_react11.default.createElement("svg", { width: "24", height: "24", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg" }, import_react11.default.createElement("line", { x2: "24", y1: "50%", y2: "50%", stroke: "currentColor", strokeWidth: "2" }))), import_react11.default.createElement(Button, { onClick: () => {
    l3({ dash: [4, 1] });
  }, active: 4 === s3[0].dash[0] }, import_react11.default.createElement("svg", { width: "24", height: "24", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg" }, import_react11.default.createElement("line", { x1: "-1", x2: "25", y1: "50%", y2: "50%", stroke: "currentColor", strokeDasharray: "12 2", strokeWidth: "2" }))), import_react11.default.createElement(Button, { onClick: () => {
    l3({ dash: [2, 1] });
  }, active: 2 === s3[0].dash[0] }, import_react11.default.createElement("svg", { width: "24", height: "24", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg" }, import_react11.default.createElement("line", { x1: "1", x2: "23", y1: "50%", y2: "50%", stroke: "currentColor", strokeDasharray: "6 2", strokeWidth: "2" }))), import_react11.default.createElement(Button, { onClick: () => {
    l3({ dash: [1, 1] });
  }, active: 1 === s3[0].dash[0] }, import_react11.default.createElement("svg", { width: "24", height: "24", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg" }, import_react11.default.createElement("line", { x1: "1", x2: "23", y1: "50%", y2: "50%", stroke: "currentColor", strokeDasharray: "2 2", strokeWidth: "2" }))))), position: Position.BOTTOM }, import_react11.default.createElement(Button, { icon: import_react11.default.createElement(Settings, null), minimal: true }));
});
var LineColor = observer(({ elements: t6, store: r }) => import_react11.default.createElement(color_picker_default, { value: t6[0].color, style: { marginRight: "5px" }, gradientEnabled: false, onChange: (e20) => r.history.transaction(() => {
  t6.forEach((t7) => {
    t7.set({ color: e20 });
  });
}), store: r }));
var u = { "": import_react11.default.createElement("span", { "aria-hidden": "true", className: "bp5-icon" }, import_react11.default.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16" }, import_react11.default.createElement("path", { stroke: "currentColor", strokeWidth: "2", d: "M 1 8 L 16 8" }))), arrow: import_react11.default.createElement("span", { "aria-hidden": "true", className: "bp5-icon" }, import_react11.default.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16" }, import_react11.default.createElement("path", { stroke: "currentColor", strokeWidth: "2", d: "M 8 3 L 1 8 L 8 13", fill: "none", strokeLinejoin: "round", strokeLinecap: "round" }), import_react11.default.createElement("path", { stroke: "currentColor", strokeWidth: "2", d: "M 1 8 L 15 8", strokeLinejoin: "round", strokeLinecap: "round" }))), triangle: import_react11.default.createElement("span", { "aria-hidden": "true", className: "bp5-icon" }, import_react11.default.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16" }, import_react11.default.createElement("path", { stroke: "currentColor", strokeWidth: "2", d: "M 8 3 L 1 8 L 8 13 Z", fill: "currentColor", strokeLinejoin: "round", strokeLinecap: "round" }), import_react11.default.createElement("path", { stroke: "currentColor", strokeWidth: "2", d: "M 1 8 L 15 8", strokeLinejoin: "round", strokeLinecap: "round" }))), bar: import_react11.default.createElement("span", { "aria-hidden": "true", className: "bp5-icon" }, import_react11.default.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16" }, import_react11.default.createElement("path", { stroke: "currentColor", strokeWidth: "2", d: "M 1 3 L 1 13", strokeLinejoin: "round", strokeLinecap: "round" }), import_react11.default.createElement("path", { stroke: "currentColor", strokeWidth: "2", d: "M 1 8 L 15 8", strokeLinejoin: "round", strokeLinecap: "round" }))), square: import_react11.default.createElement("span", { "aria-hidden": "true", className: "bp5-icon" }, import_react11.default.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16" }, import_react11.default.createElement("path", { stroke: "currentColor", strokeWidth: "2", d: "M 1 4 L 9 4 L 9 12 L 1 12 Z", fill: "currentColor", strokeLinejoin: "round", strokeLinecap: "round" }), import_react11.default.createElement("path", { stroke: "currentColor", strokeWidth: "2", d: "M 1 8 L 15 8", strokeLinejoin: "round", strokeLinecap: "round" }))), circle: import_react11.default.createElement("span", { "aria-hidden": "true", className: "bp5-icon" }, import_react11.default.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16" }, import_react11.default.createElement("circle", { cx: "4", cy: "8", r: "4", fill: "currentColor" }), import_react11.default.createElement("path", { stroke: "currentColor", strokeWidth: "2", d: "M 1 8 L 15 8", strokeLinejoin: "round", strokeLinecap: "round" }))) };
var k = ({ type: t6, active: n2, onClick: o2, flipped: i }) => {
  const a = u[t6];
  return import_react11.default.createElement(Button, { icon: i ? import_react11.default.createElement("span", { style: { transform: "scaleX(-1)" } }, a) : a, minimal: true, onClick: o2, active: n2 });
};
var BasicHead = observer(({ elements: t6, store: o2, property: a }) => {
  const s3 = "endHead" === a, l3 = u[t6[0][a]], c2 = s3 ? import_react11.default.createElement("span", { style: { transform: "scaleX(-1)" } }, l3) : l3, m2 = (e20) => {
    o2.history.transaction(() => {
      t6.forEach((t7) => {
        t7.set({ [a]: e20 });
      });
    });
  };
  return import_react11.default.createElement(import_react11.default.Fragment, null, import_react11.default.createElement(Popover, { content: import_react11.default.createElement("div", { style: { width: "150px", padding: "10px" } }, import_react11.default.createElement("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between" } }, ["", "arrow", "triangle"].map((r) => import_react11.default.createElement(k, { key: r, type: r, active: t6[0][a] === r, onClick: () => {
    m2(r);
  }, flipped: s3 }))), import_react11.default.createElement("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between" } }, ["bar", "square", "circle"].map((r) => import_react11.default.createElement(k, { key: r, type: r, active: t6[0][a] === r, onClick: () => {
    m2(r);
  }, flipped: s3 })))), position: Position.BOTTOM }, import_react11.default.createElement(Button, { icon: c2, minimal: true })));
});
var LineHeads = observer(({ elements: t6, store: r }) => import_react11.default.createElement(import_react11.default.Fragment, null, import_react11.default.createElement(BasicHead, { elements: t6, store: r, property: "startHead" }), import_react11.default.createElement(BasicHead, { elements: t6, store: r, property: "endHead" })));
var w = { LineSettings, LineColor, LineHeads, LineAnimations: AnimationsPicker };
var LineToolbar = observer(({ store: t6, components: r }) => {
  const n2 = t6.selectedElements[0], o2 = ["LineColor", "LineSettings", "LineHeads", flags.animationsEnabled && "LineAnimations"].filter((e20) => Boolean(e20)), i = extendToolbar({ type: "line", usedItems: o2, components: r });
  return import_react11.default.createElement(ElementContainer, { items: i, itemRender: (o3) => {
    const i2 = r[o3] || w[o3];
    return import_react11.default.createElement(i2, { element: n2, store: t6, key: o3, elements: t6.selectedElements });
  } });
});

// node_modules/polotno/toolbar/video-toolbar.js
var import_react12 = __toESM(require_react(), 1);
var VideoTrim = observer(({ store: t6, components: o2, element: i }) => {
  const m2 = import_react12.default.useRef(null), [c2, d2] = import_react12.default.useState([]);
  import_react12.default.useEffect(() => {
    d2([]);
  }, [i.src]);
  const g4 = (e20, t7) => {
    e20.preventDefault();
    const o3 = (e21) => {
      e21.preventDefault();
      const { clientX: o4 } = e21, { left: n2, width: r } = m2.current.getBoundingClientRect(), { src: a } = i, l3 = (o4 - n2) / r;
      "start" === t7 ? i.set({ startTime: Math.min(i.endTime, Math.max(0, l3)) }) : "end" === t7 && i.set({ endTime: Math.min(1, Math.max(i.startTime, l3)) });
    };
    window.addEventListener("mousemove", o3), window.addEventListener("mouseup", () => {
      window.removeEventListener("mousemove", o3);
    });
  };
  return import_react12.default.createElement(Popover, { position: "bottom", onOpened: async () => {
    if (!i.src) {
      return;
    }
    if (c2.length) {
      return;
    }
    const { width: e20, height: t7 } = await getVideoSize(i.src), o3 = e20 / t7, { src: n2 } = i, r = m2.current.offsetHeight, a = m2.current.offsetWidth, l3 = r * o3, s3 = Math.ceil(a / l3), g5 = await getVideoDuration(n2), v3 = document.createElement("video");
    v3.crossOrigin = "anonymous", v3.src = n2;
    const w2 = document.createElement("canvas");
    w2.width = 480;
    try {
      await new Promise((e21, t8) => {
        v3.addEventListener("loadeddata", () => {
          const t9 = v3.videoWidth / v3.videoHeight;
          w2.height = 480 / t9, e21();
        }), v3.addEventListener("error", t8);
      }), d2([]);
      for (let e21 = 0; e21 < s3; e21++) {
        const t8 = e21 * g5 / s3, o4 = await getVideoObjectPreview(v3, w2, t8);
        d2((e22) => e22.concat(o4));
      }
    } catch (x2) {
      console.error("Error generating previews:", x2);
    }
  }, content: import_react12.default.createElement(Navbar, { style: { boxShadow: "none", backgroundColor: "transparent", width: "calc(100vw - 300px)" } }, import_react12.default.createElement(NavbarGroup, null, import_react12.default.createElement(NumericInput, { style: { width: "80px" }, value: parseFloat((i.duration * (i.endTime - i.startTime) / 1e3).toFixed(2)), minorStepSize: 0.01, stepSize: 0.1, buttonPosition: "none", readOnly: true }), import_react12.default.createElement("div", { style: { width: "calc(100vw - 420px)", height: "30px", display: "flex", position: "relative", overflow: "hidden", marginLeft: "10px" }, ref: m2 }, c2.map((t7, o3) => import_react12.default.createElement("img", { key: o3, src: t7, style: { width: "auto", height: "100%", objectFit: "cover" } })), import_react12.default.createElement("div", { style: { position: "absolute", top: "0", left: 0, width: 100 * i.startTime + "%", height: "30px", backgroundColor: "rgb(0, 0, 0, 0.5)" } }), import_react12.default.createElement("div", { style: { position: "absolute", top: "0", right: "0%", width: 100 - 100 * i.endTime + "%", height: "30px", backgroundColor: "rgb(0, 0, 0, 0.5)" } }), import_react12.default.createElement("div", { style: { position: "absolute", top: "0", left: 100 * i.startTime + "%", width: "10px", height: "30px", borderRadius: "0px", backgroundColor: "rgb(0, 161, 255, 0.9)", cursor: "ew-resize" }, onMouseDown: (e20) => {
    g4(e20, "start");
  } }), import_react12.default.createElement("div", { style: { position: "absolute", top: "0", right: 100 - 100 * i.endTime + "%", width: "10px", height: "30px", borderRadius: "0px", backgroundColor: "rgb(0, 161, 255, 0.9)", cursor: "ew-resize" }, onMouseDown: (e20) => {
    g4(e20, "end");
  } })))) }, import_react12.default.createElement(Button, { icon: import_react12.default.createElement(Cut, null), minimal: true }, "Trim"));
});
var x = observer(({ element: t6 }) => {
  const o2 = Math.round(100 * t6.volume), i = (e20) => {
    t6.set({ volume: e20 / 100 });
  };
  return import_react12.default.createElement(Popover, { position: "bottom", content: import_react12.default.createElement("div", { style: { padding: "10px", width: "250px" } }, import_react12.default.createElement("div", { style: { display: "flex", width: "100%", justifyContent: "space-between" } }, import_react12.default.createElement("div", { style: { paddingTop: "7px", paddingLeft: "10px", width: "calc(100% - 80px)" } }, import_react12.default.createElement(Slider, { value: o2, onChange: (e20) => {
    i(e20);
  }, min: 0, max: 100, labelStepSize: 50, showTrackFill: false, labelRenderer: false })), import_react12.default.createElement(NumericInput, { value: o2, onValueChange: (e20) => {
    var t7;
    i((t7 = e20, Math.max(0, Math.min(100, t7))));
  }, buttonPosition: "none", style: { width: "50px", padding: "0 5px", marginLeft: "10px" }, min: 0, max: 100 }))) }, import_react12.default.createElement(Button, { icon: import_react12.default.createElement(VolumeUp, null), minimal: true }));
});
var VideoClip = observer(({ element: t6, store: o2 }) => t6.contentEditable ? t6.clipSrc ? import_react12.default.createElement(Button, { text: t("toolbar.removeClip"), minimal: true, onClickCapture: (e20) => {
  t6.set({ clipSrc: "" });
} }) : import_react12.default.createElement(Button, { minimal: true, text: t("toolbar.clip"), onClickCapture: (e20) => {
  e20.stopPropagation(), o2.openSidePanel("image-clip");
} }) : null);
var E2 = { VideoTrim, VideoAnimations: AnimationsPicker, VideoVolume: x, VideoClip };
var VideoToolbar = observer(({ store: t6, components: n2 }) => {
  const r = t6.selectedElements, a = ["VideoTrim", "VideoVolume", "VideoClip", flags.animationsEnabled && "VideoAnimations"].filter((e20) => !!e20), l3 = extendToolbar({ type: "video", usedItems: a, components: n2 });
  return import_react12.default.createElement(ElementContainer, { items: l3, itemRender: (o2) => {
    const i = n2[o2] || E2[o2];
    return import_react12.default.createElement(i, { elements: r, element: r[0], store: t6, key: o2 });
  } });
});

// node_modules/polotno/toolbar/figure-toolbar.js
var import_react13 = __toESM(require_react(), 1);
var import_ZoStrokeWidth = __toESM(require_ZoStrokeWidth(), 1);
var FigureFill = observer(({ elements: t6, store: r }) => import_react13.default.createElement(color_picker_default, { value: t6[0].fill, style: { marginRight: "5px" }, gradientEnabled: true, onChange: (e20) => r.history.transaction(() => {
  t6.forEach((t7) => {
    t7.set({ fill: e20 });
  });
}), store: r }));
var FigureSettings = observer(({ store: t6, elements: a, element: m2 }) => {
  const c2 = (e20) => {
    t6.history.transaction(() => {
      a.forEach((t7) => {
        t7.set(e20);
      });
    });
  };
  return import_react13.default.createElement(Popover, { content: import_react13.default.createElement("div", { style: { padding: "15px", paddingTop: "15px", width: "270px" } }, import_react13.default.createElement("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between", paddingBottom: "15px" } }, import_react13.default.createElement(Button, { onClick: () => {
    c2({ strokeWidth: 0 });
  }, active: 0 === a[0].strokeWidth, style: { width: "44px", height: "34px" }, icon: import_react13.default.createElement(Disable, { size: 20 }) }), import_react13.default.createElement(Button, { onClick: () => {
    c2({ dash: [], strokeWidth: a[0].strokeWidth || 10 });
  }, active: a[0].strokeWidth && 0 === a[0].dash.length }, import_react13.default.createElement("svg", { width: "24", height: "24", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg" }, import_react13.default.createElement("line", { x2: "24", y1: "50%", y2: "50%", stroke: "currentColor", strokeWidth: "2" }))), import_react13.default.createElement(Button, { onClick: () => {
    c2({ dash: [4, 1], strokeWidth: a[0].strokeWidth || 10 });
  }, active: a[0].strokeWidth && 4 === a[0].dash[0] }, import_react13.default.createElement("svg", { width: "24", height: "24", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg" }, import_react13.default.createElement("line", { x1: "-1", x2: "25", y1: "50%", y2: "50%", stroke: "currentColor", strokeDasharray: "12 2", strokeWidth: "2" }))), import_react13.default.createElement(Button, { onClick: () => {
    c2({ dash: [2, 1], strokeWidth: a[0].strokeWidth || 10 });
  }, active: a[0].strokeWidth && 2 === a[0].dash[0] }, import_react13.default.createElement("svg", { width: "24", height: "24", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg" }, import_react13.default.createElement("line", { x1: "1", x2: "23", y1: "50%", y2: "50%", stroke: "currentColor", strokeDasharray: "6 2", strokeWidth: "2" }))), import_react13.default.createElement(Button, { onClick: () => {
    c2({ dash: [1, 1], strokeWidth: a[0].strokeWidth || 10 });
  }, active: a[0].strokeWidth && 1 === a[0].dash[0] }, import_react13.default.createElement("svg", { width: "24", height: "24", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg" }, import_react13.default.createElement("line", { x1: "1", x2: "23", y1: "50%", y2: "50%", stroke: "currentColor", strokeDasharray: "2 2", strokeWidth: "2" })))), import_react13.default.createElement("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between", paddingBottom: "5px" } }, import_react13.default.createElement("div", null, t("toolbar.strokeWidth")), import_react13.default.createElement("div", null, import_react13.default.createElement(NumberInput, { value: a[0].strokeWidth, onValueChange: (e20) => {
    c2({ strokeWidth: e20 });
  }, style: { width: "50px" }, min: 0, max: Math.round(Math.min(m2.width, m2.height) / 2), buttonPosition: "none" }))), import_react13.default.createElement(Slider, { value: a[0].strokeWidth, onChange: (e20) => {
    c2({ strokeWidth: e20 });
  }, min: 0, max: Math.round(Math.min(m2.width, m2.height) / 2), labelRenderer: false }), "rect" === m2.subType && import_react13.default.createElement(import_react13.default.Fragment, null, import_react13.default.createElement("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between", paddingTop: "15px", paddingBottom: "5px" } }, import_react13.default.createElement("div", null, t("toolbar.cornerRadius")), import_react13.default.createElement("div", null, import_react13.default.createElement(NumberInput, { value: a[0].cornerRadius, onValueChange: (e20) => {
    c2({ cornerRadius: e20 });
  }, style: { width: "50px" }, min: 0, max: Math.round(Math.max(m2.width, m2.height) / 2), buttonPosition: "none" }))), import_react13.default.createElement(Slider, { value: a[0].cornerRadius, onChange: (e20) => {
    c2({ cornerRadius: e20 });
  }, min: 0, max: Math.round(Math.max(m2.width, m2.height) / 2), labelRenderer: false }))), position: Position.BOTTOM }, import_react13.default.createElement(Button, { icon: import_react13.default.createElement(import_ZoStrokeWidth.default, null), minimal: true }));
});
var FigureStroke = observer(({ elements: t6, store: r }) => t6.find((e20) => e20.strokeWidth) ? import_react13.default.createElement(color_picker_default, { value: t6[0].stroke, style: { marginRight: "5px" }, gradientEnabled: false, onChange: (e20) => r.history.transaction(() => {
  t6.forEach((t7) => {
    t7.set({ stroke: e20 });
  });
}), store: r }) : null);
var k2 = { FigureFill, FigureStroke, FigureSettings, FigureAnimations: AnimationsPicker, FigureFilters: FiltersPicker };
var FigureToolbar = observer(({ store: t6, components: r }) => {
  const i = t6.selectedElements[0], n2 = ["FigureFill", "FigureStroke", "FigureSettings", "FigureFilters", flags.animationsEnabled && "FigureAnimations"].filter((e20) => Boolean(e20)), o2 = extendToolbar({ type: "figure", usedItems: n2, components: r });
  return import_react13.default.createElement(ElementContainer, { items: o2, itemRender: (n3) => {
    const o3 = r[n3] || k2[n3];
    return import_react13.default.createElement(o3, { element: i, store: t6, key: n3, elements: t6.selectedElements });
  } });
});

// node_modules/polotno/toolbar/gif-toolbar.js
var import_react14 = __toESM(require_react(), 1);
var s = { GifFilters: filters_picker_default, GifAnimations: AnimationsPicker };
var GifToolbar = observer(({ store: t6, components: i }) => {
  const m2 = t6.selectedElements, l3 = ["GifFilters", flags.animationsEnabled && "GifAnimations"].filter((e20) => !!e20), f2 = extendToolbar({ type: "gif", usedItems: l3, components: i });
  return import_react14.default.createElement(ElementContainer, { items: f2, itemRender: (o2) => {
    const r = i[o2] || s[o2];
    return import_react14.default.createElement(r, { elements: m2, element: m2[0], store: t6, key: o2 });
  } });
});

// node_modules/polotno/toolbar/many-toolbar.js
var import_react15 = __toESM(require_react(), 1);
var s2 = { ManyAnimations: AnimationsPicker };
var ManyToolbar = observer(({ store: t6, components: m2 }) => {
  const a = t6.selectedElements, i = [flags.animationsEnabled && "ManyAnimations"], l3 = extendToolbar({ type: "many", usedItems: i, components: m2 });
  return import_react15.default.createElement(ElementContainer, { items: l3, itemRender: (n2) => {
    const o2 = m2[n2] || s2[n2];
    return import_react15.default.createElement(o2, { elements: a, element: a[0], store: t6, key: n2 });
  } });
});

// node_modules/polotno/toolbar/page-toolbar.js
var import_react16 = __toESM(require_react(), 1);
var e15 = function(e20, t6) {
  var n2 = {};
  for (var r in e20) {
    Object.prototype.hasOwnProperty.call(e20, r) && t6.indexOf(r) < 0 && (n2[r] = e20[r]);
  }
  if (null != e20 && "function" == typeof Object.getOwnPropertySymbols) {
    var o2 = 0;
    for (r = Object.getOwnPropertySymbols(e20); o2 < r.length; o2++) {
      t6.indexOf(r[o2]) < 0 && Object.prototype.propertyIsEnumerable.call(e20, r[o2]) && (n2[r[o2]] = e20[r[o2]]);
    }
  }
  return n2;
};
var NumberInput4 = (n2) => {
  var { value: r, onValueChange: a } = n2, i = e15(n2, ["value", "onValueChange"]);
  const [l3, c2] = import_react16.default.useState(r.toString());
  return import_react16.default.useEffect(() => {
    c2(r.toString());
  }, [r]), import_react16.default.createElement(NumericInput, Object.assign({ value: l3, onValueChange: (e20, t6) => {
    c2(t6), Number.isNaN(e20) || a(e20);
  } }, i));
};
var g3 = observer(({ store: e20 }) => e20.activePage ? import_react16.default.createElement(ColorPicker, { value: e20.activePage.background || "white", onChange: (t6) => {
  e20.activePage.set({ background: t6 });
}, store: e20, gradientEnabled: true }) : null);
var d = { PageDuration: observer(({ store: e20 }) => {
  if (!e20.activePage) {
    return null;
  }
  const { duration: n2 } = e20.activePage;
  return import_react16.default.createElement(Popover, { position: "bottom", content: import_react16.default.createElement("div", { style: { padding: "15px", paddingTop: "15px", width: "230px" } }, import_react16.default.createElement("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between", paddingTop: "5px", paddingBottom: "5px" } }, import_react16.default.createElement("div", null, t("toolbar.duration")), import_react16.default.createElement("div", null, import_react16.default.createElement(NumberInput4, { value: n2 / 1e3, onValueChange: (t6) => {
    e20.activePage.set({ duration: 1e3 * t6 });
  }, style: { width: "50px" }, min: 0, buttonPosition: "none" }))), import_react16.default.createElement(Slider, { value: Math.min(n2 / 1e3, 50), onChange: (t6) => {
    e20.activePage.set({ duration: 1e3 * t6 });
  }, min: 0, max: 50, showTrackFill: false, labelRenderer: false })) }, import_react16.default.createElement(Button, { icon: import_react16.default.createElement(Time, null), minimal: true }, (e20.activePage.duration / 1e3).toFixed(1), "s"));
}), PageBackground: g3 };
var PageToolbar = observer(({ store: e20, components: n2 }) => {
  const r = ["PageBackground", flags.animationsEnabled && "PageDuration"], o2 = extendToolbar({ type: "page", usedItems: r, components: n2 });
  return import_react16.default.createElement(ElementContainer, { items: o2, itemRender: (r2) => {
    const o3 = n2[r2] || d[r2];
    return import_react16.default.createElement(o3, { store: e20, key: r2 });
  } });
});

// node_modules/polotno/toolbar/download-button.js
var import_react17 = __toESM(require_react(), 1);
var E3 = (e20) => {
  const t6 = [];
  return e20.pages.forEach((e21) => {
    e21.children.forEach((e22) => {
      "text" === e22.type && t6.push(e22.text);
    });
  }), t6.join(" ").split(" ").slice(0, 6).join(" ").replace(/\s/g, "-").toLowerCase() || "polotno";
};
var DownloadButton = observer(({ store: m2 }) => {
  const [w2, h4] = import_react17.default.useState(false);
  return import_react17.default.createElement(Popover, { content: import_react17.default.createElement(Menu, null, import_react17.default.createElement(MenuItem, { icon: import_react17.default.createElement(Media, null), text: t("toolbar.saveAsImage"), onClick: async () => {
    m2.pages.forEach((e20, t6) => {
      const o2 = m2.pages.length > 1 ? "-" + (t6 + 1) : "";
      m2.saveAsImage({ pageId: e20.id, fileName: E3(m2) + o2 + ".png" });
    });
  } }), import_react17.default.createElement(MenuItem, { icon: import_react17.default.createElement(Document, null), text: t("toolbar.saveAsPDF"), onClick: async () => {
    h4(true), await m2.saveAsPDF({ fileName: E3(m2) + ".pdf" }), h4(false);
  } }), flags.animationsEnabled && import_react17.default.createElement(MenuItem, { icon: import_react17.default.createElement(Video, null), text: "Save as Video", onClick: async () => {
    h4(true);
    try {
      await (async ({ store: e20, onProgress: t6 }) => {
        const o2 = e20.toJSON(), a = await fetch(`${getAPI()}/renders?KEY=${getKey()}`, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ design: o2, pixelRatio: 1, format: "mp4" }) }), r = await a.json();
        for (; ; ) {
          const o3 = await fetch(`${getAPI()}/renders/${r.id}?KEY=${getKey()}`), a2 = await o3.json();
          if ("done" === a2.status) {
            downloadFile(a2.output, E3(e20) + ".mp4");
            break;
          }
          if ("error" === a2.status) {
            throw new Error("Failed to render video");
          }
          null == t6 || t6(a2.progress || 0, a2.status || "processing"), await new Promise((e21) => setTimeout(e21, 5e3));
        }
      })({ store: m2 });
    } catch (e20) {
      console.error("Video export failed:", e20), alert("Failed to export video. Please try again.");
    }
    h4(false);
  } })), position: Position.BOTTOM }, import_react17.default.createElement(Button, { icon: import_react17.default.createElement(Import, null), className: "polotno-download-button", text: t("toolbar.download"), minimal: true, loading: w2 }));
});

// node_modules/polotno/toolbar/lock-button.js
var import_react18 = __toESM(require_react(), 1);
var LockButton = observer(({ store: t6 }) => {
  const { lock: m2, locked: s3, disabled: a } = useLock({ store: t6 }), p3 = s3 ? import_react18.default.createElement(Lock, null) : import_react18.default.createElement(Unlock, null), b3 = t(s3 ? "toolbar.lockedDescription" : "toolbar.unlockedDescription");
  return import_react18.default.createElement(Tooltip, { content: b3, disabled: a, position: "bottom" }, import_react18.default.createElement(Button, { minimal: true, disabled: a, icon: p3, onClick: () => m2() }));
});

// node_modules/polotno/toolbar/opacity-picker.js
var import_react19 = __toESM(require_react(), 1);
var import_MdOpacity = __toESM(require_MdOpacity(), 1);
var OpacityPicker = observer(({ store: t6 }) => {
  var s3;
  const p3 = t6.selectedShapes.length > 0, d2 = (e20) => {
    e20 = Math.max(0, Math.min(e20, 100)), t6.selectedShapes.forEach((t7) => {
      t7.set({ opacity: e20 / 100 });
    });
  }, x2 = Math.round(100 * (null === (s3 = t6.selectedShapes[0]) || void 0 === s3 ? void 0 : s3.opacity));
  return import_react19.default.createElement(Popover, { disabled: !p3, minimal: false, content: import_react19.default.createElement("div", { style: { padding: "10px 20px" } }, import_react19.default.createElement("div", { style: { textAlign: "center" } }, t("toolbar.transparency")), import_react19.default.createElement("div", { style: { display: "flex" } }, import_react19.default.createElement("div", { style: { paddingTop: "8px", paddingRight: "20px" } }, import_react19.default.createElement(Slider, { value: x2, labelRenderer: false, onChange: d2, min: 0, max: 100 })), import_react19.default.createElement(NumericInput, { value: x2, onValueChange: d2, min: 0, max: 100, buttonPosition: "none", style: { width: "50px" }, selectAllOnFocus: true }))), position: Position.BOTTOM }, import_react19.default.createElement(Tooltip, { content: t("toolbar.transparency"), disabled: !p3, position: Position.BOTTOM }, import_react19.default.createElement(Button, { minimal: true, disabled: !p3 }, import_react19.default.createElement(import_MdOpacity.default, { className: "bp5-icon", style: { fontSize: "20px" } }))));
});

// node_modules/polotno/toolbar/admin-button.js
var import_react20 = __toESM(require_react(), 1);
var AdminButton = observer(({ store: t6 }) => {
  const d2 = t6.selectedElements.length > 0, b3 = t6.selectedElements[0] || {}, m2 = (e20) => {
    t6.selectedElements.forEach((t7) => {
      t7.set(e20);
    });
  };
  return import_react20.default.createElement(Popover, { disabled: !d2, minimal: false, content: import_react20.default.createElement("div", { style: { padding: "15px", paddingTop: "25px", width: "220px" } }, import_react20.default.createElement(Switch, { checked: b3.selectable, label: t("toolbar.selectable"), onChange: (e20) => {
    m2({ selectable: e20.target.checked });
  }, alignIndicator: Alignment.RIGHT }), import_react20.default.createElement(Switch, { checked: b3.draggable, label: t("toolbar.draggable"), onChange: (e20) => {
    m2({ draggable: e20.target.checked });
  }, alignIndicator: Alignment.RIGHT }), import_react20.default.createElement(Switch, { checked: b3.removable, label: t("toolbar.removable"), onChange: (e20) => {
    m2({ removable: e20.target.checked });
  }, alignIndicator: Alignment.RIGHT }), import_react20.default.createElement(Switch, { checked: b3.resizable, label: t("toolbar.resizable"), onChange: (e20) => {
    m2({ resizable: e20.target.checked });
  }, alignIndicator: Alignment.RIGHT }), import_react20.default.createElement(Switch, { checked: b3.contentEditable, label: t("toolbar.contentEditable"), onChange: (e20) => {
    m2({ contentEditable: e20.target.checked });
  }, alignIndicator: Alignment.RIGHT }), import_react20.default.createElement(Switch, { checked: b3.styleEditable, label: t("toolbar.styleEditable"), onChange: (e20) => {
    m2({ styleEditable: e20.target.checked });
  }, alignIndicator: Alignment.RIGHT }), import_react20.default.createElement(Switch, { checked: b3.alwaysOnTop, label: t("toolbar.alwaysOnTop"), onChange: (e20) => {
    m2({ alwaysOnTop: e20.target.checked });
  }, alignIndicator: Alignment.RIGHT, style: { marginTop: "20px" } }), import_react20.default.createElement(Switch, { checked: b3.showInExport, label: t("toolbar.showInExport"), onChange: (e20) => {
    m2({ showInExport: e20.target.checked });
  }, alignIndicator: Alignment.RIGHT, style: { marginTop: "20px" } })), position: Position.BOTTOM }, import_react20.default.createElement(Button, { icon: import_react20.default.createElement(Cog, null), minimal: true, disabled: !d2 }));
});

// node_modules/polotno/toolbar/copy-style.js
var import_react21 = __toESM(require_react(), 1);
var CopyStyleButton = observer(({ store: e20 }) => {
  const { disabled: l3, elementToCopy: c2, setElementToCopy: m2 } = useCopyStyle(e20);
  return import_react21.default.createElement(Tooltip, { content: t("toolbar.copyStyle"), disabled: l3 }, import_react21.default.createElement(Button, { icon: PAINT_ICON, active: !!c2, intent: c2 ? "primary" : "none", minimal: true, disabled: l3, onClick: () => {
    m2(e20.selectedElements[0]);
  } }));
});
var PAINT_ICON = import_react21.default.createElement("span", { className: "bp5-icon" }, import_react21.default.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "3", strokeLinecap: "round", strokeLinejoin: "round" }, import_react21.default.createElement("rect", { width: "16", height: "6", x: "2", y: "2", rx: "2" }), import_react21.default.createElement("path", { d: "M10 16v-2a2 2 0 0 1 2-2h8a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-2" }), import_react21.default.createElement("rect", { width: "4", height: "6", x: "8", y: "16", rx: "1" })));

// node_modules/polotno/toolbar/toolbar.js
var T2 = { text: TextToolbar, image: ImageToolbar, svg: SvgToolbar, many: ManyToolbar, line: LineToolbar, video: VideoToolbar, figure: FigureToolbar, gif: GifToolbar, page: PageToolbar };
function registerToolbarComponent(e20, t6) {
  T2[e20] = t6;
}
function useToolbarCondensed(t6 = 480) {
  const o2 = import_react22.default.useRef(null), [n2, r] = import_react22.default.useState(false), s3 = import_react22.default.useCallback(() => {
    const e20 = o2.current;
    e20 && r(e20.clientWidth < t6);
  }, [t6]);
  return import_react22.default.useEffect(() => {
    const e20 = o2.current;
    if (!e20) {
      return;
    }
    const t7 = new ResizeObserver(() => s3());
    t7.observe(e20);
    const n3 = new MutationObserver(() => s3());
    return n3.observe(e20, { childList: true, subtree: true, attributes: true }), window.addEventListener("resize", s3), requestAnimationFrame(s3), () => {
      t7.disconnect(), n3.disconnect(), window.removeEventListener("resize", s3);
    };
  }, [s3]), { containerRef: o2, condensed: n2 };
}
var z = styled_default("div", import_react22.default.forwardRef)`
  white-space: nowrap;

  /* Add special style for a button with text inside, to make sure it has good with */
  & .bp5-button:has(.bp5-button-text) {
    min-width: max-content;
  }

  /* Condensed mode: hide labels and allow smaller buttons */
  /* to avoid creating several lines of buttons */
  &.condensed .polotno-position .bp5-button-text {
    display: none;
  }

  &.condensed .polotno-download-button .bp5-button-text {
    display: none;
  }

  ${mobileStyle("\n    max-width: 100vw;\n    overflow-x: auto;\n    overflow-y: hidden;\n  ")}
`;
var A = styled_default("div")`
  width: 100%;
  height: 100%;
  ${mobileStyle("\n    display: flex;\n  ")}
`;
var Toolbar = observer(({ store: t6, downloadButtonEnabled: s3, components: l3 = {} }) => {
  const m2 = 1 === new Set(t6.selectedElements.map((e20) => e20.type)).size, c2 = 1 === t6.selectedElements.length, d2 = t6.selectedElements[0], p3 = t6.selectedElements.every((e20) => e20.styleEditable);
  let u2 = p3 && c2 && T2[d2.type];
  m2 ? u2 = T2[d2.type] : t6.selectedElements.length > 1 && (u2 = T2.many), 0 === t6.selectedElements.length && 1 === t6._selectedPagesIds.length && (u2 = T2.page), c2 && "text" === d2.type && flags.htmlRenderEnabled && (u2 = HtmlToolbar);
  const b3 = c2 && d2._cropModeEnabled, f2 = import_react22.default.useRef(l3);
  (Object.keys(l3).some((e20) => l3[e20] !== f2.current[e20]) || Object.keys(f2.current).some((e20) => !(e20 in l3))) && (f2.current = Object.assign({}, l3));
  const v3 = f2.current, { containerRef: E4, condensed: L3 } = useToolbarCondensed(480), G = (null == v3 ? void 0 : v3.ActionControls) || (s3 ? DownloadButton : null), S = (null == v3 ? void 0 : v3.Position) || PositionPicker, F2 = (null == v3 ? void 0 : v3.Opacity) || OpacityPicker, H2 = (null == v3 ? void 0 : v3.Lock) || LockButton, I3 = (null == v3 ? void 0 : v3.Duplicate) || DuplicateButton, M = (null == v3 ? void 0 : v3.Remove) || RemoveButton, P2 = (null == v3 ? void 0 : v3.Group) || GroupButton, $2 = (null == v3 ? void 0 : v3.History) || HistoryButtons, _2 = (null == v3 ? void 0 : v3.Admin) || AdminButton, q2 = (null == v3 ? void 0 : v3.CopyStyle) || CopyStyleButton;
  return import_react22.default.createElement(z, { ref: E4, className: "bp5-navbar polotno-toolbar" + (L3 ? " condensed" : "") }, import_react22.default.createElement(A, null, !b3 && import_react22.default.createElement($2, { store: t6 }), u2 && p3 && import_react22.default.createElement(u2, { store: t6, components: v3 }), !b3 && import_react22.default.createElement(Navbar.Group, { align: Alignment.RIGHT }, "admin" === t6.role && import_react22.default.createElement(_2, { store: t6 }), import_react22.default.createElement(P2, { store: t6 }), import_react22.default.createElement(S, { store: t6 }), p3 && import_react22.default.createElement(F2, { store: t6 }), import_react22.default.createElement(H2, { store: t6 }), import_react22.default.createElement(I3, { store: t6 }), import_react22.default.createElement(M, { store: t6 }), import_react22.default.createElement(q2, { store: t6 }), G && import_react22.default.createElement(import_react22.default.Fragment, null, import_react22.default.createElement(Divider, { style: { height: "100%", margin: "0 15px" } }), import_react22.default.createElement(G, { store: t6 })))));
});
var toolbar_default = Toolbar;

export {
  DownloadButton,
  registerToolbarComponent,
  useToolbarCondensed,
  Toolbar,
  toolbar_default
};
//# sourceMappingURL=chunk-IYYQSNQ6.js.map
