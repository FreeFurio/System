import {
  applySnapshot,
  cast,
  cropImage,
  destroy,
  detach,
  flags,
  getCrop,
  getGoogleFontsUrl,
  getParentOfType,
  getSnapshot,
  getTotalClientRect,
  getVideoSize,
  globalFonts,
  hasParentOfType,
  injectCustomFont,
  injectGoogleFont,
  loadFont,
  loadImage,
  onSnapshot,
  removeTags,
  replaceColors,
  require_lib,
  resetStyleContent,
  resolvePath,
  rotateAroundCenter,
  setLivelinessChecking,
  types,
  urlToBase64,
  urlToString,
  validateKey,
  whenLoaded
} from "./chunk-UKEGL2ZK.js";
import {
  action,
  computed,
  observable
} from "./chunk-SXFTTVCS.js";
import {
  __toESM
} from "./chunk-2LSFTFF7.js";

// node_modules/polotno/utils/deep-equal.js
var deepEqual = function(e5, t2) {
  if (e5 === t2) {
    return true;
  }
  if ("object" == typeof e5 && null != e5 && "object" == typeof t2 && null != t2) {
    if (Object.keys(e5).length != Object.keys(t2).length) {
      return false;
    }
    for (var r in e5) {
      if (!t2.hasOwnProperty(r)) {
        return false;
      }
      if (!deepEqual(e5[r], t2[r])) {
        return false;
      }
    }
    return true;
  }
  return false;
};

// node_modules/polotno/model/history.js
Object.assign(types);
var UndoManager = types.model("UndoManager", { history: types.array(types.frozen()), undoIdx: -1, targetPath: "" }).views((t2) => ({ get canUndo() {
  return t2.undoIdx > 0;
}, get canRedo() {
  return t2.undoIdx < t2.history.length - 1;
} })).actions((t2) => {
  let d4, s, i2 = false, c2 = null, h = 0, u3 = 0;
  const l = () => u3 > 0;
  function g2() {
    const t3 = getSnapshot(d4);
    return { pages: t3.pages, width: t3.width, height: t3.height, custom: t3.custom, audios: t3.audios };
  }
  function m3(t3) {
    const e5 = d4.pages.map((t4) => t4.id), o2 = t3.pages.map((t4) => t4.id), a = !deepEqual(e5, o2), s2 = !deepEqual(d4.custom, t3.custom);
    a ? applySnapshot(d4.pages, t3.pages) : d4.pages.forEach((e6, o3) => {
      applySnapshot(e6, t3.pages[o3]);
    }), s2 && d4.set({ custom: t3.custom }), d4.setSize(t3.width, t3.height);
  }
  return { startTransaction() {
    u3++;
  }, endTransaction(t3) {
    u3--, t3 || this.requestAddState(g2());
  }, async ignore(e5, o2 = false, a = false) {
    a && await new Promise((t3) => setTimeout(t3, 10)), h && t2.addUndoState();
    let n = l();
    t2.startTransaction();
    let r = u3;
    try {
      await e5();
    } catch (i3) {
      setTimeout(() => {
        throw i3;
      });
    }
    const d5 = r !== u3, s2 = !d5;
    t2.endTransaction(s2), o2 || n || t2.replaceState(), d5 || (clearTimeout(h), h = 0);
  }, async transaction(e5) {
    await t2.ignore(e5, true), this.addUndoState();
  }, requestAddState(t3) {
    c2 = t3, h || l() || (i2 ? i2 = false : h = setTimeout(() => {
      h = 0, clearTimeout(h), l() || this.addUndoState();
    }, 100));
  }, addUndoState() {
    if (i2) {
      return void (i2 = false);
    }
    const e5 = t2.history[t2.undoIdx];
    !deepEqual(c2, e5) && (clearTimeout(h), h = 0, t2.history.splice(t2.undoIdx + 1), t2.history.push(c2), t2.undoIdx = t2.history.length - 1);
  }, afterCreate() {
    if (d4 = resolvePath(t2, ".."), !d4) {
      throw new Error("Failed to find target store for UndoManager. Please provide `targetPath` property, or a `targetStore` in the environment");
    }
    s = onSnapshot(d4, () => {
      this.requestAddState(g2());
    }), 0 === t2.history.length && this.requestAddState(g2());
  }, clear() {
    clearTimeout(h), h = 0, t2.history.splice(0, t2.history.length), t2.undoIdx = -1, t2.addUndoState(g2());
  }, beforeDestroy() {
    s();
  }, undo() {
    h && this.addUndoState(), t2.canUndo ? (t2.undoIdx--, i2 = true, m3(t2.history[t2.undoIdx])) : console.warn("No undo history. Please check `store.history.canUndo` before calling undo action.");
  }, redo() {
    h && this.addUndoState(), t2.canRedo ? (t2.undoIdx++, i2 = true, m3(t2.history[t2.undoIdx])) : console.warn("No redo history. Please check `store.history.canRedo` before calling redo action.");
  }, replaceState() {
    t2.history[t2.undoIdx] = g2();
  } };
});

// node_modules/polotno/node_modules/nanoid/index.browser.js
var nanoid = (size = 21) => crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {
  byte &= 63;
  if (byte < 36) {
    id += byte.toString(36);
  } else if (byte < 62) {
    id += (byte - 26).toString(36).toUpperCase();
  } else if (byte > 62) {
    id += "-";
  } else {
    id += "_";
  }
  return id;
}, "");

// node_modules/polotno/model/store.js
var import_konva = __toESM(require_lib());

// node_modules/polotno/utils/download.js
async function downloadFile(e5, o2) {
  const t2 = await (await fetch(e5)).blob(), c2 = document.createElement("a"), n = URL.createObjectURL(t2);
  c2.href = n, c2.download = o2, document.body.appendChild(c2), c2.click(), setTimeout(function() {
    document.body.removeChild(c2), window.URL.revokeObjectURL(n);
  }, 0);
}

// node_modules/polotno/utils/pdf.js
var d = null;
function getJsPDF() {
  var e5;
  return (null === (e5 = window.jspdf) || void 0 === e5 ? void 0 : e5.jsPDF) ? Promise.resolve(window.jspdf.jsPDF) : d || (d = new Promise((d4) => {
    var e6 = document.createElement("script");
    e6.onload = function() {
      d4(window.jspdf.jsPDF);
    }, e6.src = "https://cdnjs.cloudflare.com/ajax/libs/jspdf/3.0.1/jspdf.umd.min.js", document.head.appendChild(e6);
  }), d);
}

// node_modules/polotno/utils/gif-lib.js
function getGIF() {
  return window.GIF ? Promise.resolve(window.GIF) : new Promise((t2) => {
    var e5 = document.createElement("script");
    e5.onload = function() {
      t2(window.GIF);
    }, e5.src = "https://cdnjs.cloudflare.com/ajax/libs/gif.js/0.2.0/gif.js", document.head.appendChild(e5);
  });
}
async function createGIF({ width: t2, height: e5 }) {
  return new (await getGIF())({ workers: 4, width: t2, height: e5, workerScript: URL.createObjectURL(new Blob([`// gif.worker.js 0.2.0 - https://github.com/jnordberg/gif.js
  (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){var NeuQuant=require("./TypedNeuQuant.js");var LZWEncoder=require("./LZWEncoder.js");function ByteArray(){this.page=-1;this.pages=[];this.newPage()}ByteArray.pageSize=4096;ByteArray.charMap={};for(var i=0;i<256;i++)ByteArray.charMap[i]=String.fromCharCode(i);ByteArray.prototype.newPage=function(){this.pages[++this.page]=new Uint8Array(ByteArray.pageSize);this.cursor=0};ByteArray.prototype.getData=function(){var rv="";for(var p=0;p<this.pages.length;p++){for(var i=0;i<ByteArray.pageSize;i++){rv+=ByteArray.charMap[this.pages[p][i]]}}return rv};ByteArray.prototype.writeByte=function(val){if(this.cursor>=ByteArray.pageSize)this.newPage();this.pages[this.page][this.cursor++]=val};ByteArray.prototype.writeUTFBytes=function(string){for(var l=string.length,i=0;i<l;i++)this.writeByte(string.charCodeAt(i))};ByteArray.prototype.writeBytes=function(array,offset,length){for(var l=length||array.length,i=offset||0;i<l;i++)this.writeByte(array[i])};function GIFEncoder(width,height){this.width=~~width;this.height=~~height;this.transparent=null;this.transIndex=0;this.repeat=-1;this.delay=0;this.image=null;this.pixels=null;this.indexedPixels=null;this.colorDepth=null;this.colorTab=null;this.neuQuant=null;this.usedEntry=new Array;this.palSize=7;this.dispose=-1;this.firstFrame=true;this.sample=10;this.dither=false;this.globalPalette=false;this.out=new ByteArray}GIFEncoder.prototype.setDelay=function(milliseconds){this.delay=Math.round(milliseconds/10)};GIFEncoder.prototype.setFrameRate=function(fps){this.delay=Math.round(100/fps)};GIFEncoder.prototype.setDispose=function(disposalCode){if(disposalCode>=0)this.dispose=disposalCode};GIFEncoder.prototype.setRepeat=function(repeat){this.repeat=repeat};GIFEncoder.prototype.setTransparent=function(color){this.transparent=color};GIFEncoder.prototype.addFrame=function(imageData){this.image=imageData;this.colorTab=this.globalPalette&&this.globalPalette.slice?this.globalPalette:null;this.getImagePixels();this.analyzePixels();if(this.globalPalette===true)this.globalPalette=this.colorTab;if(this.firstFrame){this.writeLSD();this.writePalette();if(this.repeat>=0){this.writeNetscapeExt()}}this.writeGraphicCtrlExt();this.writeImageDesc();if(!this.firstFrame&&!this.globalPalette)this.writePalette();this.writePixels();this.firstFrame=false};GIFEncoder.prototype.finish=function(){this.out.writeByte(59)};GIFEncoder.prototype.setQuality=function(quality){if(quality<1)quality=1;this.sample=quality};GIFEncoder.prototype.setDither=function(dither){if(dither===true)dither="FloydSteinberg";this.dither=dither};GIFEncoder.prototype.setGlobalPalette=function(palette){this.globalPalette=palette};GIFEncoder.prototype.getGlobalPalette=function(){return this.globalPalette&&this.globalPalette.slice&&this.globalPalette.slice(0)||this.globalPalette};GIFEncoder.prototype.writeHeader=function(){this.out.writeUTFBytes("GIF89a")};GIFEncoder.prototype.analyzePixels=function(){if(!this.colorTab){this.neuQuant=new NeuQuant(this.pixels,this.sample);this.neuQuant.buildColormap();this.colorTab=this.neuQuant.getColormap()}if(this.dither){this.ditherPixels(this.dither.replace("-serpentine",""),this.dither.match(/-serpentine/)!==null)}else{this.indexPixels()}this.pixels=null;this.colorDepth=8;this.palSize=7;if(this.transparent!==null){this.transIndex=this.findClosest(this.transparent,true)}};GIFEncoder.prototype.indexPixels=function(imgq){var nPix=this.pixels.length/3;this.indexedPixels=new Uint8Array(nPix);var k=0;for(var j=0;j<nPix;j++){var index=this.findClosestRGB(this.pixels[k++]&255,this.pixels[k++]&255,this.pixels[k++]&255);this.usedEntry[index]=true;this.indexedPixels[j]=index}};GIFEncoder.prototype.ditherPixels=function(kernel,serpentine){var kernels={FalseFloydSteinberg:[[3/8,1,0],[3/8,0,1],[2/8,1,1]],FloydSteinberg:[[7/16,1,0],[3/16,-1,1],[5/16,0,1],[1/16,1,1]],Stucki:[[8/42,1,0],[4/42,2,0],[2/42,-2,1],[4/42,-1,1],[8/42,0,1],[4/42,1,1],[2/42,2,1],[1/42,-2,2],[2/42,-1,2],[4/42,0,2],[2/42,1,2],[1/42,2,2]],Atkinson:[[1/8,1,0],[1/8,2,0],[1/8,-1,1],[1/8,0,1],[1/8,1,1],[1/8,0,2]]};if(!kernel||!kernels[kernel]){throw"Unknown dithering kernel: "+kernel}var ds=kernels[kernel];var index=0,height=this.height,width=this.width,data=this.pixels;var direction=serpentine?-1:1;this.indexedPixels=new Uint8Array(this.pixels.length/3);for(var y=0;y<height;y++){if(serpentine)direction=direction*-1;for(var x=direction==1?0:width-1,xend=direction==1?width:0;x!==xend;x+=direction){index=y*width+x;var idx=index*3;var r1=data[idx];var g1=data[idx+1];var b1=data[idx+2];idx=this.findClosestRGB(r1,g1,b1);this.usedEntry[idx]=true;this.indexedPixels[index]=idx;idx*=3;var r2=this.colorTab[idx];var g2=this.colorTab[idx+1];var b2=this.colorTab[idx+2];var er=r1-r2;var eg=g1-g2;var eb=b1-b2;for(var i=direction==1?0:ds.length-1,end=direction==1?ds.length:0;i!==end;i+=direction){var x1=ds[i][1];var y1=ds[i][2];if(x1+x>=0&&x1+x<width&&y1+y>=0&&y1+y<height){var d=ds[i][0];idx=index+x1+y1*width;idx*=3;data[idx]=Math.max(0,Math.min(255,data[idx]+er*d));data[idx+1]=Math.max(0,Math.min(255,data[idx+1]+eg*d));data[idx+2]=Math.max(0,Math.min(255,data[idx+2]+eb*d))}}}}};GIFEncoder.prototype.findClosest=function(c,used){return this.findClosestRGB((c&16711680)>>16,(c&65280)>>8,c&255,used)};GIFEncoder.prototype.findClosestRGB=function(r,g,b,used){if(this.colorTab===null)return-1;if(this.neuQuant&&!used){return this.neuQuant.lookupRGB(r,g,b)}var c=b|g<<8|r<<16;var minpos=0;var dmin=256*256*256;var len=this.colorTab.length;for(var i=0,index=0;i<len;index++){var dr=r-(this.colorTab[i++]&255);var dg=g-(this.colorTab[i++]&255);var db=b-(this.colorTab[i++]&255);var d=dr*dr+dg*dg+db*db;if((!used||this.usedEntry[index])&&d<dmin){dmin=d;minpos=index}}return minpos};GIFEncoder.prototype.getImagePixels=function(){var w=this.width;var h=this.height;this.pixels=new Uint8Array(w*h*3);var data=this.image;var srcPos=0;var count=0;for(var i=0;i<h;i++){for(var j=0;j<w;j++){this.pixels[count++]=data[srcPos++];this.pixels[count++]=data[srcPos++];this.pixels[count++]=data[srcPos++];srcPos++}}};GIFEncoder.prototype.writeGraphicCtrlExt=function(){this.out.writeByte(33);this.out.writeByte(249);this.out.writeByte(4);var transp,disp;if(this.transparent===null){transp=0;disp=0}else{transp=1;disp=2}if(this.dispose>=0){disp=dispose&7}disp<<=2;this.out.writeByte(0|disp|0|transp);this.writeShort(this.delay);this.out.writeByte(this.transIndex);this.out.writeByte(0)};GIFEncoder.prototype.writeImageDesc=function(){this.out.writeByte(44);this.writeShort(0);this.writeShort(0);this.writeShort(this.width);this.writeShort(this.height);if(this.firstFrame||this.globalPalette){this.out.writeByte(0)}else{this.out.writeByte(128|0|0|0|this.palSize)}};GIFEncoder.prototype.writeLSD=function(){this.writeShort(this.width);this.writeShort(this.height);this.out.writeByte(128|112|0|this.palSize);this.out.writeByte(0);this.out.writeByte(0)};GIFEncoder.prototype.writeNetscapeExt=function(){this.out.writeByte(33);this.out.writeByte(255);this.out.writeByte(11);this.out.writeUTFBytes("NETSCAPE2.0");this.out.writeByte(3);this.out.writeByte(1);this.writeShort(this.repeat);this.out.writeByte(0)};GIFEncoder.prototype.writePalette=function(){this.out.writeBytes(this.colorTab);var n=3*256-this.colorTab.length;for(var i=0;i<n;i++)this.out.writeByte(0)};GIFEncoder.prototype.writeShort=function(pValue){this.out.writeByte(pValue&255);this.out.writeByte(pValue>>8&255)};GIFEncoder.prototype.writePixels=function(){var enc=new LZWEncoder(this.width,this.height,this.indexedPixels,this.colorDepth);enc.encode(this.out)};GIFEncoder.prototype.stream=function(){return this.out};module.exports=GIFEncoder},{"./LZWEncoder.js":2,"./TypedNeuQuant.js":3}],2:[function(require,module,exports){var EOF=-1;var BITS=12;var HSIZE=5003;var masks=[0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535];function LZWEncoder(width,height,pixels,colorDepth){var initCodeSize=Math.max(2,colorDepth);var accum=new Uint8Array(256);var htab=new Int32Array(HSIZE);var codetab=new Int32Array(HSIZE);var cur_accum,cur_bits=0;var a_count;var free_ent=0;var maxcode;var clear_flg=false;var g_init_bits,ClearCode,EOFCode;function char_out(c,outs){accum[a_count++]=c;if(a_count>=254)flush_char(outs)}function cl_block(outs){cl_hash(HSIZE);free_ent=ClearCode+2;clear_flg=true;output(ClearCode,outs)}function cl_hash(hsize){for(var i=0;i<hsize;++i)htab[i]=-1}function compress(init_bits,outs){var fcode,c,i,ent,disp,hsize_reg,hshift;g_init_bits=init_bits;clear_flg=false;n_bits=g_init_bits;maxcode=MAXCODE(n_bits);ClearCode=1<<init_bits-1;EOFCode=ClearCode+1;free_ent=ClearCode+2;a_count=0;ent=nextPixel();hshift=0;for(fcode=HSIZE;fcode<65536;fcode*=2)++hshift;hshift=8-hshift;hsize_reg=HSIZE;cl_hash(hsize_reg);output(ClearCode,outs);outer_loop:while((c=nextPixel())!=EOF){fcode=(c<<BITS)+ent;i=c<<hshift^ent;if(htab[i]===fcode){ent=codetab[i];continue}else if(htab[i]>=0){disp=hsize_reg-i;if(i===0)disp=1;do{if((i-=disp)<0)i+=hsize_reg;if(htab[i]===fcode){ent=codetab[i];continue outer_loop}}while(htab[i]>=0)}output(ent,outs);ent=c;if(free_ent<1<<BITS){codetab[i]=free_ent++;htab[i]=fcode}else{cl_block(outs)}}output(ent,outs);output(EOFCode,outs)}function encode(outs){outs.writeByte(initCodeSize);remaining=width*height;curPixel=0;compress(initCodeSize+1,outs);outs.writeByte(0)}function flush_char(outs){if(a_count>0){outs.writeByte(a_count);outs.writeBytes(accum,0,a_count);a_count=0}}function MAXCODE(n_bits){return(1<<n_bits)-1}function nextPixel(){if(remaining===0)return EOF;--remaining;var pix=pixels[curPixel++];return pix&255}function output(code,outs){cur_accum&=masks[cur_bits];if(cur_bits>0)cur_accum|=code<<cur_bits;else cur_accum=code;cur_bits+=n_bits;while(cur_bits>=8){char_out(cur_accum&255,outs);cur_accum>>=8;cur_bits-=8}if(free_ent>maxcode||clear_flg){if(clear_flg){maxcode=MAXCODE(n_bits=g_init_bits);clear_flg=false}else{++n_bits;if(n_bits==BITS)maxcode=1<<BITS;else maxcode=MAXCODE(n_bits)}}if(code==EOFCode){while(cur_bits>0){char_out(cur_accum&255,outs);cur_accum>>=8;cur_bits-=8}flush_char(outs)}}this.encode=encode}module.exports=LZWEncoder},{}],3:[function(require,module,exports){var ncycles=100;var netsize=256;var maxnetpos=netsize-1;var netbiasshift=4;var intbiasshift=16;var intbias=1<<intbiasshift;var gammashift=10;var gamma=1<<gammashift;var betashift=10;var beta=intbias>>betashift;var betagamma=intbias<<gammashift-betashift;var initrad=netsize>>3;var radiusbiasshift=6;var radiusbias=1<<radiusbiasshift;var initradius=initrad*radiusbias;var radiusdec=30;var alphabiasshift=10;var initalpha=1<<alphabiasshift;var alphadec;var radbiasshift=8;var radbias=1<<radbiasshift;var alpharadbshift=alphabiasshift+radbiasshift;var alpharadbias=1<<alpharadbshift;var prime1=499;var prime2=491;var prime3=487;var prime4=503;var minpicturebytes=3*prime4;function NeuQuant(pixels,samplefac){var network;var netindex;var bias;var freq;var radpower;function init(){network=[];netindex=new Int32Array(256);bias=new Int32Array(netsize);freq=new Int32Array(netsize);radpower=new Int32Array(netsize>>3);var i,v;for(i=0;i<netsize;i++){v=(i<<netbiasshift+8)/netsize;network[i]=new Float64Array([v,v,v,0]);freq[i]=intbias/netsize;bias[i]=0}}function unbiasnet(){for(var i=0;i<netsize;i++){network[i][0]>>=netbiasshift;network[i][1]>>=netbiasshift;network[i][2]>>=netbiasshift;network[i][3]=i}}function altersingle(alpha,i,b,g,r){network[i][0]-=alpha*(network[i][0]-b)/initalpha;network[i][1]-=alpha*(network[i][1]-g)/initalpha;network[i][2]-=alpha*(network[i][2]-r)/initalpha}function alterneigh(radius,i,b,g,r){var lo=Math.abs(i-radius);var hi=Math.min(i+radius,netsize);var j=i+1;var k=i-1;var m=1;var p,a;while(j<hi||k>lo){a=radpower[m++];if(j<hi){p=network[j++];p[0]-=a*(p[0]-b)/alpharadbias;p[1]-=a*(p[1]-g)/alpharadbias;p[2]-=a*(p[2]-r)/alpharadbias}if(k>lo){p=network[k--];p[0]-=a*(p[0]-b)/alpharadbias;p[1]-=a*(p[1]-g)/alpharadbias;p[2]-=a*(p[2]-r)/alpharadbias}}}function contest(b,g,r){var bestd=~(1<<31);var bestbiasd=bestd;var bestpos=-1;var bestbiaspos=bestpos;var i,n,dist,biasdist,betafreq;for(i=0;i<netsize;i++){n=network[i];dist=Math.abs(n[0]-b)+Math.abs(n[1]-g)+Math.abs(n[2]-r);if(dist<bestd){bestd=dist;bestpos=i}biasdist=dist-(bias[i]>>intbiasshift-netbiasshift);if(biasdist<bestbiasd){bestbiasd=biasdist;bestbiaspos=i}betafreq=freq[i]>>betashift;freq[i]-=betafreq;bias[i]+=betafreq<<gammashift}freq[bestpos]+=beta;bias[bestpos]-=betagamma;return bestbiaspos}function inxbuild(){var i,j,p,q,smallpos,smallval,previouscol=0,startpos=0;for(i=0;i<netsize;i++){p=network[i];smallpos=i;smallval=p[1];for(j=i+1;j<netsize;j++){q=network[j];if(q[1]<smallval){smallpos=j;smallval=q[1]}}q=network[smallpos];if(i!=smallpos){j=q[0];q[0]=p[0];p[0]=j;j=q[1];q[1]=p[1];p[1]=j;j=q[2];q[2]=p[2];p[2]=j;j=q[3];q[3]=p[3];p[3]=j}if(smallval!=previouscol){netindex[previouscol]=startpos+i>>1;for(j=previouscol+1;j<smallval;j++)netindex[j]=i;previouscol=smallval;startpos=i}}netindex[previouscol]=startpos+maxnetpos>>1;for(j=previouscol+1;j<256;j++)netindex[j]=maxnetpos}function inxsearch(b,g,r){var a,p,dist;var bestd=1e3;var best=-1;var i=netindex[g];var j=i-1;while(i<netsize||j>=0){if(i<netsize){p=network[i];dist=p[1]-g;if(dist>=bestd)i=netsize;else{i++;if(dist<0)dist=-dist;a=p[0]-b;if(a<0)a=-a;dist+=a;if(dist<bestd){a=p[2]-r;if(a<0)a=-a;dist+=a;if(dist<bestd){bestd=dist;best=p[3]}}}}if(j>=0){p=network[j];dist=g-p[1];if(dist>=bestd)j=-1;else{j--;if(dist<0)dist=-dist;a=p[0]-b;if(a<0)a=-a;dist+=a;if(dist<bestd){a=p[2]-r;if(a<0)a=-a;dist+=a;if(dist<bestd){bestd=dist;best=p[3]}}}}}return best}function learn(){var i;var lengthcount=pixels.length;var alphadec=30+(samplefac-1)/3;var samplepixels=lengthcount/(3*samplefac);var delta=~~(samplepixels/ncycles);var alpha=initalpha;var radius=initradius;var rad=radius>>radiusbiasshift;if(rad<=1)rad=0;for(i=0;i<rad;i++)radpower[i]=alpha*((rad*rad-i*i)*radbias/(rad*rad));var step;if(lengthcount<minpicturebytes){samplefac=1;step=3}else if(lengthcount%prime1!==0){step=3*prime1}else if(lengthcount%prime2!==0){step=3*prime2}else if(lengthcount%prime3!==0){step=3*prime3}else{step=3*prime4}var b,g,r,j;var pix=0;i=0;while(i<samplepixels){b=(pixels[pix]&255)<<netbiasshift;g=(pixels[pix+1]&255)<<netbiasshift;r=(pixels[pix+2]&255)<<netbiasshift;j=contest(b,g,r);altersingle(alpha,j,b,g,r);if(rad!==0)alterneigh(rad,j,b,g,r);pix+=step;if(pix>=lengthcount)pix-=lengthcount;i++;if(delta===0)delta=1;if(i%delta===0){alpha-=alpha/alphadec;radius-=radius/radiusdec;rad=radius>>radiusbiasshift;if(rad<=1)rad=0;for(j=0;j<rad;j++)radpower[j]=alpha*((rad*rad-j*j)*radbias/(rad*rad))}}}function buildColormap(){init();learn();unbiasnet();inxbuild()}this.buildColormap=buildColormap;function getColormap(){var map=[];var index=[];for(var i=0;i<netsize;i++)index[network[i][3]]=i;var k=0;for(var l=0;l<netsize;l++){var j=index[l];map[k++]=network[j][0];map[k++]=network[j][1];map[k++]=network[j][2]}return map}this.getColormap=getColormap;this.lookupRGB=inxsearch}module.exports=NeuQuant},{}],4:[function(require,module,exports){var GIFEncoder,renderFrame;GIFEncoder=require("./GIFEncoder.js");renderFrame=function(frame){var encoder,page,stream,transfer;encoder=new GIFEncoder(frame.width,frame.height);if(frame.index===0){encoder.writeHeader()}else{encoder.firstFrame=false}encoder.setTransparent(frame.transparent);encoder.setRepeat(frame.repeat);encoder.setDelay(frame.delay);encoder.setQuality(frame.quality);encoder.setDither(frame.dither);encoder.setGlobalPalette(frame.globalPalette);encoder.addFrame(frame.data);if(frame.last){encoder.finish()}if(frame.globalPalette===true){frame.globalPalette=encoder.getGlobalPalette()}stream=encoder.stream();frame.data=stream.pages;frame.cursor=stream.cursor;frame.pageSize=stream.constructor.pageSize;if(frame.canTransfer){transfer=function(){var i,len,ref,results;ref=frame.data;results=[];for(i=0,len=ref.length;i<len;i++){page=ref[i];results.push(page.buffer)}return results}();return self.postMessage(frame,transfer)}else{return self.postMessage(frame)}};self.onmessage=function(event){return renderFrame(event.data)}},{"./GIFEncoder.js":1}]},{},[4]);
`], { type: "application/javascript" })) });
}

// node_modules/polotno/utils/unit.js
var pxToUnit = ({ px: t2, unit: n = "px", dpi: e5 }) => {
  switch (n) {
    case "pt":
    default:
      return t2;
    case "mm":
      return t2 / (e5 / 25.4);
    case "cm":
      return t2 / (e5 / 2.54);
    case "in":
      return t2 / e5;
  }
};
var pxToUnitRounded = ({ px: t2, precious: n = 2, dpi: e5 = 72, unit: i2 = "px" }) => parseFloat(pxToUnit({ px: t2, dpi: e5, unit: i2 }).toFixed(n));
var unitToPx = ({ unitVal: t2, dpi: n, unit: e5 }) => t2 / pxToUnit({ px: 1, unit: e5, dpi: n });
var pxToUnitString = (t2) => {
  const n = parseFloat(pxToUnit(t2).toFixed(1));
  switch (t2.unit) {
    case "pt":
      return `${Math.round(n)}pt`;
    case "mm":
      return `${n}mm`;
    case "cm":
      return `${n}cm`;
    case "in":
      return `${n}in`;
    default:
      return `${Math.round(n)}px`;
  }
};

// node_modules/polotno/utils/wait.js
async function waitTillAvailable(t2) {
  for (let i2 = 0; i2 < 30; i2++) {
    const i3 = await t2();
    if (i3) {
      return i3;
    }
    await new Promise((t3) => setTimeout(t3, 50));
  }
}

// node_modules/polotno/utils/figure-to-svg.js
var rectData = ({ width: t2, height: h, cornerRadius: i2 }) => {
  if (i2 > 0) {
    const C = Math.min(i2, t2 / 2, h / 2);
    return `M 0 ${C} A ${C} ${C} 0 0 1 ${C} 0 L ${t2 - C} 0 A ${C} ${C} 0 0 1 ${t2} ${C} L ${t2} ${h - C} A ${C} ${C} 0 0 1 ${t2 - C} ${h} L ${C} ${h} A ${C} ${C} 0 0 1 0 ${h - C} Z`;
  }
  return `M 0 0 L ${t2} 0 L ${t2} ${h} L 0 ${h} Z`;
};
var triangleData = ({ width: t2, height: h }) => `M ${t2 / 2} 0 L ${t2} ${h} L 0 ${h} Z`;
var rightTriangleData = ({ width: t2, height: h }) => `M 0 0 L ${t2} 0 L 0 ${h} Z`;
var circleData = ({ width: t2, height: h }) => `M ${t2 / 2} ${h / 2} m -${t2 / 2}, 0 a ${t2 / 2},${h / 2} 0 1,0 ${t2},0 a ${t2 / 2},${h / 2} 0 1,0 -${t2},0`;
function starPath({ width: t2, height: h }) {
  const i2 = t2 / 2, C = h / 2, e5 = t2 / 2, a = h / 2, g2 = e5 / 2, d4 = a / 2;
  let w2 = "", o2 = Math.PI / 5;
  for (let p4 = 0; p4 < 10; p4++) {
    const t3 = p4 % 2 == 0 ? a : d4, h2 = i2 + (p4 % 2 == 0 ? e5 : g2) * Math.sin(p4 * o2), L = C - t3 * Math.cos(p4 * o2);
    0 === p4 ? w2 = `M ${h2} ${L}` : w2 += ` L ${h2} ${L}`;
  }
  return w2 + " Z";
}
function diamondPath({ width: t2, height: h }) {
  const i2 = t2 / 2, C = h / 2;
  return `M ${i2} 0 L ${t2} ${C} L ${i2} ${h} L 0 ${C} Z`;
}
function pentagonPath({ width: t2, height: h }) {
  const i2 = t2 / 2, C = h / 2, e5 = t2 / 2, a = h / 2;
  let g2 = "", d4 = 2 * Math.PI / 5;
  for (let w2 = 0; w2 < 5; w2++) {
    const t3 = a, h2 = i2 + e5 * Math.sin(w2 * d4), o2 = C - t3 * Math.cos(w2 * d4);
    0 === w2 ? g2 = `M ${h2} ${o2}` : g2 += ` L ${h2} ${o2}`;
  }
  return g2 + " Z";
}
function hexagonPath({ width: t2, height: h }) {
  const i2 = t2 / 2, C = h / 2, e5 = t2 / 2, a = h / 2;
  let g2 = "", d4 = 2 * Math.PI / 6;
  for (let w2 = 0; w2 < 6; w2++) {
    const t3 = a, h2 = i2 + e5 * Math.sin(w2 * d4), o2 = C - t3 * Math.cos(w2 * d4);
    0 === w2 ? g2 = `M ${h2} ${o2}` : g2 += ` L ${h2} ${o2}`;
  }
  return g2 + " Z";
}
function t({ path: t2, aspectRatio: h, width: i2, height: C }) {
  return { path: t2, scaleX: i2 / h.width, scaleY: C / h.height };
}
function speechBubblePath({ width: t2, height: h }) {
  const i2 = 0.1 * Math.min(t2, h), C = 0.2 * t2, e5 = 0.2 * h, a = 0.5 * t2;
  let g2 = `M ${i2},0`;
  return g2 += " H " + (t2 - i2), g2 += ` A ${i2},${i2} 0 0 1 ${t2},${i2}`, g2 += " V " + (h - i2 - e5), g2 += ` A ${i2},${i2} 0 0 1 ${t2 - i2},${h - e5}`, g2 += ` H ${a + C / 2}`, g2 += ` L ${a},${h}`, g2 += ` L ${a - C / 2},${h - e5}`, g2 += ` H ${i2}`, g2 += ` A ${i2},${i2} 0 0 1 0,${h - i2 - e5}`, g2 += ` V ${i2}`, g2 += ` A ${i2},${i2} 0 0 1 ${i2},0`, g2 += " Z", g2;
}
function crossPath({ width: t2, height: h }) {
  const i2 = 0.3 * t2, C = 0.3 * h, e5 = t2 / 2, a = h / 2, g2 = e5 - i2 / 2, d4 = e5 + i2 / 2, w2 = a - C / 2, o2 = a + C / 2;
  let p4 = `M ${g2},0 `;
  return p4 += `H ${d4} `, p4 += `V ${w2} `, p4 += `H ${t2} `, p4 += `V ${o2} `, p4 += `H ${d4} `, p4 += `V ${h} `, p4 += `H ${g2} `, p4 += `V ${o2} `, p4 += "H 0 ", p4 += `V ${w2} `, p4 += `H ${g2} `, p4 += "V 0 ", p4 += "Z", p4;
}
var TYPES = { rect: rectData, circle: circleData, star: starPath, triangle: triangleData, rightTriangle: rightTriangleData, diamond: diamondPath, pentagon: pentagonPath, hexagon: hexagonPath, speechBubble: speechBubblePath, cross: crossPath, arc: ({ width: h, height: i2 }) => t({ path: "M234 117C234 85.97 221.673 56.21 199.731 34.269C177.79 12.327 148.03 0 117 0C85.97 0 56.2103 12.327 34.2685 34.268C12.3268 56.21 0 85.97 0 117H117H234Z", aspectRatio: { width: 234, height: 117 }, width: h, height: i2 }), cloud: ({ width: h, height: i2 }) => t({ path: "M216.41 57.006C216.961 54.084 217.249 51.069 217.249 47.986C217.249 21.4841 195.972 0 169.725 0C153.666 0 139.467 8.043 130.865 20.3575C122.606 13.3566 111.954 9.1402 100.327 9.1402C74.3322 9.1402 53.2123 30.2136 52.8094 56.364H52.8035C23.6407 56.364 0 80.235 0 109.682C0 139.129 23.6407 163 52.8035 163H208.197C237.359 163 261 139.129 261 109.682C261 83.056 241.672 60.99 216.41 57.006Z", aspectRatio: { width: 261, height: 163 }, width: h, height: i2 }), rightArrow: ({ width: t2, height: h }) => {
  const i2 = 0.6 * t2;
  return `M 0 ${h / 4} L ${i2} ${h / 4} L ${i2} 0 L ${t2} ${h / 2} L ${i2} ${h} L ${i2} ${0.75 * h} L 0 ${0.75 * h} Z`;
}, leftArrow: ({ width: t2, height: h }) => {
  const i2 = 0.4 * t2;
  return `M ${t2} ${h / 4} L ${i2} ${h / 4} L ${i2} 0 L 0 ${h / 2} L ${i2} ${h} L ${i2} ${0.75 * h} L ${t2} ${0.75 * h} Z`;
}, downArrow: ({ width: t2, height: h }) => {
  const i2 = 0.6 * h;
  return `M ${t2 / 4} 0 L ${t2 / 4} ${i2} L 0 ${i2} L ${t2 / 2} ${h} L ${t2} ${i2} L ${0.75 * t2} ${i2} L ${0.75 * t2} 0 Z`;
}, upArrow: ({ width: t2, height: h }) => {
  const i2 = 0.4 * h;
  return `M ${t2 / 4} ${h} L ${t2 / 4} ${i2} L 0 ${i2} L ${t2 / 2} 0 L ${t2} ${i2} L ${0.75 * t2} ${i2} L ${0.75 * t2} ${h} Z`;
}, asterisk1: ({ width: h, height: i2 }) => t({ path: "M45.5265 218.498C51.5466 222.87 58.5359 224.98 65.4742 224.98C75.916 224.98 86.221 220.2 92.853 211.217C92.872 211.198 92.89 211.178 92.907 211.157C92.923 211.136 92.939 211.115 92.954 211.094L92.977 211.061C92.993 211.039 93.008 211.017 93.023 210.996L116.491 178.725L139.959 210.996C139.982 211.031 140.006 211.058 140.029 211.088C140.04 211.102 140.05 211.116 140.061 211.132C151.115 226.188 172.355 229.505 187.473 218.515C202.608 207.526 205.992 186.278 195.074 171.104L195.05 171.066C195.03 171.034 195.014 171.01 194.989 170.985L171.572 138.696L209.512 126.346C227.334 120.545 237.129 101.305 231.33 83.476C225.532 65.648 206.315 55.8493 188.476 61.6334L150.537 73.933L150.52 34.0064C150.502 15.2594 135.248 0 116.508 0C97.768 0 82.514 15.2594 82.497 34.0234L82.463 73.916L44.5233 61.6163C44.5083 61.6163 44.49 61.613 44.4716 61.6078C44.4477 61.6014 44.4232 61.5918 44.4041 61.5823C26.5992 55.8664 7.45076 65.665 1.66886 83.46C-4.11314 101.254 5.61427 120.426 23.3511 126.278C23.3675 126.283 23.3822 126.289 23.3963 126.295L23.4588 126.319L23.4873 126.329L61.4098 138.679L37.9929 170.968C37.9844 170.985 37.9718 171.002 37.9591 171.019C37.9462 171.036 37.9336 171.053 37.9251 171.07C26.9903 186.244 30.3915 207.509 45.5265 218.498Z", aspectRatio: { width: 233, height: 225 }, width: h, height: i2 }), asterisk2: ({ width: h, height: i2 }) => t({ path: "M46.0556 112L0 85.388L33.9456 26.6121L80.028 53.1781L80.054 0H147.946L147.972 53.1781L194.054 26.6121L228 85.388L181.944 112L228 138.612L194.054 197.388L147.972 170.822L147.946 224H80.054L80.028 170.822L33.9456 197.388L0 138.612L46.0556 112Z", aspectRatio: { width: 228, height: 224 }, width: h, height: i2 }), bookmark: ({ width: h, height: i2 }) => t({ path: "M0 0H199V238L99.5 142.8L0 238V0Z", aspectRatio: { width: 199, height: 238 }, width: h, height: i2 }), butterfly: ({ width: h, height: i2 }) => t({ path: "M94.5 100.713C91.935 150.916 50.703 190.909 0 191.493V0C50.703 0.5845 91.935 40.5767 94.5 90.78C97.031 41.2385 137.217 1.6407 187 0.0438004V191.45C137.217 189.853 97.031 150.255 94.5 100.713Z", aspectRatio: { width: 187, height: 192 }, width: h, height: i2 }), cylinder: ({ width: h, height: i2 }) => t({ path: "M169 36.8497V218.15C169 238.502 131.168 255 84.5 255C37.832 255 0 238.502 0 218.15V36.8497C0 16.4982 37.832 0 84.5 0C131.168 0 169 16.4982 169 36.8497Z", aspectRatio: { width: 169, height: 255 }, width: h, height: i2 }), diamond2: ({ width: h, height: i2 }) => t({ path: "M0 55.5L124 185L248 55.5L189.307 0H58.6933L0 55.5Z", aspectRatio: { width: 248, height: 185 }, width: h, height: i2 }), door: ({ width: h, height: i2 }) => t({ path: "M140 69.697C140 31.2044 108.66 0 70 0C31.34 0 0 31.2044 0 69.697V207H140V69.697Z", aspectRatio: { width: 140, height: 207 }, width: h, height: i2 }), drop1: ({ width: h, height: i2 }) => t({ path: "M167 150.687C167 196.328 129.407 234 83.139 234C37.593 234 0 196.328 0 150.687C0 100.7 51.329 36.9474 83.139 0C114.948 39.1207 167 98.526 167 150.687Z", aspectRatio: { width: 167, height: 234 }, width: h, height: i2 }), drop2: ({ width: h, height: i2 }) => t({ path: "M73 239C53.64 239 35.071 231.315 21.3812 217.634C7.691 203.954 0 185.4 0 166.054C0 136.091 13.8696 113.633 30.768 86.27C43.912 64.9877 58.888 40.7377 70.597 7.6816C71.281 5.7496 72.989 0 72.989 0C72.989 0 72.993 0.0124998 73 0.0363998C73.007 0.0124998 73.011 0 73.011 0C73.011 0 74.719 5.7496 75.403 7.6816C87.112 40.7377 102.088 64.9877 115.232 86.27C132.13 113.633 146 136.091 146 166.054C146 185.4 138.309 203.954 124.619 217.634C111.025 231.218 92.225 239 73 239Z", aspectRatio: { width: 146, height: 239 }, width: h, height: i2 }), explosion: ({ width: h, height: i2 }) => t({ path: "M165.802 184.465L118.997 260L125.343 182.079L34.9058 219.45L99.164 159.817L0 163.792L78.538 134.373L0 74.7401L86.471 89.052V0L118.997 89.052L165.802 10.3364L149.143 97.798L217.368 29.419L165.802 112.905L245.927 81.101L165.802 143.914H261L165.802 184.465Z", aspectRatio: { width: 261, height: 260 }, width: h, height: i2 }), flag: ({ width: h, height: i2 }) => t({ path: "M0 142.161C0 142.161 51.9956 118.626 103 137.469C159.992 158.525 206 141.31 206 141.31V11.1373C206 11.1373 160 28.3218 103.016 7.28273C52 -11.553 0 12.0974 0 12.0974V142.161Z", aspectRatio: { width: 206, height: 148 }, width: h, height: i2 }), flower: ({ width: h, height: i2 }) => t({ path: "M135.351 66.1893C196.683 -5.00591 256.536 100.304 164.908 117.361C256.536 135.16 195.944 239.728 135.351 168.532C166.386 257.526 45.9394 256.785 76.975 168.532C15.643 239.728 -44.2109 135.16 47.4173 117.361C-44.9498 100.304 15.643 -4.26431 76.975 66.1893C45.2005 -22.0631 166.386 -22.0631 135.351 66.1893ZM105.793 104.012C113.183 104.012 119.833 109.945 119.833 117.361C119.833 124.777 113.183 131.452 105.793 131.452C98.404 131.452 92.492 124.777 92.492 117.361C92.492 109.945 98.404 104.012 105.793 104.012Z", aspectRatio: { width: 212, height: 235 }, width: h, height: i2 }), frame: ({ width: h, height: i2 }) => t({ path: "M0 0H240L200 88L240 176H0L40 88L0 0Z", aspectRatio: { width: 240, height: 176 }, width: h, height: i2 }), heart1: ({ width: h, height: i2 }) => t({ path: "M215.886 56.157C215.886 24.729 191.112 0 160.584 0C135.933 0 115.08 16.983 107.937 39.93C100.788 16.986 79.935 0.591 55.284 0.591C24.75 0.591 0 24.615 0 56.055C0 71.919 6.321 83.127 16.494 95.121L107.988 189.447L199.377 95.121C209.559 83.127 215.886 72.009 215.886 56.157Z", aspectRatio: { width: 216, height: 190 }, width: h, height: i2 }), home: ({ width: h, height: i2 }) => t({ path: "M0 62.143L95.5 0L191 62.143V195H0V62.143Z", aspectRatio: { width: 191, height: 195 }, width: h, height: i2 }), home2: ({ width: h, height: i2 }) => t({ path: "M206 94.076L103 0L0 94.076H31.2377V189H175.607V94.076H206Z", aspectRatio: { width: 206, height: 189 }, width: h, height: i2 }), hourglass: ({ width: h, height: i2 }) => t({ path: "M0.392782 0H187.607C193.014 43.3688 140.804 53.797 140.804 97.5C140.804 141.203 193.014 151.631 187.607 195H0.392782C-5.01452 151.631 47.196 141.203 47.196 97.5C47.196 53.797 -5.01452 43.3688 0.392782 0Z", aspectRatio: { width: 188, height: 195 }, width: h, height: i2 }), house: ({ width: h, height: i2 }) => t({ path: "M0 92.367L95 0L190 92.367V223H0V92.367Z", aspectRatio: { width: 190, height: 223 }, width: h, height: i2 }), keyhole: ({ width: h, height: i2 }) => t({ path: "M115 57.0494C115 25.5387 89.416 0 57.863 0C26.311 0 0.726898 25.5414 0.726898 57.0494C0.726898 78.652 12.759 97.451 30.505 107.136L0 219H114.845L84.448 107.524C102.608 97.962 115 78.959 115 57.0494Z", aspectRatio: { width: 115, height: 219 }, width: h, height: i2 }), kiss: ({ width: h, height: i2 }) => t({ path: "M124.5 17.1468C80.036 -36.5162 0 52.9218 0 52.9218C0 52.9218 44.4643 120 124.5 120C204.536 120 249 52.9218 249 52.9218C249 52.9218 168.964 -36.5162 124.5 17.1468Z", aspectRatio: { width: 249, height: 120 }, width: h, height: i2 }), leaf: ({ width: h, height: i2 }) => t({ path: "M204.414 0.0151567C204.414 0.0151567 206.837 93.9509 150.394 150.394C93.9507 206.837 0.0151569 204.413 0.0151569 204.413C0.0151569 204.413 -2.40835 110.478 54.0347 54.0349C110.478 -2.40834 204.414 0.0151567 204.414 0.0151567Z", aspectRatio: { width: 205, height: 205 }, width: h, height: i2 }), lightning1: ({ width: h, height: i2 }) => t({ path: "M111.5 0L0 142H51.433L31.5 253L143 111H91.567L111.5 0Z", aspectRatio: { width: 143, height: 253 }, width: h, height: i2 }), lightning2: ({ width: h, height: i2 }) => t({ path: "M126 0H43L0 120.531H36L6 227L110 80.354H73L126 0Z", aspectRatio: { width: 126, height: 227 }, width: h, height: i2 }), magnet: ({ width: h, height: i2 }) => t({ path: "M88.402 0H0V67.669H88.402C105.271 67.669 118.957 81.308 118.957 98C118.957 114.689 105.271 128.331 88.402 128.331H0V196H88.402C142.747 196 187 152.072 187 98C187 43.9279 142.747 0 88.402 0Z", aspectRatio: { width: 187, height: 196 }, width: h, height: i2 }), mithosis: ({ width: h, height: i2 }) => t({ path: "M150.996 136.45C137.141 128.926 117.559 128.7 103.532 135.896C93.843 140.867 82.875 143.67 71.2577 143.67C31.9033 143.67 0 111.508 0 71.835C0 32.161 31.9033 0 71.2577 0C83.467 0 94.959 3.0955 105.004 8.5504C118.859 16.0745 138.441 16.3 152.467 9.1038C162.157 4.1328 173.125 1.3303 184.742 1.3303C224.097 1.3303 256 33.492 256 73.165C256 112.839 224.097 145 184.742 145C172.533 145 161.041 141.905 150.996 136.45Z", aspectRatio: { width: 256, height: 145 }, width: h, height: i2 }), orangeRicky: ({ width: h, height: i2 }) => t({ path: "M69 0H0V69V138V207H69H138V138H69V69V0Z", aspectRatio: { width: 138, height: 207 }, width: h, height: i2 }), party: ({ width: h, height: i2 }) => t({ path: "M134.622 0L144.682 68.2539L174.415 5.9977L163.91 74.1846L210.671 23.4578L180.535 85.519L240.169 50.8289L193.079 101.25L260.29 85.679L200.43 119.98L269.245 124.911L201.934 140.044L266.237 165.04L197.456 159.661L251.535 202.5L187.396 177.086L226.445 233.962L172.646 190.771L193.197 256.631L154.518 199.501L154.743 268.492L134.622 202.5L114.501 268.492L114.727 199.501L76.0482 256.631L96.5985 190.771L42.7992 233.962L81.8489 177.086L17.7091 202.5L71.7885 159.661L3.0072 165.04L67.3112 140.044L0 124.911L68.8149 119.98L8.9545 85.679L76.1658 101.25L29.0753 50.8289L88.7105 85.519L58.5743 23.4578L105.335 74.1846L94.8305 5.9977L124.562 68.2539L134.622 0Z", aspectRatio: { width: 270, height: 269 }, width: h, height: i2 }), pillow: ({ width: h, height: i2 }) => t({ path: "M176 0.00169945C157.812 16.9062 125.203 28.174 88.001 28.174C50.798 28.174 18.1881 16.9054 0 0V258.421C18.1882 241.516 50.798 230.248 88 230.248C125.202 230.248 157.812 241.516 176 258.421V0.00169945Z", aspectRatio: { width: 176, height: 259 }, width: h, height: i2 }), polygon: ({ width: h, height: i2 }) => t({ path: "M110 0L219.119 63V189L110 252L0.880798 189V63L110 0Z", aspectRatio: { width: 220, height: 252 }, width: h, height: i2 }), rainbow: ({ width: h, height: i2 }) => t({ path: "M186.907 141H282C282 63.128 218.872 0 141 0C63.1278 0 0 63.128 0 141H95.093C95.093 115.646 115.646 95.093 141 95.093C166.354 95.093 186.907 115.646 186.907 141Z", aspectRatio: { width: 282, height: 141 }, width: h, height: i2 }), rhodeIsland: ({ width: h, height: i2 }) => t({ path: "M69 0H0V69V138H69V207H138V138V69H69V0Z", aspectRatio: { width: 138, height: 207 }, width: h, height: i2 }), shell: ({ width: h, height: i2 }) => t({ path: "M109 0C169.199 0 218 48.743 218 108.87C185.392 108.87 158.958 135.273 158.958 167.842C158.958 179.736 158.958 191 158.958 191H59.042C59.042 191 59.042 179.736 59.042 167.842C59.042 135.273 32.6077 108.87 0 108.87C0 48.743 48.8007 0 109 0Z", aspectRatio: { width: 218, height: 191 }, width: h, height: i2 }), shield1: ({ width: h, height: i2 }) => t({ path: "M203.184 30.7277C142.457 30.7277 102.853 0 102.853 0C102.853 0 63.249 30.7277 3.05098 30.7277C3.05098 30.7277 -3.81372 128.209 3.05098 162.115C9.38758 193.902 102.853 249 102.853 249C102.853 249 196.319 193.902 203.184 162.115C209.52 128.738 203.184 30.7277 203.184 30.7277Z", aspectRatio: { width: 206, height: 249 }, width: h, height: i2 }), shield2: ({ width: h, height: i2 }) => t({ path: "M0 12.9585C64.624 -4.3195 136.376 -4.3195 201 12.9585C201 51.0564 201 89.154 201 127.252C201 184.396 100.498 240 100.498 240C100.498 240 0 184.406 0 127.252C0 89.154 0 51.0564 0 12.9585Z", aspectRatio: { width: 201, height: 240 }, width: h, height: i2 }), skewedRectangle: ({ width: h, height: i2 }) => t({ path: "M85.9799 0H290L204.02 141H0L85.9799 0Z", aspectRatio: { width: 290, height: 141 }, width: h, height: i2 }), softFlower: ({ width: h, height: i2 }) => t({ path: "M109 0C80.073 0 56.6234 23.4498 56.6234 52.3766C56.6234 54.722 54.722 56.6234 52.3766 56.6234C23.4498 56.6234 0 80.073 0 109C0 137.927 23.4498 161.377 52.3766 161.377C54.722 161.377 56.6234 163.278 56.6234 165.623C56.6234 194.55 80.073 218 109 218C137.927 218 161.377 194.55 161.377 165.623C161.377 163.278 163.278 161.377 165.623 161.377C194.55 161.377 218 137.927 218 109C218 80.073 194.55 56.6234 165.623 56.6234C163.278 56.6234 161.377 54.722 161.377 52.3766C161.377 23.4498 137.927 0 109 0Z", aspectRatio: { width: 218, height: 218 }, width: h, height: i2 }), softStar: ({ width: h, height: i2 }) => t({ path: "M130.424 3.17662C130.927 -1.05888 137.073 -1.05888 137.576 3.17662L141.792 38.7086C147.236 84.59 183.41 120.764 229.291 126.208L264.823 130.424C269.059 130.927 269.059 137.073 264.823 137.576L229.291 141.792C183.41 147.236 147.236 183.41 141.792 229.291L137.576 264.823C137.073 269.059 130.927 269.059 130.424 264.823L126.208 229.291C120.764 183.41 84.59 147.236 38.7086 141.792L3.17662 137.576C-1.05888 137.073 -1.05888 130.927 3.17662 130.424L38.7086 126.208C84.59 120.764 120.764 84.59 126.208 38.7086L130.424 3.17662Z", aspectRatio: { width: 268, height: 268 }, width: h, height: i2 }), stairs1: ({ width: h, height: i2 }) => t({ path: "M0 0H67.667V67.667H135.333V135.333H203V203H0V0Z", aspectRatio: { width: 203, height: 203 }, width: h, height: i2 }), stairs2: ({ width: h, height: i2 }) => t({ path: "M50 0H0V200H200V150H150V100H100V50H50V0Z", aspectRatio: { width: 200, height: 200 }, width: h, height: i2 }), teewee: ({ width: h, height: i2 }) => t({ path: "M69 0H138V69H207V138H138H69H0V69H69V0Z", aspectRatio: { width: 207, height: 138 }, width: h, height: i2 }), blob1: ({ width: h, height: i2 }) => t({ path: "M172.979 19.611C191.285 33.0858 204.505 54.442 210.861 78.5949C217.471 103.002 217.471 130.46 205.776 151.816C194.335 173.427 171.454 189.444 147.047 196.054C122.639 202.919 96.7069 200.631 75.3506 190.715C54.2486 180.546 37.7229 163.003 23.4855 142.155C9.5022 121.307 -2.19289 97.4087 0.349524 74.7813C3.14617 52.1538 19.9261 30.7976 40.2654 17.8313C60.6046 4.61077 84.5033 -0.474048 108.148 0.0344341C131.538 0.542916 154.928 6.13621 172.979 19.611Z", aspectRatio: { width: 216, height: 200 }, width: h, height: i2 }), blob10: ({ width: h, height: i2 }) => t({ path: "M188.684 8.95173C205.601 24.3309 200.988 63.0866 191.453 99.3816C182.225 135.677 168.076 169.511 146.238 175.355C124.399 181.507 94.871 159.668 66.5733 143.059C37.9679 126.449 10.5929 115.068 2.59569 95.0754C-5.4015 75.0824 5.97912 46.1694 24.4342 30.4826C42.8893 14.7958 68.4188 12.0276 100.715 6.79864C132.704 1.5697 171.767 -6.42749 188.684 8.95173Z", aspectRatio: { width: 200, height: 177 }, width: h, height: i2 }), blob11: ({ width: h, height: i2 }) => t({ path: "M137.368 29.4923C148.97 46.7605 146.542 72.1231 148.161 99.1046C149.779 126.086 155.715 154.956 144.113 174.383C132.781 193.81 103.911 203.793 80.4369 198.666C56.963 193.27 38.6156 173.034 28.3626 153.607C17.8398 134.181 15.4115 115.833 9.47555 91.5498C3.53961 67.2664 -5.63411 37.3169 4.61887 20.0488C15.1417 2.51078 45.0911 -1.80626 72.8821 0.622074C100.673 2.78059 126.036 12.2241 137.368 29.4923Z", aspectRatio: { width: 152, height: 200 }, width: h, height: i2 }), blob12: ({ width: h, height: i2 }) => t({ path: "M158.391 17.923C172.491 28.5703 180.261 48.1384 187.743 70.5842C194.937 93.3177 202.419 118.641 194.649 138.785C187.167 158.928 164.146 173.317 138.535 184.54C112.923 196.05 84.4347 204.108 58.8235 197.777C33.2123 191.446 10.191 170.439 2.99688 146.267C-4.48504 121.807 3.57241 94.181 10.4788 68.282C17.0974 42.0953 22.565 17.6352 37.8166 7.27563C53.0682 -3.37171 78.1038 0.081487 100.837 2.67138C123.859 5.26127 144.29 7.27563 158.391 17.923Z", aspectRatio: { width: 198, height: 200 }, width: h, height: i2 }), blob13: ({ width: h, height: i2 }) => t({ path: "M149.668 1.37595C170.663 5.22017 193.728 17.3442 198.755 34.7911C204.078 52.2379 191.363 75.3032 178.943 93.9329C166.819 112.563 154.99 126.757 140.501 145.386C126.011 164.312 108.86 187.673 92.5957 186.194C76.3317 185.011 60.9549 159.285 45.8737 140.655C30.4968 122.321 15.7114 110.788 7.43151 95.1157C-0.848339 79.4432 -2.32688 59.0392 3.5873 41.5924C9.50148 23.8498 23.1041 8.76868 38.7767 3.44592C54.745 -1.87685 73.3746 2.55879 91.7086 2.26308C110.338 2.26308 128.968 -2.17256 149.668 1.37595Z", aspectRatio: { width: 200, height: 187 }, width: h, height: i2 }), blob14: ({ width: h, height: i2 }) => t({ path: "M137.838 28.6426C150.711 40.5617 165.014 46.5213 178.363 58.2021C191.474 69.8828 203.87 87.0464 198.864 99.6807C193.858 112.315 171.689 120.42 157.862 135.676C144.275 151.171 139.269 173.579 126.873 182.161C114.477 190.505 94.9294 185.022 76.8123 178.109C58.4568 171.196 41.5316 163.091 28.1822 150.456C14.5943 137.822 4.58225 120.42 1.24488 101.826C-2.09248 83.2322 1.00651 62.9697 13.8792 52.4809C26.7519 41.992 49.1598 41.0385 65.6083 30.788C82.0567 20.5376 92.0688 0.990158 103.034 0.0366268C113.762 -0.916905 125.204 16.9618 137.838 28.6426Z", aspectRatio: { width: 200, height: 187 }, width: h, height: i2 }), blob15: ({ width: h, height: i2 }) => t({ path: "M185.203 1.52939C197.679 7.62217 200 32.2835 200 51.7223C200 71.1612 197.389 85.3777 197.679 100.175C198.259 114.681 201.741 129.768 198.259 143.114C194.778 156.46 184.623 168.356 171.567 173.868C158.801 179.671 143.134 179.091 130.368 174.739C117.312 170.387 106.867 162.263 86.8482 160.812C66.539 159.362 36.9454 164.294 18.9572 155.3C0.968966 146.306 -5.41395 123.095 5.03083 105.977C15.4756 88.5692 42.4579 77.5442 55.5139 59.5559C68.2798 41.8578 67.1192 17.4867 76.9837 9.6531C86.5581 2.10965 107.158 11.3939 128.627 9.6531C150.097 8.20244 172.728 -4.27327 185.203 1.52939Z", aspectRatio: { width: 200, height: 179 }, width: h, height: i2 }), blob16: ({ width: h, height: i2 }) => t({ path: "M158.441 55.3221C167.253 80.2399 160.264 105.462 147.501 134.938C134.738 164.717 116.81 199.055 97.0576 199.967C77.3057 201.182 55.7305 168.668 34.4592 133.722C13.1879 99.0802 -7.77953 62.3112 2.85612 36.4818C13.4918 10.6523 56.0344 -3.93369 90.0685 0.928322C123.799 6.09421 149.324 30.7081 158.441 55.3221Z", aspectRatio: { width: 163, height: 200 }, width: h, height: i2 }), blob17: ({ width: h, height: i2 }) => t({ path: "M168.917 36.7587C178.871 53.2457 175.138 76.5764 172.961 106.129C170.472 135.37 169.85 170.832 150.563 187.63C131.276 204.739 93.3252 203.495 65.0173 187.63C36.7095 172.077 18.0449 142.213 7.77943 107.373C-2.79714 72.2213 -4.35252 32.7147 14.312 14.0502C32.9765 -4.3033 72.1721 -1.50361 103.591 4.7179C135.32 10.6283 158.962 20.2717 168.917 36.7587Z", aspectRatio: { width: 176, height: 200 }, width: h, height: i2 }), blob18: ({ width: h, height: i2 }) => t({ path: "M178.188 21.1464C193.012 36.3069 196.381 62.9219 198.739 88.1893C200.76 113.12 201.771 136.366 190.316 149.168C178.862 162.307 155.279 164.665 135.065 167.697C115.188 170.73 99.0168 174.098 72.4018 177.131C46.1237 180.163 9.40176 182.521 1.65309 168.371C-6.09559 154.221 15.4659 123.564 23.5515 92.9059C31.6371 62.2481 26.2467 31.2534 38.3751 15.4192C50.1665 -0.0781831 79.8136 -1.08888 107.776 0.595609C136.076 1.9432 163.028 5.64909 178.188 21.1464Z", aspectRatio: { width: 200, height: 180 }, width: h, height: i2 }), blob19: ({ width: h, height: i2 }) => t({ path: "M148.621 13.3857C171.945 24.3818 194.937 41.3756 192.938 60.702C190.605 80.3615 163.282 101.687 149.953 123.346C136.958 145.005 137.958 166.664 128.295 174.661C118.631 182.325 98.3054 175.994 73.6476 181.991C48.9899 187.989 20.0004 205.983 11.0036 197.986C1.67366 189.989 12.6697 156.001 12.3365 131.343C12.0033 106.685 0.340809 91.0243 0.00759636 75.0301C-0.325616 59.0359 10.3372 42.3753 25.3318 28.7135C39.9931 15.0518 58.9863 4.05578 80.3119 1.05687C101.638 -2.27526 124.962 2.38972 148.621 13.3857Z", aspectRatio: { width: 194, height: 200 }, width: h, height: i2 }), blob2: ({ width: h, height: i2 }) => t({ path: "M140.464 18.6393C156.081 28.3718 169.887 39.9149 178.714 54.853C187.541 69.5649 191.389 87.6717 189.578 104.421C187.768 121.396 180.525 137.239 172.377 153.535C164.455 169.832 155.854 186.58 142.048 194.276C128.241 201.971 109.456 200.613 92.4804 197.671C75.2789 194.502 60.1144 189.749 45.1762 182.733C30.4644 175.716 16.2052 166.21 8.28346 153.083C0.361703 139.729 -1.44898 122.527 1.04072 106.91C3.30408 91.2931 9.64147 76.8076 15.9789 60.5114C22.0899 44.2153 28.201 26.1084 40.6495 14.7916C53.0979 3.24849 71.8838 -1.27823 89.7643 0.306124C107.871 1.66414 124.846 9.13322 140.464 18.6393Z", aspectRatio: { width: 191, height: 200 }, width: h, height: i2 }), blob20: ({ width: h, height: i2 }) => t({ path: "M150.035 13.2464C157.376 24.9386 153.026 48.323 157.92 65.7254C163.087 83.1277 177.498 94.2761 182.392 108.415C187.287 122.555 182.392 139.957 173.147 156.272C163.63 172.587 149.763 187.814 132.089 195.155C114.414 202.225 93.2053 201.137 73.6276 194.611C54.3219 188.357 36.9196 176.937 25.7712 161.438C14.8947 145.667 10.5441 126.09 5.92163 105.696C1.57105 85.0311 -3.05145 63.5501 2.65869 45.0601C8.64075 26.5701 24.6835 11.0711 43.1735 4.54524C61.6635 -1.98064 82.6007 0.194657 102.722 1.01039C122.844 1.82613 142.421 1.55421 150.035 13.2464Z", aspectRatio: { width: 185, height: 200 }, width: h, height: i2 }), blob21: ({ width: h, height: i2 }) => t({ path: "M152.611 0.184799C172.596 -0.723643 197.73 1.39606 199.85 13.8114C201.969 26.2268 181.075 48.9379 174.716 68.0151C168.357 87.0924 176.533 102.536 174.11 114.649C171.991 127.064 159.575 136.148 146.252 139.782C132.928 143.719 118.696 141.902 105.977 139.176C93.562 136.451 82.6606 132.212 63.2805 131.909C43.9004 131.606 16.0416 135.24 5.44306 125.853C-5.15543 116.465 1.50648 94.0572 10.2881 76.4939C18.7669 59.2335 29.6682 46.8182 38.7526 35.3112C48.1398 23.5015 56.3158 12.903 66.9143 8.36078C77.5128 4.12138 91.1394 6.24108 104.766 5.63546C118.696 4.72701 132.928 1.09324 152.611 0.184799Z", aspectRatio: { width: 200, height: 143 }, width: h, height: i2 }), blob22: ({ width: h, height: i2 }) => t({ path: "M195.507 15.5715C206.818 33.1668 193.622 69.3001 190.166 101.663C186.71 134.34 193.308 163.561 181.996 178.014C170.685 192.153 141.464 191.525 114.443 189.326C87.1072 187.44 62.2852 183.67 40.6052 169.531C19.2395 155.077 1.6441 130.255 0.0730908 103.862C-1.18372 77.4694 13.898 49.5054 35.2638 31.91C56.6296 14.0004 84.5936 6.45958 116.328 2.37494C148.063 -1.70969 184.196 -2.3381 195.507 15.5715Z", aspectRatio: { width: 200, height: 191 }, width: h, height: i2 }), blob23: ({ width: h, height: i2 }) => t({ path: "M135.742 9.14189C157.815 19.2326 179.258 38.4681 176.105 56.7576C172.951 74.7317 145.202 92.0751 127.858 109.734C110.83 127.077 104.523 145.052 87.4953 164.918C70.4672 184.468 42.7177 206.227 27.5816 198.343C12.4455 190.46 9.60747 153.566 6.45411 126.762C2.98542 100.274 -0.798607 84.1917 0.147399 67.1636C0.77807 50.4508 6.76944 32.4767 19.0675 20.8093C31.0503 9.14189 49.6551 3.78119 70.4672 1.2585C90.964 -1.26418 113.668 -0.633508 135.742 9.14189Z", aspectRatio: { width: 177, height: 200 }, width: h, height: i2 }), blob24: ({ width: h, height: i2 }) => t({ path: "M165.663 24.3715C171.555 44.4059 158.003 76.2254 151.816 96.2598C145.923 116.294 147.691 124.544 148.28 135.445C148.575 146.346 147.396 159.309 140.62 170.8C133.549 181.996 120.88 191.424 104.381 196.432C87.8821 201.441 67.553 202.03 54.8841 192.602C41.9207 183.469 36.6174 164.023 25.1271 143.105C13.3421 122.187 -4.33535 99.7953 0.967891 85.0641C6.27113 70.6275 34.2604 63.8511 56.0626 48.5307C77.5702 33.5048 92.8907 9.93489 113.22 2.56928C133.843 -4.79633 159.77 4.04241 165.663 24.3715Z", aspectRatio: { width: 168, height: 200 }, width: h, height: i2 }), blob25: ({ width: h, height: i2 }) => t({ path: "M180.115 1.256C192.651 2.1962 189.83 34.163 190.771 58.2947C191.711 82.4265 196.098 98.4099 198.606 117.214C201.113 136.018 201.426 157.642 189.204 165.791C177.294 173.626 153.163 167.671 135.299 163.91C117.749 159.836 106.466 157.956 85.7818 162.97C65.0974 168.298 35.3244 180.521 18.7143 174.253C1.79068 167.985 -1.97012 142.913 0.850478 120.975C3.67107 99.0367 13.0731 79.6059 18.4009 54.8473C23.7287 30.0888 24.9823 -0.310996 40.0254 0.00240332C54.7552 0.00240332 82.9612 31.029 111.167 31.029C139.373 31.029 167.579 0.315802 180.115 1.256Z", aspectRatio: { width: 200, height: 176 }, width: h, height: i2 }), blob26: ({ width: h, height: i2 }) => t({ path: "M142.571 0.586925C159.976 3.39414 176.258 15.1844 184.96 30.9048C193.662 46.6253 194.224 66.8372 189.171 83.6805C183.837 100.805 172.327 114.56 163.064 129.157C153.8 143.755 146.501 158.914 134.43 173.231C122.359 187.828 105.516 201.303 89.5146 199.899C73.2327 198.776 58.0738 182.775 42.9148 169.862C28.0366 157.23 13.7198 147.685 6.42103 134.491C-0.877729 121.297 -1.15845 103.892 1.64876 88.4528C4.45598 72.7324 10.0704 58.6963 18.4921 47.4674C27.1944 36.2386 38.4233 27.8169 50.4943 22.2025C62.846 16.3073 75.7592 13.5001 91.1989 8.72785C106.919 4.23631 125.166 -1.93957 142.571 0.586925Z", aspectRatio: { width: 193, height: 200 }, width: h, height: i2 }), blob27: ({ width: h, height: i2 }) => t({ path: "M112.602 54.9337C129.225 71.8646 155.391 78.9448 158.777 89.719C162.471 100.493 143.693 114.654 127.07 135.586C110.447 156.519 96.2866 184.224 71.0442 194.998C46.1096 205.465 10.4008 199.308 2.0893 178.375C-6.22223 157.443 12.5557 121.734 18.4045 92.1817C24.5612 62.6296 17.7889 38.9263 26.4082 21.9954C34.7197 5.06454 58.423 -5.40183 73.5069 2.9097C88.8986 10.9134 95.9788 38.0028 112.602 54.9337Z", aspectRatio: { width: 160, height: 200 }, width: h, height: i2 }), blob28: ({ width: h, height: i2 }) => t({ path: "M125.281 68.5835C142.15 82.9923 165.344 90.021 181.862 108.998C198.028 127.624 207.516 158.902 192.405 166.634C177.293 174.716 137.581 159.605 112.629 156.442C87.326 152.928 77.1344 161.713 59.9142 165.579C43.0453 169.445 19.1478 168.391 11.7677 157.496C4.73907 146.25 14.2278 124.813 11.4163 94.2382C8.2534 63.6634 -6.85825 23.9514 3.68476 8.48836C14.2278 -7.32615 50.4254 1.10826 73.9715 16.2199C97.5175 31.683 108.412 54.1747 125.281 68.5835Z", aspectRatio: { width: 200, height: 169 }, width: h, height: i2 }), blob29: ({ width: h, height: i2 }) => t({ path: "M162.987 10.2348C169.16 25.1809 154.864 58.6471 147.066 79.4417C139.268 100.236 138.293 108.359 134.719 114.532C131.47 120.706 125.297 124.93 119.448 143.45C113.6 161.97 107.426 194.461 98.004 199.335C88.5814 204.209 75.5849 181.14 55.7651 167.494C35.6203 153.522 8.65241 148.648 1.8292 135.327C-4.994 122.33 8.65241 100.561 20.0244 82.041C31.3964 63.5208 40.1691 48.2498 53.4906 35.5782C66.8122 22.9065 84.0326 13.159 106.452 6.33584C128.871 -0.812285 156.489 -4.71127 162.987 10.2348Z", aspectRatio: { width: 165, height: 200 }, width: h, height: i2 }), blob3: ({ width: h, height: i2 }) => t({ path: "M158.095 64.2637C176.543 95.19 192.277 129.1 181.697 155.686C171.117 182.001 133.951 201.533 99.4982 199.905C64.7739 198.549 33.0338 176.032 15.4004 145.377C-2.23296 114.994 -5.75963 76.2002 10.2461 46.6303C26.2518 17.0605 61.5185 -3.557 89.732 0.512241C118.217 4.58149 139.377 33.0662 158.095 64.2637Z", aspectRatio: { width: 186, height: 200 }, width: h, height: i2 }), blob30: ({ width: h, height: i2 }) => t({ path: "M146.076 34.4585C157.052 54.582 155.833 80.1936 164.675 100.622C173.212 121.355 191.201 136.905 189.372 149.711C187.542 162.212 165.285 171.969 146.99 175.018C129.001 178.372 114.671 174.713 103.39 175.018C92.1083 175.018 83.876 178.982 66.8015 186.299C49.7271 193.617 23.8105 204.288 14.3586 198.19C4.90665 191.787 11.6145 168.615 10.3949 147.882C8.87037 127.148 -0.581561 108.549 0.0282404 89.3407C0.638042 70.1319 11.6145 50.6182 28.384 32.934C44.8487 15.5546 67.4113 0.309578 89.974 0.00467694C112.537 -0.300224 135.099 14.335 146.076 34.4585Z", aspectRatio: { width: 190, height: 200 }, width: h, height: i2 }), blob31: ({ width: h, height: i2 }) => t({ path: "M134.218 44.0392C153.568 36.4264 184.97 26.9105 195.755 33.2544C206.222 39.9156 195.755 62.1194 181.481 76.3933C166.89 90.35 148.175 96.0596 145.638 116.36C143.1 136.661 156.74 171.235 151.664 183.923C146.589 196.928 123.434 187.413 105.036 178.531C86.6388 169.967 73.3165 161.72 52.0643 158.548C30.812 155.058 1.62986 156.644 0.0438693 145.225C-1.22492 133.806 25.4197 109.382 29.2261 86.8609C32.7152 64.3398 13.6834 44.0392 11.7802 26.9105C9.877 9.46461 24.7853 -4.80928 42.5484 1.53467C59.9942 7.87863 79.9777 34.5232 93.6172 45.308C107.257 56.4099 114.869 51.3347 134.218 44.0392Z", aspectRatio: { width: 200, height: 191 }, width: h, height: i2 }), blob32: ({ width: h, height: i2 }) => t({ path: "M200 100.339C200 149.831 145.763 197.966 95.5932 197.966C45.7627 197.966 0 149.831 0 100.339C0 50.8475 45.7627 0 95.5932 0C145.763 0 200 50.8475 200 100.339Z", aspectRatio: { width: 200, height: 198 }, width: h, height: i2 }), blob4: ({ width: h, height: i2 }) => t({ path: "M183.427 38.712C198.21 63.2519 196.141 95.1833 189.341 126.523C182.836 157.863 171.305 188.908 150.609 197.482C130.208 205.76 100.642 192.16 69.8936 177.968C39.4405 164.072 7.80478 150.176 1.30024 128.593C-5.2043 107.01 13.718 77.7393 35.3012 51.7211C56.5888 25.9986 81.1287 3.23272 108.921 0.276112C137.009 -2.38484 168.349 14.4678 183.427 38.712Z", aspectRatio: { width: 195, height: 200 }, width: h, height: i2 }), blob5: ({ width: h, height: i2 }) => t({ path: "M166.251 30.6913C183.816 48.5185 195.875 71.8512 199.021 98.8542C202.429 125.595 197.186 155.744 179.359 169.115C161.794 182.223 131.645 178.815 103.331 176.979C75.0171 175.144 48.8006 174.882 29.6625 161.512C10.7866 148.141 -0.748681 121.925 0.0378149 96.2326C0.824311 70.8025 14.1947 46.159 33.0706 28.3318C52.2087 10.5045 76.8522 -0.5064 100.971 0.0179307C125.091 0.804426 148.423 12.864 166.251 30.6913Z", aspectRatio: { width: 200, height: 179 }, width: h, height: i2 }), blob6: ({ width: h, height: i2 }) => t({ path: "M149.146 50.5452C161.911 68.0278 171.901 81.9028 176.619 97.9979C181.336 114.37 180.781 133.241 173.011 149.891C165.519 166.541 151.366 180.693 133.051 189.851C114.736 199.008 92.2586 202.893 71.446 197.621C50.6334 192.348 30.9308 177.918 18.1658 158.216C5.12323 138.791 -0.981801 113.815 0.128204 87.7304C1.51571 61.6453 10.6733 34.1726 29.2658 17.5226C48.1359 1.14999 76.996 -4.40004 98.9186 3.6475C120.841 11.695 136.381 32.7851 149.146 50.5452Z", aspectRatio: { width: 180, height: 200 }, width: h, height: i2 }), blob7: ({ width: h, height: i2 }) => t({ path: "M158.662 41.8295C178.593 57.8305 204.138 64.5677 213.402 79.7266C222.666 94.6047 215.367 118.466 203.015 135.028C190.383 151.871 172.698 161.977 156.416 168.434C140.134 174.89 124.975 177.697 104.483 185.277C83.9903 192.856 58.1642 205.208 44.9704 197.629C31.4959 190.33 31.2152 163.1 21.9514 138.116C12.9684 112.851 -4.71688 90.1132 1.17822 75.5158C7.35404 61.1991 36.8295 55.5847 58.7256 40.1452C80.9024 24.7056 95.4998 -0.278374 109.816 0.00234533C124.414 0.283064 138.45 25.8285 158.662 41.8295Z", aspectRatio: { width: 218, height: 200 }, width: h, height: i2 }), blob8: ({ width: h, height: i2 }) => t({ path: "M153.53 11.0108C168.179 18.1858 181.931 29.5461 192.993 44.4939C203.755 59.4417 212.425 78.2759 210.631 96.5122C209.136 114.748 197.477 132.088 182.529 142.252C167.581 152.716 148.747 156.004 128.717 168.262C108.687 180.22 87.1622 201.147 69.8228 199.951C52.7823 198.456 39.6283 174.54 32.4533 153.015C25.2784 131.49 24.0826 112.357 16.6087 91.131C9.13477 70.2041 -4.31825 46.8855 1.36191 31.9377C7.04207 16.691 31.8554 9.51607 52.7823 5.33069C73.4103 0.846349 90.4507 -0.648433 106.594 0.248435C123.037 1.1453 138.882 4.13486 153.53 11.0108Z", aspectRatio: { width: 211, height: 200 }, width: h, height: i2 }), blob9: ({ width: h, height: i2 }) => t({ path: "M140.289 20.2182C156.96 27.7956 176.661 32.0895 189.29 43.9608C201.667 55.5796 206.718 75.0283 202.424 91.6987C198.131 108.622 184.491 122.766 175.651 140.952C166.81 158.885 162.769 180.607 150.393 191.216C138.016 201.824 117.052 201.572 98.866 197.025C80.6802 192.479 65.2727 183.891 48.3497 175.808C31.4268 167.726 13.2409 160.148 5.1583 146.761C-2.67172 133.122 -0.398493 113.673 4.14797 96.7504C8.69444 80.08 15.5141 65.6828 23.3442 52.296C31.4268 38.6566 40.5197 25.775 52.6436 15.6717C65.0201 5.82101 80.6802 -1.50385 95.3299 0.264221C109.98 1.77971 123.619 12.6407 140.289 20.2182Z", aspectRatio: { width: 204, height: 200 }, width: h, height: i2 }) };
function subTypeToPathDataFunc(t2) {
  return TYPES[t2] || rectData;
}
function figureToSvg(t2) {
  const { subType: h } = t2, i2 = subTypeToPathDataFunc(h);
  return i2 ? function(t3, h2) {
    const { width: i3, height: C, fill: e5, stroke: a, strokeWidth: g2, dash: d4 } = t3, w2 = (d4 || []).map((t4) => t4 * g2);
    let o2 = h2(t3), p4 = 1, L = 1;
    "string" != typeof o2 && (p4 = o2.scaleX, L = o2.scaleY, o2 = o2.path);
    const s = `clip-${t3.id || Math.random()}`;
    return `
    <svg xmlns="http://www.w3.org/2000/svg" width="${i3}" height="${C}">
    <defs>
    <clipPath id="${s}">
      <path d="${o2}" />
    </clipPath>
  </defs>

  <!-- Path for the fill -->
  <path d="${o2}" fill="${e5}" transform="scale(${p4}, ${L})"/>

  <!-- Path for the stroke, clipped by the star path -->
  <path d="${o2}" fill="none" stroke="${a}" stroke-width="${2 * g2}" clip-path="url(#${s})" transform="scale(${p4}, ${L})" stroke-dasharray="${w2.join(" ")}"/>
    </svg>
  `;
  }(t2, i2) : (console.error(`Polotno error: Can not convert ${t2.subType} figure to svg.`), rectData(t2));
}

// node_modules/polotno/utils/filters.js
var Effects;
!function(t2) {
  t2.sepia = "sepia", t2.grayscale = "grayscale", t2.natural = "natural", t2.warm = "warm", t2.cold = "cold", t2.temperature = "temperature", t2.contrast = "contrast", t2.shadows = "shadows", t2.white = "white", t2.black = "black", t2.vibrance = "vibrance", t2.saturation = "saturation";
}(Effects || (Effects = {}));
function shapeFilterToCSS(t2, e5) {
  let n = { filter: "", html: void 0 };
  switch (t2) {
    case Effects.warm: {
      const t3 = Math.max(0, Math.min(1, null != e5 ? e5 : 0.5)), r = 1 + 0.3 * t3, l = 1 + 0.15 * t3, a = 1;
      return n.filter = "url(#warm-filter)", n.html = `
        <svg xmlns="http://www.w3.org/2000/svg" style="display:none">
          <filter id="warm-filter" color-interpolation-filters="sRGB">
            <feColorMatrix type="matrix" values="
              ${r} 0   0   0   0
              0   ${l} 0   0   0
              0   0   ${a} 0   0
              0   0   0   1   0" />
          </filter>
        </svg>`, n;
    }
    case Effects.cold: {
      const t3 = Math.max(0, Math.min(1, null != e5 ? e5 : 0.5)), r = 1 - 0.15 * t3, l = 1 - 0.1 * t3, a = 1 + 0.15 * t3;
      return n.filter = "url(#cold-filter)", n.html = `
        <svg xmlns="http://www.w3.org/2000/svg" style="display:none">
          <filter id="cold-filter" color-interpolation-filters="sRGB">
            <feColorMatrix type="matrix" values="
              ${r} 0   0   0   0
              0   ${l} 0   0   0
              0   0   ${a} 0   0
              0   0   0   1   0" />
          </filter>
        </svg>`, n;
    }
    case "natural": {
      const t3 = Math.max(0, Math.min(1, null != e5 ? e5 : 0.5)), r = 1 + 0.1 * t3, l = 1 + 0.3 * t3, a = 1 + 0.2 * t3;
      return n.filter = `saturate(${l}) brightness(${r}) contrast(${a})`, n;
    }
    case Effects.temperature: {
      const t3 = Math.max(-1, Math.min(1, null != e5 ? e5 : 0)), r = 1 + 0.15 * t3, l = 1, a = 1 - 0.15 * t3;
      return n.filter = "url(#temperature-filter)", n.html = `
                  <svg xmlns="http://www.w3.org/2000/svg" style="display:none">
                    <filter id="temperature-filter" color-interpolation-filters="sRGB">
                      <feColorMatrix type="matrix" values="
                        ${r} 0   0   0   0
                        0   ${l} 0   0   0
                        0   0   ${a} 0   0
                        0   0   0   1   0" />
                    </filter>
                  </svg>
                  `, n;
    }
    case Effects.contrast: {
      const t3 = 100 * Math.max(-1, Math.min(1, null != e5 ? e5 : 0)), r = 259 * (t3 + 255) / (255 * (259 - t3)), l = 0.5 * (1 - r);
      return n.filter = "url(#contrast-filter)", n.html = `
    <svg xmlns="http://www.w3.org/2000/svg" style="display:none">
      <filter id="contrast-filter" color-interpolation-filters="sRGB">
        <feComponentTransfer>
          <feFuncR type="linear" slope="${r}" intercept="${l}" />
          <feFuncG type="linear" slope="${r}" intercept="${l}" />
          <feFuncB type="linear" slope="${r}" intercept="${l}" />
        </feComponentTransfer>
      </filter>
    </svg>
  `, n;
    }
    case Effects.shadows: {
      const t3 = Math.max(-1, Math.min(1, null != e5 ? e5 : 0)), r = Math.min(Math.max(1 - 0.6 * t3, 0.4), 2.5);
      return n.filter = "url(#shadows-filter)", n.html = `
    <svg xmlns="http://www.w3.org/2000/svg" style="display:none">
      <filter id="shadows-filter" color-interpolation-filters="sRGB">
        <feComponentTransfer>
          <feFuncR type="gamma" amplitude="1" exponent="${r}" offset="0" />
          <feFuncG type="gamma" amplitude="1" exponent="${r}" offset="0" />
          <feFuncB type="gamma" amplitude="1" exponent="${r}" offset="0" />
        </feComponentTransfer>
      </filter>
    </svg>
  `, n;
    }
    case Effects.white:
    case Effects.black:
      return null;
    case Effects.vibrance: {
      const t3 = Math.max(-1, Math.min(1, null != e5 ? e5 : 0)), r = 0.299, l = 0.587, a = 0.114;
      let s;
      s = t3 >= 0 ? 1 + 1.5 * t3 : 1 + t3;
      const i2 = 1 - s, o2 = i2 * r + s, f3 = i2 * l, c2 = i2 * a, m3 = i2 * r, p4 = i2 * l + s, u3 = i2 * a, h = i2 * r, w2 = i2 * l, $2 = i2 * a + s;
      return n.filter = "url(#vibrance-filter)", n.html = `
    <svg xmlns="http://www.w3.org/2000/svg" style="display:none">
      <filter id="vibrance-filter" color-interpolation-filters="sRGB">
        <feColorMatrix type="matrix" values="
          ${o2} ${f3} ${c2} 0 0
          ${m3} ${p4} ${u3} 0 0
          ${h} ${w2} ${$2} 0 0
          0     0     0     1 0" />
      </filter>
    </svg>
  `, n;
    }
    case Effects.saturation: {
      const t3 = 0.2126, r = 0.7152, l = 0.0722, a = 1 + Math.max(-1, Math.min(1, null != e5 ? e5 : 0)), s = 1 - a, i2 = s * t3 + a, o2 = s * r, f3 = s * l, c2 = s * t3, m3 = s * r + a, p4 = s * l, u3 = s * t3, h = s * r, w2 = s * l + a;
      return n.filter = "url(#saturation-filter)", n.html = `
    <svg xmlns="http://www.w3.org/2000/svg" style="display:none">
      <filter id="saturation-filter" color-interpolation-filters="sRGB">
        <feColorMatrix type="matrix" values="
          ${i2} ${o2} ${f3} 0 0
          ${c2} ${m3} ${p4} 0 0
          ${u3} ${h} ${w2} 0 0
          0     0     0     1 0" />
      </filter>
    </svg>
  `, n;
    }
    default:
      return null;
  }
}

// node_modules/polotno/utils/to-html.js
var e = function(e5, t2) {
  var o2 = {};
  for (var i2 in e5) {
    Object.prototype.hasOwnProperty.call(e5, i2) && t2.indexOf(i2) < 0 && (o2[i2] = e5[i2]);
  }
  if (null != e5 && "function" == typeof Object.getOwnPropertySymbols) {
    var n = 0;
    for (i2 = Object.getOwnPropertySymbols(e5); n < i2.length; n++) {
      t2.indexOf(i2[n]) < 0 && Object.prototype.propertyIsEnumerable.call(e5, i2[n]) && (o2[i2[n]] = e5[i2[n]]);
    }
  }
  return o2;
};
var p = (e5, t2, ...o2) => ({ type: e5, props: t2, children: o2 || [] });
var d2 = async ({ element: e5, page: t2, store: n }) => {
  let { src: r } = e5;
  if ("svg" === e5.type && Object.keys(e5.colorsReplace).length) {
    const t3 = await urlToString(r);
    r = replaceColors(t3, new Map(Object.entries(e5.colorsReplace)));
  }
  let s = "";
  e5.flipX && (s += "scaleX(-1)"), e5.flipY && (s += "scaleY(-1)"), s || (s = "none");
  const a = {};
  if (e5.clipSrc) {
    const t3 = await urlToBase64(e5.clipSrc);
    a["clip-path"] = `url(${t3})`;
  }
  const l = await loadImage(r), h = l.width * e5.cropWidth, d4 = l.height * e5.cropHeight, c2 = e5.width / e5.height;
  let g2, u3;
  const m3 = h / d4;
  "svg" === e5.type ? (g2 = h, u3 = d4) : c2 >= m3 ? (g2 = h, u3 = h / c2) : (g2 = d4 * c2, u3 = d4);
  const f3 = g2 / l.width, b = u3 / l.height, y3 = g2 / u3 > e5.width / e5.height ? e5.height / u3 : e5.width / g2, w2 = g2 * y3 / f3, x = u3 * y3 / b, $2 = e5.cropX * y3 * l.width, k = e5.cropY * y3 * l.height;
  return p("div", { style: Object.assign(Object.assign({}, a), { width: "100%", height: "100%", borderRadius: e5.cornerRadius + "px", border: e5.borderSize ? `${e5.borderSize}px solid ${e5.borderColor}` : "none", backgroundRepeat: "no-repeat", backgroundImage: `url(${r})`, transform: s, backgroundSize: `${Math.round(w2)}px ${Math.round(x)}px`, backgroundPositionX: -Math.round($2) + "px", backgroundPositionY: -Math.round(k) + "px" }) });
};
var c = ({ element: e5, type: t2 }) => {
  const o2 = { "stroke-width": e5.height, stroke: e5.color, "line-cap": "round", "stroke-linejoin": "round", opacity: e5.opacity };
  return "arrow" === t2 || "triangle" === t2 ? p("polyline", Object.assign({ points: `${3 * e5.height},${2 * -e5.height} 0,0 ${3 * e5.height},${2 * e5.height}` }, o2)) : "bar" === t2 ? p("polyline", Object.assign({ points: `0,${2 * -e5.height} 0,${2 * e5.height}` }, o2)) : "circle" === t2 ? p("circle", Object.assign({ r: e5.height }, o2)) : "square" === t2 ? p("polyline", Object.assign({ points: `${-e5.height},${-e5.height} ${-e5.height},${e5.height} ${e5.height},${e5.height} ${e5.height},${-e5.height}` }, o2)) : null;
};
var g = { image: d2, svg: d2, text: async ({ element: e5, page: t2, store: o2 }) => {
  let i2 = { top: 0, left: 0 };
  e5.fill.indexOf("gradient") >= 0 && (i2 = Object.assign(Object.assign({}, i2), { backgroundColor: e5.fill, backgroundImage: e5.fill, backgroundClip: "text", WebkitBackgroundClip: "text", WebkitTextFillColor: "transparent" }));
  const n = e5.backgroundPadding * (e5.fontSize * e5.lineHeight), s = p("div", { style: { position: "absolute", top: -n / 2 + "px", left: -n / 2 + "px", display: e5.backgroundEnabled ? "block" : "none", width: e5.width + n + "px", height: e5.height + n + "px", backgroundColor: e5.backgroundColor, borderRadius: e5.backgroundCornerRadius * (e5.fontSize * e5.lineHeight * 0.5) + "px" } });
  "middle" === e5.verticalAlign ? (i2.top = "50%", i2.transform = "translateY(-50%)") : "bottom" === e5.verticalAlign && (i2.bottom = 0);
  const a = /<[a-z][\s\S]*>/i.test(e5.text), l = Object.assign(Object.assign({}, i2), { position: "absolute", width: e5.width + "px", color: e5.fill, whiteSpace: "pre-wrap", fontSize: e5.fontSize + "px", textAlign: e5.align, fontFamily: e5.fontFamily, textDecoration: e5.textDecoration || "none", textTransform: e5.textTransform || "none", lineHeight: e5.lineHeight, letterSpacing: e5.letterSpacing + "em", fontStyle: e5.fontStyle, fontWeight: e5.fontWeight, WebkitTextStroke: `${e5.strokeWidth}px ${e5.stroke}`, textStroke: `${e5.strokeWidth}px ${e5.stroke}` }), h = "el-" + e5.id, d4 = a ? { id: h } : {}, c2 = `<style>#${h} {${resetStyleContent}}</style>`, g2 = p("div", Object.assign(Object.assign({ style: l }, d4), { innerHTML: a ? `${c2}${e5.text}` : e5.text.split("\n").join("<br />") }));
  return p("div", { style: { position: "relative", width: "100%", height: "100%" } }, s, g2);
}, line: async ({ element: e5, page: t2, store: o2 }) => p("svg", { style: { width: "100%", height: "100%", contain: "layout style size", overflow: "visible" } }, p("rect", { x: 0, y: 0, width: e5.width, height: e5.height, fill: e5.color }), p("g", { transform: `translate(0 ${e5.height / 2})` }, c({ element: e5, type: e5.startHead })), p("g", { transform: `translate(${e5.width} ${e5.height / 2}) rotate(180)` }, c({ element: e5, type: e5.endHead }))), figure: async ({ element: e5, page: t2, store: o2, elementHook: i2 }) => {
  const r = figureToSvg(e5), s = p("div", { innerHTML: r });
  return i2 && i2({ dom: s, element: e5 }) || s;
}, group: async ({ element: e5, page: t2, store: o2, elementHook: i2 }) => {
  const n = await Promise.all(e5.children.map((e6) => u({ element: e6, page: t2, store: o2, elementHook: i2 }))), r = p("div", { style: { transformOrigin: "top left", opacity: e5.opacity } }, ...n);
  return i2 && i2({ dom: r, element: e5 }) || r;
}, video: async ({ element: e5, page: t2, store: o2, elementHook: i2 }) => {
  const { cropX: n, cropY: r, cropWidth: s, cropHeight: a } = e5, h = await getVideoSize(e5.src), d4 = h.width * s, c2 = h.height * a, g2 = e5.width / e5.height;
  let u3, m3;
  g2 >= d4 / c2 ? (u3 = d4, m3 = d4 / g2) : (u3 = c2 * g2, m3 = c2);
  const f3 = u3 / s, b = m3 / a, y3 = n * h.width, w2 = r * h.height, x = Math.max(e5.width / h.width, e5.height / h.height), $2 = { position: "absolute", width: `${Math.round(f3 * x)}px`, height: `${Math.round(b * x)}px`, left: -Math.round(y3 * x) + "px", top: -Math.round(w2 * x) + "px", objectFit: "fill" }, k = `video-${e5.id}`, j = p("div", { style: { position: "relative", width: "100%", height: "100%", overflow: "hidden", borderRadius: e5.cornerRadius + "px", border: e5.borderSize ? `${e5.borderSize}px solid ${e5.borderColor}` : "none" } }, p("video", { id: k, src: e5.src, style: $2, controls: true, playsInline: true, muted: true, volume: e5.volume }));
  return i2 && i2({ dom: j, element: e5 }) || j;
}, gif: d2 };
async function u({ element: e5, page: t2, store: o2, elementHook: i2 }) {
  let n = await g[e5.type];
  if (n || (n = () => p("div", {}), console.error(`HTML export does not support ${e5.type} type...`)), !e5.visible) {
    return null;
  }
  const r = await n({ element: e5, page: t2, store: o2 }), l = [], h = [];
  if (e5.blurEnabled && l.push(`blur(${e5.blurRadius / 2}px)`), e5.brightnessEnabled && l.push(`brightness(${100 * e5.brightness + 100}%)`), e5.sepiaEnabled && l.push("sepia()"), e5.grayscaleEnabled && l.push("grayscale()"), e5.filters) {
    for (const [p4, c2] of Object.entries(e5.filters)) {
      const e6 = shapeFilterToCSS(Effects[p4], c2.intensity);
      e6 && (l.push(e6.filter), e6.html && h.push(e6.html));
    }
  }
  e5.shadowEnabled && l.push(`drop-shadow(${e5.shadowOffsetX}px ${e5.shadowOffsetY}px ${e5.shadowBlur}px ${e5.shadowColor})`);
  const d4 = p("div", { id: e5.id, style: { position: "absolute", left: e5.x + "px", top: e5.y + "px", width: e5.width + "px", height: e5.height + "px", transform: `rotate(${e5.rotation}deg)`, transformOrigin: "top left", opacity: e5.opacity, display: e5.visible && e5.showInExport ? "block" : "none", filter: l.join(" ") || "none" } }, r, ...h);
  return i2 && i2({ dom: d4, element: e5 }) || d4;
}
async function jsonToDOM({ json: e5, elementHook: i2 }) {
  const n = await Promise.all(e5.pages.map((n2) => async function({ page: e6, store: i3, elementHook: n3 }) {
    const r2 = await Promise.all(e6.children.map((t2) => u({ element: t2, page: e6, store: i3, elementHook: n3 }))), s2 = "auto" === e6.width ? i3.width : e6.width, a = "auto" === e6.height ? i3.height : e6.height;
    let l = {};
    if (e6.background.indexOf("url") >= 0 || e6.background.indexOf("http") >= 0 || e6.background.indexOf(".jpg") >= 0 || e6.background.indexOf(".png") >= 0 || e6.background.indexOf(".jpeg") >= 0) {
      const { width: n4, height: l2 } = await loadImage(e6.background), h = await d2({ element: Object.assign({ x: 0, y: 0, width: s2, height: a, src: e6.background, cornerRadius: 0 }, getCrop({ width: s2, height: a }, { width: n4, height: l2 })), page: e6, store: i3 });
      r2.unshift(h);
    } else {
      l = Object.assign(Object.assign({}, l), { backgroundColor: e6.background });
    }
    return p("div", { className: "page", id: e6.id, style: Object.assign(Object.assign({}, l), { width: s2 + "px", height: a + "px", overflow: "hidden", position: "relative" }) }, ...r2);
  }({ page: n2, store: e5, elementHook: i2 }))), r = [];
  e5.pages.forEach((e6) => {
    e6.children.forEach((e7) => {
      "text" === e7.type && -1 === r.indexOf(e7.fontFamily) && r.push(e7.fontFamily);
    });
  });
  const s = r.map((t2) => e5.fonts.find((e6) => e6.fontFamily === t2) ? p("style", {}, "") : p("link", { href: getGoogleFontsUrl(t2), rel: "stylesheet" }));
  return p("div", { className: "design" }, ...s, ...n);
}
var m = ({ dom: t2 }) => {
  if ("string" == typeof t2) {
    return t2;
  }
  if (!t2) {
    return "";
  }
  const o2 = t2.props, { innerHTML: i2 } = o2, n = e(o2, ["innerHTML"]), r = Object.keys(n).map((e5) => "style" === e5 && "object" == typeof n[e5] ? `style="${Object.keys(n[e5]).map((t3) => `${t3.replace(/[A-Z]/g, (e6) => `-${e6.toLowerCase()}`)}: ${n[e5][t3]}`).join("; ")}"` : ((e6, t3) => "object" == typeof t3 ? `${e6}="${Object.keys(t3).map((e7) => `${e7.replace(/-([a-z])/g, (e8) => e8[1].toUpperCase())}:${t3[e7]};`).join(" ")}"` : `${e6}="${t3}"`)(e5, n[e5])).join(" ");
  return `<${t2.type} ${r}>${i2 || t2.children.map((e5) => m({ dom: e5 })).join("")}</${t2.type}>`;
};
async function jsonToHTML({ json: e5, elementHook: t2 }) {
  const o2 = await jsonToDOM({ json: e5, elementHook: t2 });
  return m({ dom: o2 });
}

// node_modules/polotno/utils/to-svg.js
var e2 = function(e5, t2) {
  var n = {};
  for (var r in e5) {
    Object.prototype.hasOwnProperty.call(e5, r) && t2.indexOf(r) < 0 && (n[r] = e5[r]);
  }
  if (null != e5 && "function" == typeof Object.getOwnPropertySymbols) {
    var i2 = 0;
    for (r = Object.getOwnPropertySymbols(e5); i2 < r.length; i2++) {
      t2.indexOf(r[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(e5, r[i2]) && (n[r[i2]] = e5[r[i2]]);
    }
  }
  return n;
};
var forEveryChild = (e5, t2) => {
  if (e5.children) {
    for (const n of e5.children) {
      if (true === t2(n)) {
        break;
      }
      forEveryChild(n, t2);
    }
  }
};
var p2 = (e5, t2, ...n) => ({ type: e5, props: t2, children: n || [] });
var f = async (e5) => {
  try {
    const t2 = await fetch(e5);
    if ("undefined" != typeof Buffer) {
      const e6 = await t2.arrayBuffer(), n = Buffer.from(e6).toString("base64");
      return `data:${t2.headers.get("content-type") || "image/png"};base64,${n}`;
    }
    {
      const e6 = await t2.blob();
      return new Promise((t3, n) => {
        const r = new FileReader();
        r.onloadend = () => t3(r.result), r.onerror = n, r.readAsDataURL(e6);
      });
    }
  } catch (t2) {
    return console.error("Error converting URL to data URL:", t2), e5;
  }
};
var m2 = async ({ element: e5, page: t2, store: n }) => {
  let { src: o2 } = e5;
  if ("svg" === e5.type) {
    const t3 = await urlToString(o2);
    o2 = replaceColors(t3, new Map(Object.entries(e5.colorsReplace)));
  } else {
    o2 = await f(o2);
  }
  let a, s, l, h, c2 = "";
  e5.flipX && (c2 += "scaleX(-1)"), e5.flipY && (c2 += "scaleY(-1)"), e5.clipSrc && (a = `clip-img-mask-${e5.id}`, s = await f(e5.clipSrc)), e5.maskSrc && (l = `mask-img-${e5.id}`, h = await f(e5.maskSrc));
  const g2 = await loadImage(o2), m3 = g2.width * e5.cropWidth, d4 = g2.height * e5.cropHeight, u3 = e5.width / e5.height;
  let y3, w2;
  const $2 = m3 / d4;
  "svg" === e5.type ? (y3 = m3, w2 = d4) : u3 >= $2 ? (y3 = m3, w2 = m3 / u3) : (y3 = d4 * u3, w2 = d4);
  const b = y3 / g2.width, x = w2 / g2.height, k = y3 / w2 > e5.width / e5.height ? e5.height / w2 : e5.width / y3, v = y3 * k / b, j = w2 * k / x, O = e5.cropX * g2.width * k, S = e5.cropY * g2.height * k, H = `clip-${e5.id}`, E = o2.replace(/&/g, "&amp;"), L = { x: -O, y: -S, width: v, height: j, preserveAspectRatio: "none", "clip-path": `url(#${H})` }, M = [p2("clipPath", { id: H }, p2("rect", { x: 0, y: 0, width: e5.width, height: e5.height }))];
  a && s && M.push(p2("mask", { id: a, maskUnits: "userSpaceOnUse", "mask-type": "alpha" }, p2("image", { href: s.replace(/&/g, "&amp;"), x: 0, y: 0, width: e5.width, height: e5.height, preserveAspectRatio: "none" }))), l && M.push(p2("mask", { id: l, maskUnits: "userSpaceOnUse", "mask-type": "alpha" }, p2("image", Object.assign({ href: E }, L))));
  let R = E;
  const T = {};
  l && h && (R = h.replace(/&/g, "&amp;"), T.mask = `url(#${l})`);
  const P = { style: { transform: c2 } };
  return a && (P.mask = `url(#${a})`), p2("g", P, p2("defs", {}, ...M), p2("image", Object.assign(Object.assign({ href: R }, L), T)));
};
var d3 = ({ element: e5, type: t2 }) => {
  const n = { "stroke-width": e5.height, stroke: e5.color, "line-cap": "round", "stroke-linejoin": "round", fill: e5.color };
  return "arrow" === t2 ? p2("polyline", Object.assign({ points: `${3 * e5.height},${2 * -e5.height} 0,0 ${3 * e5.height},${2 * e5.height}` }, n)) : "triangle" === t2 ? p2("polygon", Object.assign({ points: `${3 * e5.height},${2 * -e5.height} 0,0 ${3 * e5.height},${2 * e5.height}` }, n)) : "bar" === t2 ? p2("polyline", Object.assign({ points: `0,${2 * -e5.height} 0,${2 * e5.height}` }, n)) : "circle" === t2 ? p2("circle", Object.assign({ cx: 2 * e5.height, cy: 0, r: 2 * e5.height }, n)) : "square" === t2 ? p2("polygon", Object.assign({ points: `0,${2 * -e5.height} ${4 * e5.height},${2 * -e5.height} ${4 * e5.height},${2 * e5.height} 0,${2 * e5.height}` }, n)) : null;
};
var u2 = { image: m2, svg: m2, text: async ({ element: e5, page: t2, store: n }) => {
  const r = (e6, t3, n2, r2, i3, o3 = 0) => {
    const a2 = document.createElement("canvas").getContext("2d");
    return a2.font = `${i3} ${r2} ${t3}px ${n2}`, a2.measureText(e6).width + Math.max(0, (e6 ? e6.length : 0) - 1) * o3 * t3;
  }, i2 = (e6, t3, n2, i3, o3, a2, s2 = 0) => {
    const l2 = [];
    return e6.split("\n").forEach((e7) => {
      const h2 = e7.split(" ");
      let c3 = "";
      for (let g2 = 0; g2 < h2.length; g2++) {
        const e8 = c3 + h2[g2] + " ";
        r(e8, n2, i3, o3, a2, s2) > t3 + 0.5 && g2 > 0 ? (l2.push(c3.trim()), c3 = h2[g2] + " ") : c3 = e8;
      }
      l2.push(c3.trim());
    }), l2;
  };
  let o2 = removeTags(e5.text);
  "uppercase" == e5.textTransform && (o2 = o2.toUpperCase());
  let a = e5.fontSize, s = [];
  for (; ; ) {
    s = i2(o2, e5.width, a, e5.fontFamily, e5.fontWeight, e5.fontStyle, e5.letterSpacing);
    const t3 = Math.max(...s.map((t4) => r(t4, a, e5.fontFamily, e5.fontWeight, e5.fontStyle, e5.letterSpacing))), n2 = s.length * a * e5.lineHeight;
    if (t3 <= e5.width && n2 <= e5.height) {
      break;
    }
    if (a -= 1, a < 4) {
      break;
    }
  }
  const l = a * e5.lineHeight, h = s.length * l;
  let c2 = a;
  "middle" === e5.verticalAlign ? c2 = (e5.height - h) / 2 + a : "bottom" === e5.verticalAlign && (c2 = e5.height - h + a);
  const f3 = "center" === e5.align ? "middle" : "right" === e5.align ? "end" : "start", m3 = s.map((t3, n2) => p2("tspan", { x: "center" === e5.align ? e5.width / 2 : "right" === e5.align ? e5.width : 0, dy: 0 === n2 ? 0 : l, innerHTML: t3 }));
  return p2("g", {}, p2("text", { fill: e5.fill, y: c2, "font-size": a + "px", "text-anchor": f3, "font-family": e5.fontFamily, "font-style": e5.fontStyle, "font-weight": e5.fontWeight, "text-decoration": e5.textDecoration, "line-height": e5.lineHeight, "letter-spacing": e5.letterSpacing + "em", "stroke-width": e5.strokeWidth, stroke: e5.stroke }, ...m3));
}, line: async ({ element: e5, page: t2, store: n }) => p2("g", {}, p2("line", { x1: 0, y1: e5.height / 2, x2: e5.width, y2: e5.height / 2, stroke: e5.color, "stroke-width": e5.height, "stroke-dasharray": e5.dash && e5.dash.length ? e5.dash.map((t3) => t3 * e5.height).join(" ") : void 0 }), p2("g", { transform: `translate(0 ${e5.height / 2})` }, d3({ element: e5, type: e5.startHead })), p2("g", { transform: `translate(${e5.width} ${e5.height / 2}) rotate(180)` }, d3({ element: e5, type: e5.endHead }))), figure: async ({ element: e5, page: t2, store: n, elementHook: r }) => {
  const i2 = function(e6) {
    let t3 = e6.replace(/<svg[^>]*>/, "");
    return t3 = t3.replace(/<\/svg>/, ""), t3;
  }(figureToSvg(e5)), o2 = p2("g", { innerHTML: i2 });
  return r && r({ dom: o2, element: e5 }) || o2;
}, group: async ({ element: e5, page: t2, store: n, elementHook: r }) => {
  const i2 = await Promise.all(e5.children.map((e6) => y({ element: e6, page: t2, store: n, elementHook: r }))), o2 = p2("g", { style: { "transform-origin": "top left" } }, ...i2);
  return r && r({ dom: o2, element: e5 }) || o2;
}, gif: m2 };
async function y({ element: e5, page: t2, store: n, elementHook: r }) {
  var i2;
  let o2 = await u2[e5.type];
  o2 || (o2 = () => p2("g", {}), console.error(`SVG export does not support ${e5.type} type...`));
  const a = await o2({ element: e5, page: t2, store: n }), s = [], l = [];
  if (e5.blurEnabled && s.push(`blur(${e5.blurRadius / 2}px)`), e5.brightnessEnabled && s.push(`brightness(${100 * e5.brightness + 100}%)`), e5.sepiaEnabled && s.push("sepia()"), e5.grayscaleEnabled && s.push("grayscale()"), e5.shadowEnabled && s.push(`drop-shadow(${e5.shadowOffsetX}px ${e5.shadowOffsetY}px ${e5.shadowBlur}px ${e5.shadowColor})`), e5.filters) {
    for (const [p4, f3] of Object.entries(e5.filters)) {
      const e6 = shapeFilterToCSS(Effects[p4], f3.intensity);
      if (e6 && (s.push(e6.filter), e6.html)) {
        const t3 = e6.html.replace(/<svg([^>]*)>/, "<g$1>").replace(/<\/svg>/, "</g>");
        l.push(t3);
      }
    }
  }
  const g2 = p2("g", { className: "element", id: e5.id, transform: "group" !== e5.type ? `translate(${e5.x}, ${e5.y}) rotate(${e5.rotation})` : void 0, display: null === (i2 = e5.visible) || void 0 === i2 || i2 ? void 0 : "none", opacity: e5.opacity, style: { "transform-origin": "top left", filter: s.join(" ") } }, a, ...l);
  return r && r({ dom: g2, element: e5 }) || g2;
}
async function w(e5) {
  try {
    const t2 = await fetch(e5), n = t2.headers.get("content-type") || "font/ttf", r = await t2.arrayBuffer();
    return `data:${n};base64,${"undefined" != typeof Buffer ? Buffer.from(r).toString("base64") : function(e6) {
      const t3 = new Uint8Array(e6);
      let n2 = "";
      for (let r2 = 0; r2 < t3.length; r2 += 32768) {
        const e7 = t3.subarray(r2, r2 + 32768);
        n2 += String.fromCharCode(...e7);
      }
      if ("undefined" != typeof btoa) {
        return btoa(n2);
      }
      if ("undefined" != typeof Buffer) {
        return Buffer.from(t3).toString("base64");
      }
      throw new Error("No base64 encoder available in this environment");
    }(r)}`;
  } catch (t2) {
    return console.error("Error embedding font:", t2), e5;
  }
}
async function jsonToDOM2({ json: e5, elementHook: i2 }) {
  const l = [];
  forEveryChild({ children: e5.pages }, (e6) => {
    "text" === e6.type && -1 === l.indexOf(e6.fontFamily) && l.push(e6.fontFamily);
  });
  const h = await async function(e6, t2) {
    return await Promise.all(e6.map(async (e7) => {
      var n, r;
      if ("Arial" === e7) {
        return null;
      }
      const i3 = t2.find((t3) => t3.fontFamily === e7);
      if (i3) {
        injectCustomFont(i3), await loadFont(e7, "normal", "normal"), await loadFont(e7, "normal", "bold"), await loadFont(e7, "normal", "italic"), await loadFont(e7, "normal", "bold-italic");
        const t3 = await w(i3.url);
        return p2("style", {}, `@font-face { font-family: ${e7}; src: url(${t3}); }`);
      }
      {
        injectGoogleFont(e7), await loadFont(e7, "normal", "normal");
        const t3 = `https://fonts.googleapis.com/css?family=${e7}:bi,normal,i,b`;
        try {
          const i4 = await fetch(t3), o2 = await i4.text(), a = null === (r = null === (n = o2.match(/url\((.*?)\)/g)) || void 0 === n ? void 0 : n.map((e8) => e8.replace(/url\((.*?)\)/, "$1"))) || void 0 === r ? void 0 : r.filter((e8) => e8.startsWith("https"));
          if (!(null == a ? void 0 : a.length)) {
            throw new Error("No font URLs found");
          }
          const s = await Promise.all(a.map(async (t4) => {
            const n2 = await w(t4), r2 = o2.match(/font-style:\s*(.*?);/), i5 = o2.match(/font-weight:\s*(.*?);/), a2 = r2 ? r2[1] : "normal", s2 = i5 ? i5[1] : "normal";
            return `@font-face {
                font-family: ${e7};
                font-style: ${a2};
                font-weight: ${s2};
                src: url(${n2});
              }`;
          }));
          return p2("style", {}, s.join("\n"));
        } catch (l2) {
          return console.error("Error embedding Google Font:", l2), p2("defs", {}, p2("style", { type: "text/css", innerHTML: `@import url('${t3}');`.replace(/&/g, "&amp;") }));
        }
      }
    }));
  }(l, e5.fonts), c2 = await Promise.all(e5.pages.map((o2) => async function({ page: e6, store: i3, elementHook: o3 }) {
    const a = await Promise.all(e6.children.map((t2) => y({ element: t2, page: e6, store: i3, elementHook: o3 }))), s = e6.background.indexOf("url") >= 0 || e6.background.indexOf("http") >= 0 || e6.background.indexOf(".jpg") >= 0 || e6.background.indexOf(".png") >= 0 || e6.background.indexOf(".jpeg") >= 0;
    let l2;
    if (s) {
      const o4 = await loadImage(e6.background);
      l2 = await cropImage(e6.background, Object.assign({ width: i3.width, height: i3.height, x: 0, y: 0 }, getCrop({ width: i3.width, height: i3.height }, { width: o4.width, height: o4.height })));
    }
    return p2("g", { className: "page", style: {} }, s ? p2("image", { "xlink:href": l2, x: 0, y: 0, width: i3.width, height: i3.height, preserveAspectRatio: "none" }) : p2("rect", { x: 0, y: 0, width: i3.width, height: i3.height, fill: s ? void 0 : e6.background }), ...a);
  }({ page: o2, store: e5, elementHook: i2 })));
  return p2("svg", { xmlns: "http://www.w3.org/2000/svg", "xmlns:xlink": "http://www.w3.org/1999/xlink", viewBox: `0 0 ${e5.width} ${e5.height}`, width: e5.width, height: e5.height }, ...h, ...c2);
}
var $ = ({ dom: t2, nestLevel: n = 0 }) => {
  if ("string" == typeof t2) {
    return t2;
  }
  if (!t2) {
    return "";
  }
  const r = t2.props, { innerHTML: i2 } = r, o2 = e2(r, ["innerHTML"]), a = " ".repeat(n);
  return `${a}<${t2.type} ${Object.keys(o2).map((e5) => ((e6, t3) => "object" == typeof t3 ? `${e6}="${Object.keys(t3).map((e7) => `${e7}:${t3[e7]};`).join(" ")}"` : null == t3 || "" === t3 ? "" : `${e6}="${t3}"`)(e5, o2[e5])).join(" ")}>${i2 || "\n" + t2.children.map((e5) => $({ dom: e5, nestLevel: n + 1 })).join("")}${a}</${t2.type}>
`;
};
async function jsonToSVG({ json: e5, elementHook: t2 }) {
  const n = await jsonToDOM2({ json: e5, elementHook: t2 });
  return $({ dom: n });
}

// node_modules/polotno/model/node-model.js
var Node = types.model("Node", { id: types.identifier, type: "none", name: "", opacity: 1, custom: types.frozen(), visible: true, selectable: true, removable: true, alwaysOnTop: false, showInExport: true }).preProcessSnapshot((e5) => {
  for (var t2 in e5) {
    null === e5[t2] && (e5[t2] = void 0);
  }
  return e5;
}).postProcessSnapshot((e5) => {
  const t2 = Object.assign({}, e5), o2 = {};
  for (var r in t2) {
    "_" !== r[0] && (o2[r] = e5[r]);
  }
  return o2;
}).views((e5) => ({ get locked() {
  return !(e5.draggable || e5.contentEditable || e5.styleEditable || e5.resizable);
}, get page() {
  return getParentOfType(e5, Page);
}, get store() {
  return getParentOfType(e5, Store);
}, get top() {
  let o2 = e5;
  for (; ; ) {
    if (!hasParentOfType(o2, GroupElement)) {
      return o2;
    }
    o2 = getParentOfType(o2, GroupElement);
  }
}, get parent() {
  return hasParentOfType(e5, GroupElement) ? getParentOfType(e5, GroupElement) : hasParentOfType(e5, Page) ? getParentOfType(e5, Page) : hasParentOfType(e5, Store) ? getParentOfType(e5, Store) : null;
}, get zIndex() {
  return e5.parent.children.indexOf(e5);
} })).actions((e5) => ({ toJSON: () => Object.assign({}, getSnapshot(e5)) })).actions((e5) => ({ clone(t2 = {}, { skipSelect: o2 = false } = {}) {
  const r = JSON.parse(JSON.stringify(e5.toJSON()));
  return t2.id = t2.id || nanoid(10), forEveryChild2(r, (e6) => {
    e6.id = nanoid(10);
  }), Object.assign(r, t2), e5.page.addElement(r, { skipSelect: o2 });
}, set(t2) {
  Object.assign(e5, t2);
}, moveUp() {
  e5.page.moveElementsUp([e5.id]);
}, moveTop() {
  e5.page.moveElementsTop([e5.id]);
}, moveDown() {
  e5.page.moveElementsDown([e5.id]);
}, moveBottom() {
  e5.page.moveElementsBottom([e5.id]);
}, setZIndex(t2) {
  e5.parent.setElementZIndex(e5.id, t2);
}, beforeDestroy() {
} }));

// node_modules/polotno/utils/animations.js
var o = { right: { from: { x: -200 }, to: { x: 0 } }, left: { from: { x: 200 }, to: { x: 0 } }, up: { from: { y: 200 }, to: { y: 0 } }, down: { from: { y: -200 }, to: { y: 0 } }, "bottom-right": { from: { x: -200, y: -200 }, to: { x: 0, y: 0 } }, "bottom-left": { from: { x: 200, y: -200 }, to: { x: 0, y: 0 } }, "top-right": { from: { x: -200, y: 200 }, to: { x: 0, y: 0 } }, "top-left": { from: { x: 200, y: 200 }, to: { x: 0, y: 0 } } };
var i = { right: { cropX: -1 }, left: { cropX: 1 }, up: { cropY: 1 }, down: { cropY: -1 } };
var animations = { fade: ({ dTime: t2, element: o2, animation: i2 }) => {
  const n = t2 / i2.duration;
  return "enter" === i2.type ? { opacity: n * o2.opacity } : { opacity: (1 - n) * o2.opacity };
}, rotate: ({ dTime: o2, element: i2, animation: n }) => {
  const e5 = o2 / n.duration * 360;
  return rotateAroundCenter({ x: i2.x, y: i2.y, width: i2.width, height: i2.height, rotation: i2.rotation }, e5);
}, blink: ({ dTime: t2, element: o2, animation: i2 }) => {
  const n = i2.duration, e5 = t2 % n / (n / 2), a = e5 <= 1 ? e5 : 2 - e5;
  return { opacity: o2.opacity * a };
}, bounce: ({ dTime: t2, element: o2, animation: i2 }) => {
  var n;
  const e5 = i2.duration, a = e5 / 2, r = null !== (n = i2.data.strength) && void 0 !== n ? n : 1, h = {}, m3 = { x: o2.x + o2.width / 3 * r, y: o2.y + o2.height / 3 * r, width: o2.width / 3 * r, height: o2.height / 3 * r, fontSize: o2.fontSize / 3 * r }, c2 = { x: o2.x, y: o2.y, width: o2.width, height: o2.height, fontSize: o2.fontSize }, d4 = t2 % e5 / a, p4 = d4 <= 1 ? d4 : 2 - d4;
  for (let s in m3) {
    const t3 = m3[s], o3 = c2[s] - t3;
    h[s] = t3 + p4 * o3;
  }
  return h;
}, move: ({ dTime: t2, element: i2, animation: n }) => {
  var e5;
  const a = o[n.data.direction] || o.right, r = null !== (e5 = n.data.strength) && void 0 !== e5 ? e5 : 1, h = {};
  for (var m3 in a.from) {
    let o2 = a.from[m3], e6 = a.to[m3];
    "exit" === n.type && (o2 = a.to[m3], e6 = -a.from[m3]), o2 *= r, e6 *= r;
    const c2 = i2[m3] + o2, d4 = i2[m3] + e6 - c2;
    h[m3] = c2 + t2 / n.duration * d4;
  }
  return h;
}, zoom: ({ dTime: t2, element: o2, animation: i2 }) => {
  var n;
  const e5 = {}, a = 1 + (("in" === (i2.data.direction || "in") ? 3 / 4 : 5 / 4) - 1) * (null !== (n = i2.data.strength) && void 0 !== n ? n : 1), r = o2.rotation * Math.PI / 180, h = Math.cos(r), m3 = Math.sin(r), c2 = o2.width * (1 - a), d4 = o2.height * (1 - a), p4 = (c2 * h - d4 * m3) / 2, s = (c2 * m3 + d4 * h) / 2, l = { x: o2.x + p4, y: o2.y + s, width: o2.width * a, height: o2.height * a, fontSize: o2.fontSize * a }, y3 = { x: o2.x, y: o2.y, width: o2.width, height: o2.height, fontSize: o2.fontSize };
  for (var f3 in l) {
    let o3 = l[f3], n2 = y3[f3];
    if ("exit" === i2.type) {
      const t3 = o3;
      o3 = n2, n2 = t3;
    }
    const a2 = n2 - o3;
    e5[f3] = o3 + t2 / i2.duration * a2;
  }
  return e5;
}, cameraZoom: ({ dTime: t2, element: o2, animation: n }) => {
  var e5, a, r;
  const h = {}, m3 = n.data.direction || "right", c2 = i[m3] || i.right, d4 = null !== (e5 = n.data.movementStrength) && void 0 !== e5 ? e5 : 0.1, p4 = null !== (a = n.data.shakeStrength) && void 0 !== a ? a : 0.015;
  let s = null !== (r = n.data.zoomStrength) && void 0 !== r ? r : 0.6;
  const l = t2 / n.duration, y3 = p4 * (1 - l), f3 = Math.sin(12 * l) * y3 * 0.7 + Math.sin(8 * l) * y3 * 0.3;
  if ("exit" === n.type) {
    const t3 = Math.max(o2.cropWidth || 1, o2.cropHeight || 1);
    s = Math.min(s, 1 - t3);
  }
  n.type;
  const x = 1 - Math.pow(1 - l, 2), g2 = o2.cropX || 0, u3 = o2.cropY || 0, w2 = o2.cropWidth || 1, M = o2.cropHeight || 1, v = w2, S = M;
  let z, T, X = 0, Y = 0;
  if (c2.cropX) {
    const t3 = c2.cropX > 0 ? 1 - (g2 + w2) : g2;
    X = Math.min(t3, Math.abs(d4)) * c2.cropX;
  }
  if (c2.cropY) {
    const t3 = c2.cropY > 0 ? 1 - (u3 + M) : u3;
    Y = Math.min(t3, Math.abs(d4)) * c2.cropY;
  }
  return "enter" === n.type ? (z = c2.cropX ? g2 + X * (1 - x) : g2, T = c2.cropY ? u3 + Y * (1 - x) : u3) : (z = c2.cropX ? g2 + X * x : g2, T = c2.cropY ? u3 + Y * x : u3), h.cropX = Math.max(0, Math.min(1 - v, z + f3 * v)), h.cropY = Math.max(0, Math.min(1 - S, T + f3 * S)), h.cropWidth = v, h.cropHeight = S, h;
} };
var animate = ({ element: t2, dTime: o2, animation: i2 }) => {
  const n = animations[i2.name];
  return n ? n({ element: t2, dTime: o2, animation: i2 }) : (console.error("Can not find animation type: " + i2.name), {});
};

// node_modules/polotno/model/shape-model.js
var Animation = types.model("Animation", { delay: 0, duration: 500, enabled: true, type: types.enumeration("Type", ["enter", "exit", "loop"]), name: "none", data: types.frozen({}) });
var getDiff = (t2, e5) => {
  const i2 = {};
  for (const n in e5) {
    if ("number" == typeof t2[n] && "number" == typeof e5[n]) {
      const o2 = e5[n] - t2[n];
      0 !== o2 && (i2[n] = o2);
    }
  }
  return i2;
};
var ShapeFilter = types.model("ShapeFilter", { intensity: 1 });
var INDEPENDENT_FILTERS = ["temperature", "contrast", "highlights", "shadows", "white", "black", "saturation", "vibrance"];
var Shape = Node.named("Shape").props({ x: 0, y: 0, width: 100, height: 100, rotation: 0, opacity: 1, animations: types.array(Animation), blurEnabled: false, blurRadius: 10, brightnessEnabled: false, brightness: 0, sepiaEnabled: false, grayscaleEnabled: false, filters: types.map(ShapeFilter), shadowEnabled: false, shadowBlur: 5, shadowOffsetX: 0, shadowOffsetY: 0, shadowColor: "black", shadowOpacity: 1, visible: true, draggable: true, resizable: true, selectable: true, contentEditable: true, styleEditable: true, alwaysOnTop: false, showInExport: true }).preProcessSnapshot((t2) => {
  const e5 = Object.assign(Object.assign({}, t2), { x: t2.x || 0, y: t2.y || 0, filters: Array.isArray(t2.filters) ? {} : t2.filters });
  return "width" in t2 && (e5.width = e5.width || 1), "height" in t2 && (e5.height = e5.height || 1), t2.locked && (e5.draggable = false, e5.contentEditable = false, e5.styleEditable = false, e5.resizable = false, e5.removable = false), e5;
}).views((t2) => {
  const o2 = observable({ x: t2.x, y: t2.y, width: t2.width, height: t2.height, rotation: t2.rotation, opacity: t2.opacity, color: t2.color, fontSize: t2.fontSize }), a = action((t3) => {
    Object.assign(o2, t3);
  }), r = action((t3) => {
    for (const e5 in t3) {
      "number" == typeof o2[e5] && (o2[e5] = o2[e5] + t3[e5]);
    }
  });
  return { get a() {
    const { currentTime: i2 } = t2.store;
    if (a({ x: t2.x, y: t2.y, width: t2.width, height: t2.height, rotation: t2.rotation, opacity: t2.opacity, color: t2.color, fontSize: t2.fontSize, cropX: t2.cropX, cropY: t2.cropY, cropWidth: t2.cropWidth, cropHeight: t2.cropHeight }), 0 === i2) {
      return o2;
    }
    const n = i2 - t2.page.startTime;
    if (n > t2.page.duration) {
      return o2;
    }
    if (n < 0) {
      return o2;
    }
    const s = t2.store.animatedElementsIds;
    if (s.length && !s.includes(t2.id)) {
      return o2;
    }
    const l = t2.animations.find((t3) => "enter" === t3.type), d4 = (null == l ? void 0 : l.enabled) && n < l.delay;
    d4 && a({ opacity: 0 });
    const c2 = (null == l ? void 0 : l.enabled) && n >= l.delay && n <= l.delay + l.duration;
    if (c2) {
      const i3 = n - l.delay, o3 = animate({ element: t2, animation: l, dTime: i3 }), a2 = getDiff(t2, o3);
      r(a2);
    }
    const p4 = t2.animations.find((t3) => "exit" === t3.type);
    if (!d4 && !c2 && (null == p4 ? void 0 : p4.enabled) && n >= t2.page.duration - p4.duration - p4.delay && n <= t2.page.duration - p4.delay) {
      const i3 = n - (t2.page.duration - p4.duration - p4.delay), o3 = animate({ element: t2, animation: p4, dTime: i3 }), a2 = getDiff(t2, o3);
      r(a2);
    }
    (null == p4 ? void 0 : p4.enabled) && n >= t2.page.duration - p4.delay && a({ opacity: 0 });
    const h = t2.animations.find((t3) => "loop" === t3.type);
    if (null == h ? void 0 : h.enabled) {
      const i3 = animate({ element: t2, animation: h, dTime: n }), o3 = getDiff(t2, i3);
      r(o3);
    }
    return o2;
  }, animated: (e5) => t2.a[e5] };
}).actions((t2) => ({ setAnimation(e5, i2) {
  const n = t2.animations.find((t3) => t3.type === e5);
  n ? Object.assign(n, i2) : t2.animations.push(Object.assign({ type: e5 }, i2));
}, setFilter(e5, i2) {
  INDEPENDENT_FILTERS.includes(e5) || t2.filters.forEach((e6, i3) => {
    INDEPENDENT_FILTERS.includes(i3.toString()) || t2.filters.delete(i3.toString());
  }), null == i2 ? t2.filters.delete(e5) : t2.filters.set(e5, { intensity: i2 });
} }));

// node_modules/polotno/model/text-model.js
var TextElement = Shape.named("Text").props({ type: "text", text: "", placeholder: "", fontSize: 14, fontFamily: "Roboto", fontStyle: "normal", fontWeight: "normal", textDecoration: "", textTransform: "none", fill: "black", align: "center", width: 100, height: 0, verticalAlign: "top", strokeWidth: 0, stroke: "black", lineHeight: types.optional(types.union(types.number, types.string), 1.2), letterSpacing: 0, _editModeEnabled: false, backgroundEnabled: false, backgroundColor: "#7ED321", backgroundOpacity: 1, backgroundCornerRadius: 0.5, backgroundPadding: 0.5 }).preProcessSnapshot((t2) => Object.assign({}, t2)).actions((t2) => ({ toggleEditMode(e5) {
  t2._editModeEnabled = null != e5 ? e5 : !t2._editModeEnabled, t2._editModeEnabled ? t2.store.history.startTransaction() : t2.store.history.endTransaction();
} }));

// node_modules/polotno/model/image-model.js
var ImageElement = Shape.named("Image").props({ type: "image", width: 100, height: 100, src: "", cropX: 0, cropY: 0, cropWidth: 1, cropHeight: 1, cornerRadius: 0, flipX: false, flipY: false, clipSrc: "", borderColor: "black", borderSize: 0, keepRatio: false, stretchEnabled: false, _cropModeEnabled: false }).actions((o2) => ({ toggleCropMode(e5) {
  o2._cropModeEnabled = null != e5 ? e5 : !o2._cropModeEnabled, o2._cropModeEnabled ? o2.store.history.startTransaction() : o2.store.history.endTransaction();
}, beforeDestroy() {
  o2._cropModeEnabled && o2.store.history.endTransaction();
} }));

// node_modules/polotno/model/video-model.js
var VideoElement = ImageElement.named("Video").props({ type: "video", duration: 0, startTime: 0, endTime: 1, volume: 1 });

// node_modules/polotno/model/line-model.js
var LineElement = Shape.named("Line").props({ type: "line", width: 400, height: 10, color: "black", dash: types.array(types.number), startHead: "", endHead: "" }).actions((e5) => ({}));

// node_modules/polotno/model/svg-model.js
var SVGElement = Shape.named("SVG").props({ type: "svg", src: "", maskSrc: "", cropX: 0, cropY: 0, cropWidth: 1, cropHeight: 1, keepRatio: true, stretchEnabled: true, flipX: false, flipY: false, width: 100, height: 100, borderColor: "black", borderSize: 0, cornerRadius: 0, colorsReplace: types.map(types.string) }).preProcessSnapshot((e5) => Object.assign(Object.assign({}, e5), { src: e5.src || e5.svgSource, colorsReplace: Array.isArray(e5.colorsReplace) ? {} : e5.colorsReplace })).actions((e5) => ({ replaceColor(r, o2) {
  e5.colorsReplace.set(r, o2);
} }));

// node_modules/polotno/model/figure-model.js
var FigureElement = Shape.named("Figure").props({ type: "figure", subType: "rect", fill: "rgb(0, 161, 255)", dash: types.array(types.number), strokeWidth: 0, stroke: "rgba(98, 197, 255, 1)", cornerRadius: 0 });

// node_modules/polotno/model/gif-model.js
var GifElement = ImageElement.named("Gif").props({
  type: "gif",
  duration: 0,
  keepRatio: true
});

// node_modules/polotno/model/group-model.js
var e3 = function(e5, t2) {
  var r = {};
  for (var o2 in e5) {
    Object.prototype.hasOwnProperty.call(e5, o2) && t2.indexOf(o2) < 0 && (r[o2] = e5[o2]);
  }
  if (null != e5 && "function" == typeof Object.getOwnPropertySymbols) {
    var i2 = 0;
    for (o2 = Object.getOwnPropertySymbols(e5); i2 < o2.length; i2++) {
      t2.indexOf(o2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(e5, o2[i2]) && (r[o2[i2]] = e5[o2[i2]]);
    }
  }
  return r;
};
var forEveryChild2 = (e5, t2) => {
  if (e5.children) {
    for (const r of e5.children) {
      if (true === t2(r)) {
        break;
      }
      forEveryChild2(r, t2);
    }
  }
};
var f2 = [...new Array(20)].map((e5, r) => types.late(() => y2[r]));
var ElementTypes = types.union({ dispatcher: (e5) => {
  const t2 = TYPES_MAP[e5.type];
  if (!t2) {
    throw new Error(`Unknown element type: "${e5.type}"`);
  }
  return t2;
} }, SVGElement, TextElement, ImageElement, LineElement, VideoElement, FigureElement, GifElement, types.late(() => GroupElement), ...f2);
var GroupElement = Node.named("Group").props({ type: "group", children: types.array(ElementTypes) }).views((e5) => ({ get draggable() {
  let t2 = true;
  return forEveryChild2(e5, (e6) => {
    e6.draggable || (t2 = false);
  }), t2;
}, get resizable() {
  let t2 = true;
  return forEveryChild2(e5, (e6) => {
    e6.resizable || (t2 = false);
  }), t2;
}, get contentEditable() {
  let t2 = true;
  return forEveryChild2(e5, (e6) => {
    e6.contentEditable || (t2 = false);
  }), t2;
}, get styleEditable() {
  let t2 = true;
  return forEveryChild2(e5, (e6) => {
    e6.styleEditable || (t2 = false);
  }), t2;
}, get locked() {
  let t2 = true;
  return forEveryChild2(e5, (e6) => {
    e6.locked || (t2 = false);
  }), t2;
} })).actions((t2) => ({ set(r) {
  var { draggable: o2, contentEditable: i2, styleEditable: l, resizable: n } = r, d4 = e3(r, ["draggable", "contentEditable", "styleEditable", "resizable"]);
  void 0 !== o2 && forEveryChild2(t2, (e5) => {
    e5.set({ draggable: o2 });
  }), void 0 !== i2 && forEveryChild2(t2, (e5) => {
    e5.set({ contentEditable: i2 });
  }), void 0 !== l && forEveryChild2(t2, (e5) => {
    e5.set({ styleEditable: l });
  }), void 0 !== n && forEveryChild2(t2, (e5) => {
    e5.set({ resizable: n });
  }), Object.assign(t2, d4);
}, addElement(e5, { skipSelect: r = false } = {}) {
  const i2 = TYPES_MAP[e5.type];
  if (!i2) {
    return void console.error("Can not find model with type " + e5.type);
  }
  e5.children && e5.children.forEach((e6) => {
    e6.id = e6.id || nanoid(10);
  });
  const l = i2.create(Object.assign({ id: nanoid(10) }, e5));
  return t2.children.push(l), l.selectable && !r && t2.store.selectElements([l.id]), l;
}, setElementZIndex(e5, o2) {
  const i2 = t2.children.find((t3) => t3.id === e5);
  i2 && (detach(i2), t2.children.remove(i2), t2.children.splice(o2, 0, i2));
} }));
var y2 = [];
var TYPES_MAP = { svg: SVGElement, text: TextElement, image: ImageElement, group: GroupElement, line: LineElement, video: VideoElement, figure: FigureElement, gif: GifElement };
function registerShapeModel(e5, t2) {
  const r = e5.type;
  if (!r) {
    throw new Error('You must pass "type" attribute to custom model.');
  }
  let o2 = Shape.named(r).props(e5);
  t2 && (o2 = t2(o2)), TYPES_MAP[r] = o2, y2.push(o2);
}

// node_modules/polotno/model/page-model.js
var Page = types.model("Page", { id: types.identifier, children: types.array(types.late(() => ElementTypes)), width: types.optional(types.union(types.number, types.literal("auto")), "auto"), height: types.optional(types.union(types.number, types.literal("auto")), "auto"), background: "white", bleed: 0, custom: types.frozen(), duration: 5e3, _exporting: false, _rendering: false, _forceMount: false }).postProcessSnapshot((e5) => {
  const t2 = Object.assign({}, e5), n = {};
  for (var o2 in t2) {
    "_" !== o2[0] && (n[o2] = e5[o2]);
  }
  return n;
}).views((e5) => ({ get store() {
  return getParentOfType(e5, Store);
} })).views((e5) => ({ get startTime() {
  let t2 = 0;
  for (const n of e5.store.pages) {
    if (n.id === e5.id) {
      return t2;
    }
    t2 += n.duration;
  }
  return t2;
}, get _exportingOrRendering() {
  return e5._exporting || e5._rendering;
} })).views((e5) => ({ get computedWidth() {
  return "auto" === e5.width ? e5.store.width : e5.width;
}, get computedHeight() {
  return "auto" === e5.height ? e5.store.height : e5.height;
} })).actions((e5) => ({ toJSON: () => JSON.parse(JSON.stringify(getSnapshot(e5))), _forEachElementUp(t2, n) {
  const o2 = t2.map((t3) => ({ id: t3, index: e5.children.findIndex((e6) => e6.id === t3) }));
  o2.sort((e6, t3) => t3.index - e6.index);
  for (const { index: i2 } of o2) {
    if (-1 == i2) {
      continue;
    }
    const o3 = i2 < e5.children.length - 1 && e5.children[i2 + 1], r = t2.indexOf(null == o3 ? void 0 : o3.id) >= 0;
    i2 === e5.children.length - 1 || r || n(i2);
  }
}, _forEachElementDown(t2, n) {
  const o2 = t2.map((t3) => ({ id: t3, index: e5.children.findIndex((e6) => e6.id === t3) }));
  o2.sort((e6, t3) => e6.index - t3.index);
  for (const { index: i2 } of o2) {
    if (-1 == i2) {
      continue;
    }
    const o3 = i2 > 0 && e5.children[i2 - 1], r = t2.indexOf(null == o3 ? void 0 : o3.id) >= 0;
    0 === i2 || r || n(i2);
  }
  return false;
} })).actions((e5) => ({ clone(t2 = {}) {
  const n = e5.toJSON();
  n.children.forEach((e6) => {
    e6.id = nanoid(10), forEveryChild2(e6, (e7) => {
      e7.id = nanoid(10);
    });
  });
  const o2 = Object.assign(Object.assign(Object.assign({}, n), { id: nanoid(10) }), t2), r = e5.store.addPage(o2), d4 = e5.store.pages.indexOf(e5);
  return r.setZIndex(d4 + 1), r.select(), r;
}, setZIndex(t2) {
  e5.store.setPageZIndex(e5.id, t2);
}, set(t2) {
  Object.assign(e5, t2);
}, select() {
  e5.store.selectPage(e5.id);
}, addElement(t2, { skipSelect: n = false } = {}) {
  const o2 = TYPES_MAP[t2.type];
  if (!o2) {
    return void console.error("Can not find model with type " + t2.type);
  }
  "children" in t2 && Array.isArray(t2.children) && forEveryChild2(t2, (e6) => {
    e6.id = e6.id || nanoid(10);
  });
  const r = o2.create(Object.assign({ id: nanoid(10) }, t2));
  return e5.children.push(r), r.selectable && !n && e5.store.selectElements([r.id]), r;
}, canMoveElementsUp(t2) {
  let n = false;
  return e5._forEachElementUp(t2, () => {
    n = n || true;
  }), n;
}, moveElementsUp(n) {
  e5._forEachElementUp(n, (n2) => {
    const o2 = e5.children[n2];
    detach(o2), e5.children.splice(n2 + 1, 0, o2);
  });
}, canMoveElementsTop(e6) {
  return this.canMoveElementsUp(e6);
}, moveElementsTop(t2) {
  const n = [], o2 = [];
  e5.children.forEach((e6) => {
    t2.indexOf(e6.id) >= 0 ? n.push(e6) : o2.push(e6);
  }), e5.children.replace(o2.concat(n));
}, canMoveElementsDown(t2) {
  let n = false;
  return e5._forEachElementDown(t2, () => {
    n = n || true;
  }), n;
}, moveElementsDown(n) {
  e5._forEachElementDown(n, (n2) => {
    const o2 = e5.children[n2];
    detach(o2), e5.children.splice(n2 - 1, 0, o2);
  });
}, canMoveElementsBottom(e6) {
  return this.canMoveElementsDown(e6);
}, moveElementsBottom(t2) {
  const n = [], o2 = [];
  e5.children.forEach((e6) => {
    t2.indexOf(e6.id) >= 0 ? n.push(e6) : o2.push(e6);
  }), e5.children.replace(n.concat(o2));
}, setElementZIndex(n, o2) {
  const i2 = e5.children.find((e6) => e6.id === n);
  i2 && (detach(i2), e5.children.remove(i2), e5.children.splice(o2, 0, i2));
}, setSize({ width: t2, height: n, useMagic: o2, softChange: i2 }) {
  if (o2) {
    const o3 = [], i3 = (t3) => "image" === t3.type && t3.x < 1 && t3.y < 1 && t3.width >= e5.computedWidth - 2 && t3.height >= e5.computedHeight - 2;
    forEveryChild2(e5, (e6) => {
      "group" !== e6.type && (i3(e6) || o3.push(e6));
    });
    const r = o3.length ? getTotalClientRect(o3) : { x: 0, y: 0, width: e5.computedWidth, height: e5.computedHeight }, d4 = 1 / 4, c2 = Math.max(0, Math.min(r.x, e5.computedWidth - r.x - r.width)), m3 = e5.computedWidth * d4, h = Math.max(0, c2 - m3), l = Math.max(0, Math.min(r.y, e5.computedHeight - r.y - r.height)), p4 = e5.computedHeight * d4, g2 = Math.max(0, l - p4), u3 = e5.computedWidth - 2 * h, f3 = e5.computedHeight - 2 * g2, E = t2 / u3, x = n / f3, v = Math.min(E, x), w2 = (t2 - u3 * v) / 2 - h * v, y3 = (n - f3 * v) / 2 - g2 * v;
    forEveryChild2(e5, (e6) => {
      "group" !== e6.type && (i3(e6) ? e6.set({ x: e6.x * v, y: e6.y * v, width: e6.width * E, height: e6.height * x, cropX: 0, cropY: 0, cropWidth: 1, cropHeight: 1 }) : (e6.set({ x: w2 + e6.x * v, y: y3 + e6.y * v, width: e6.width * v, height: e6.height * v }), "text" === e6.type ? e6.set({ fontSize: e6.fontSize * v }) : "figure" === e6.type && e6.set({ strokeWidth: e6.strokeWidth * v })));
    });
  }
  i2 || (e5.width = t2), i2 || (e5.height = n);
} })).actions((e5) => ({ moveElementUp(t2) {
  console.warn("page.moveElementUp(id) is deprecated. Please use page.moveElementsUp([id1, id2]) instead."), e5.moveElementsUp([t2]);
}, moveElementDown(t2) {
  console.warn("page.moveElementDown(id) is deprecated. Please use page.moveElementsDown([id1, id2]) instead."), e5.moveElementsDown([t2]);
}, moveElementTop(t2) {
  console.warn("page.moveElementTop(id) is deprecated. Please use page.moveElementsTop([id1, id2]) instead."), e5.moveElementsTop([t2]);
}, moveElementBottom(t2) {
  console.warn("page.moveElementBottom(id) is deprecated. Please use page.moveElementsBottom([id1, id2]) instead."), e5.moveElementsBottom([t2]);
}, play() {
  e5.store.play({ startTime: e5.startTime, endTime: e5.startTime + e5.duration });
} }));

// node_modules/polotno/model/audio-model.js
var Audio = types.model("Audio", { id: types.identifier, src: "", duration: 0, startTime: 0, endTime: 1, volume: 1, delay: 0 }).actions((t2) => ({ toJSON: () => Object.assign({}, getSnapshot(t2)) })).actions((t2) => ({ set(e5) {
  Object.assign(t2, e5);
} }));

// node_modules/polotno/model/store.js
var e4 = function(e5, t2) {
  var i2 = {};
  for (var o2 in e5) {
    Object.prototype.hasOwnProperty.call(e5, o2) && t2.indexOf(o2) < 0 && (i2[o2] = e5[o2]);
  }
  if (null != e5 && "function" == typeof Object.getOwnPropertySymbols) {
    var n = 0;
    for (o2 = Object.getOwnPropertySymbols(e5); n < o2.length; n++) {
      t2.indexOf(o2[n]) < 0 && Object.prototype.propertyIsEnumerable.call(e5, o2[n]) && (i2[o2[n]] = e5[o2[n]]);
    }
  }
  return i2;
};
setLivelinessChecking("ignore");
var Font = types.model("Font", { fontFamily: types.string, url: types.optional(types.string, ""), styles: types.frozen() }).preProcessSnapshot((e5) => Object.assign(Object.assign({}, e5), { fontFamily: e5.fontFamily || e5.name }));
var Store = types.model("Store", { role: "", pages: types.array(Page), fonts: types.array(Font), audios: types.array(Audio), width: 1080, height: 1080, currentTime: 0, isPlaying: false, scale: 1, scaleToFit: 1, unit: "px", dpi: 72, schemaVersion: 2, bleedVisible: false, rulesVisible: false, openedSidePanel: "", previousOpenedSidePanel: "", custom: types.frozen(), selectedElementsIds: types.array(types.string), animatedElementsIds: types.array(types.string), history: types.optional(UndoManager, { targetPath: "../pages" }), _elementsPixelRatio: Math.min(2, "undefined" != typeof window && window.devicePixelRatio || 1), _activePageId: "", _forceShowCredit: false, _key: "", _validated: false }).views((e5) => {
  const t2 = computed(() => {
    const t3 = {};
    return forEveryChild2({ children: e5.pages }, (e6) => (t3[e6.id] = e6, false)), t3;
  }, { keepAlive: true });
  return { get _idsMap() {
    return t2.get();
  } };
}).views((e5) => ({ get _bleedVisible() {
  return console.warn("store._bleedVisible is deprecated. Please use store.bleedVisible instead."), e5.bleedVisible;
}, get selectedElements() {
  return e5.selectedElementsIds.map((t2) => {
    for (const i2 of e5.pages) {
      for (const e6 of i2.children) {
        if (e6.id === t2) {
          return e6;
        }
      }
    }
  }).filter((e6) => !!e6);
}, get children() {
  return e5.pages;
}, get selectedShapes() {
  const t2 = [];
  return forEveryChild2({ children: e5.selectedElements }, (e6) => {
    "group" !== e6.type && t2.push(e6);
  }), t2;
}, get activePage() {
  return e5.pages.slice().find((t2) => t2.id === e5._activePageId) || (e5.pages.length ? e5.pages[0] : null);
}, get duration() {
  let t2 = 0;
  return e5.pages.forEach((e6) => {
    t2 += e6.duration;
  }), t2;
}, get _hasCroppedImages() {
  return e5.find((e6) => "image" === e6.type && e6._cropModeEnabled);
}, find(t2) {
  let i2;
  return forEveryChild2({ children: e5.pages }, (e6) => {
    if (!i2 && t2(e6)) {
      return i2 = e6, true;
    }
  }), i2;
}, getElementById: (t2) => e5._idsMap[t2] })).actions((e5) => {
  let t2 = 0, i2 = null, o2 = false;
  return { afterCreate() {
    e5.history.canUndo;
  }, setCurrentTime(t3) {
    e5.currentTime = t3;
  }, _togglePlaying(t3 = !e5.isPlaying) {
    e5.isPlaying = t3;
  }, play({ animatedElementsIds: n = [], startTime: a = 0, currentTime: r = 0, endTime: l = e5.duration, repeat: d4 = false } = {}) {
    r && (console.warn("currentTime property of store.play() is deprecated. Please use startTime instead."), a = r), e5.animatedElementsIds = cast(n), e5.currentTime = a, e5.isPlaying = true, t2 = Date.now(), i2 = l, o2 = d4, requestAnimationFrame(e5.seek);
  }, checkActivePage() {
    let t3 = 0;
    for (const i3 of e5.pages) {
      if (e5.currentTime >= i3.startTime && e5.currentTime < i3.startTime + i3.duration) {
        e5.selectPage(i3.id);
        break;
      }
      t3 += i3.duration;
    }
  }, seek() {
    if (!e5.isPlaying) {
      return;
    }
    const n = Date.now(), a = n - t2;
    t2 = n, e5.currentTime += a, e5.checkActivePage();
    const s = i2 || e5.duration;
    e5.isPlaying && e5.currentTime < s ? requestAnimationFrame(e5.seek) : e5.isPlaying && o2 ? (e5.currentTime = 0, requestAnimationFrame(e5.seek)) : e5.stop();
  }, stop() {
    e5.isPlaying = false, e5.currentTime = 0, e5.animatedElementsIds = cast([]), e5.checkActivePage();
  } };
}).actions((t2) => ({ __() {
  t2._validated || (validateKey(t2._key, t2._forceShowCredit), t2._validated = true);
}, set(e5) {
  Object.assign(t2, e5);
}, setUnit({ unit: e5, dpi: i2 }) {
  t2.unit = e5 || t2.unit, t2.dpi = i2 || t2.dpi;
}, setRole(e5) {
  t2.role = e5;
}, addPage(e5) {
  const i2 = Page.create(Object.assign({ id: nanoid(10) }, e5));
  return t2.pages.push(i2), t2._activePageId = i2.id, i2;
}, selectPage(e5) {
  t2._activePageId = e5;
}, selectElements(e5) {
  const i2 = e5.map((e6) => t2.getElementById(e6)).sort((e6, t3) => e6.page.children.indexOf(e6) - e6.page.children.indexOf(t3)).filter((e6) => !!e6).map((e6) => e6.id);
  t2.selectedElementsIds = cast(i2);
}, toggleBleed(e5) {
  t2.bleedVisible = null != e5 ? e5 : !t2.bleedVisible;
}, toggleRulers(e5) {
  t2.rulesVisible = null != e5 ? e5 : !t2.rulesVisible;
}, openSidePanel(e5) {
  t2.openedSidePanel !== e5 && (t2.previousOpenedSidePanel = t2.openedSidePanel, t2.openedSidePanel = e5);
}, setScale(e5) {
  t2.scale = e5;
}, _setScaleToFit(e5) {
  t2.scaleToFit = e5;
}, setElementsPixelRatio(e5) {
  t2._elementsPixelRatio = e5;
}, setSize(e5, i2, o2) {
  t2.pages.forEach((t3) => {
    t3.setSize({ width: e5, height: i2, useMagic: o2, softChange: true });
  }), t2.width = e5, t2.height = i2;
}, setPageZIndex(e5, i2) {
  const o2 = t2.pages.find((t3) => t3.id === e5);
  o2 && (detach(o2), t2.pages.remove(o2), t2.pages.splice(i2, 0, o2));
}, deletePages(e5) {
  const i2 = t2.pages.indexOf(t2.activePage);
  e5.forEach((e6) => {
    const i3 = t2.pages.find((t3) => t3.id === e6);
    destroy(i3);
  });
  const o2 = Math.min(t2.pages.length - 1, i2), n = t2.pages[o2];
  n && (t2._activePageId = n.id), t2.selectedElementsIds = cast(t2.selectedElementsIds.filter((e6) => t2.getElementById(e6)));
}, groupElements(e5, i2 = {}) {
  const o2 = e5.map((e6) => t2.getElementById(e6)), a = o2[0].page;
  if (o2.forEach((e6) => {
    e6 && detach(e6);
  }), !o2.length) {
    return;
  }
  const r = Object.assign({ id: nanoid(10), children: o2, type: "group" }, i2);
  return a.children.push(r), t2.selectedElementsIds = cast([r.id]), a.children.find((e6) => e6.id === r.id);
}, ungroupElements(e5) {
  const i2 = e5.map((e6) => t2.getElementById(e6)), o2 = [];
  i2.forEach((e6) => {
    if (e6 && "group" === e6.type) {
      const t3 = e6.page, i3 = t3.children.indexOf(e6);
      e6.children.forEach((e7) => {
        o2.push(e7.id);
      }), e6.children.forEach((e7) => {
        detach(e7), t3.children.push(e7);
      }), t3.children.splice(i3, 1);
    }
  }), t2.selectedElementsIds = cast(o2);
}, deleteElements(e5) {
  const i2 = [];
  t2.find((t3) => (e5.includes(t3.id) && i2.push(t3), false)), i2.forEach((e6) => {
    destroy(e6);
  }), t2.selectedElementsIds = cast(t2.selectedElementsIds.filter((e6) => t2.getElementById(e6)));
}, on(e5, o2) {
  if ("change" === e5) {
    let e6 = t2.toJSON();
    return onSnapshot(t2, (i2) => {
      const n = t2.toJSON();
      !deepEqual(e6, n) && (e6 = n, o2(n));
    });
  }
}, async _toCanvas({ pixelRatio: e5, ignoreBackground: i2, pageId: o2, mimeType: n, includeBleed: a, _skipTimeout: s, quickMode: r = false } = {}) {
  var l;
  const d4 = e5 || 1;
  o2 = o2 || (null === (l = t2.pages[0]) || void 0 === l ? void 0 : l.id);
  const c2 = t2.pages.find((e6) => e6.id === o2);
  if (!c2) {
    throw new Error(`No page for export with id ${o2}`);
  }
  const m3 = t2._elementsPixelRatio;
  d4 > t2._elementsPixelRatio && t2.setElementsPixelRatio(d4), r ? null == c2 || c2.set({ _forceMount: true }) : null == c2 || c2.set({ _exporting: true });
  const g2 = await waitTillAvailable(() => import_konva.default.stages.find((e6) => e6.getAttr("pageId") === o2));
  if (!g2) {
    throw null == c2 || c2.set({ _forceMount: false, _exporting: false }), t2.setElementsPixelRatio(m3), new Error(`Export is failed. Can not find stage for page ${o2}. Looks like <Workspace /> component is not mounted, but it is required in order to process the export.`);
  }
  await t2.waitLoading({ _skipTimeout: s });
  const u3 = g2.findOne(".page-container");
  if (!u3) {
    throw t2.setElementsPixelRatio(m3), null == c2 || c2.set({ _forceMount: false, _exporting: false }), new Error("Export is failed. Canvas was unmounted.");
  }
  const f3 = g2.position();
  g2.position({ x: 0, y: 0 }), g2.find("Transformer").forEach((e6) => {
    e6.setAttr("oldVisible", e6.visible()), e6.visible(false);
  }), u3.find(".page-background").forEach((e6) => e6.shadowEnabled(false)), u3.find(".page-background").forEach((e6) => e6.strokeEnabled(false)), u3.find(".highlighter").forEach((e6) => e6.visible(false));
  const h = u3.findOne(".page-background-group"), y3 = h.clip();
  h.clip({ x: null, y: null, width: null, height: null });
  const b = u3.findOne(".elements-container"), v = b.clip();
  b.clip({ x: null, y: null, width: null, height: null });
  const w2 = u3.find((e6) => !e6.visible() && e6.getAttr("editModeEnabled") && !e6.getAttr("hideInExport"));
  w2.forEach((e6) => {
    e6.setAttr("oldVisible", e6.visible()), e6.show();
  });
  const P = u3.find((e6) => e6.getAttr("hideInExport"));
  P.forEach((e6) => {
    e6.setAttr("oldVisible", e6.visible()), e6.hide();
  }), i2 && u3.find(".page-background").forEach((e6) => e6.hide());
  const x = a ? c2.bleed : 0;
  let k = x;
  !t2.bleedVisible && a || (t2.bleedVisible || a ? t2.bleedVisible && a ? k = 0 : t2.bleedVisible && !a && (k = -c2.bleed) : k = 0);
  const _ = document.createElement("canvas");
  _.width = Math.round((c2.computedWidth + 2 * x) * d4), _.height = Math.round((c2.computedHeight + 2 * x) * d4);
  const I = _.getContext("2d");
  "image/jpeg" === n && (I.fillStyle = "white", I.fillRect(0, 0, _.width, _.height));
  const S = u3.scale();
  u3.scale({ x: 1, y: 1 });
  const O = u3.toCanvas({ x: u3.x() - k, y: u3.y() - k, width: c2.computedWidth + 2 * x, height: c2.computedHeight + 2 * x, pixelRatio: d4 });
  return u3.scale(S), I.drawImage(O, 0, 0, _.width, _.height), import_konva.default.Util.releaseCanvas(O), i2 && u3.find(".page-background").forEach((e6) => e6.show()), P.forEach((e6) => {
    e6.visible(e6.getAttr("oldVisible"));
  }), w2.forEach((e6) => {
    e6.visible(e6.getAttr("oldVisible"));
  }), u3.find(".page-background").forEach((e6) => e6.shadowEnabled(true)), u3.find(".page-background").forEach((e6) => e6.strokeEnabled(true)), g2.find("Transformer").forEach((e6) => {
    e6.visible(e6.getAttr("oldVisible"));
  }), u3.find(".highlighter").forEach((e6) => e6.visible(true)), h.clip(y3), b.clip(v), g2.position(f3), null == c2 || c2.set({ _exporting: false, _forceMount: false }), await new Promise((e6) => setTimeout(e6)), t2.setElementsPixelRatio(m3), _;
}, async toDataURL(i2 = {}) {
  var { mimeType: o2, quality: n } = i2, a = e4(i2, ["mimeType", "quality"]);
  const s = await t2._toCanvas(Object.assign({ mimeType: o2 }, a)), r = s.toDataURL(o2, n);
  return import_konva.default.Util.releaseCanvas(s), r;
}, async toBlob(i2 = {}) {
  var { mimeType: o2, quality: n } = i2, a = e4(i2, ["mimeType", "quality"]);
  const s = await t2._toCanvas(Object.assign({ mimeType: o2 }, a)), r = await new Promise((e5) => {
    s.toBlob(e5, o2, n);
  });
  return import_konva.default.Util.releaseCanvas(s), r;
}, async saveAsImage(i2 = {}) {
  var { fileName: o2 } = i2, n = e4(i2, ["fileName"]);
  const a = n.mimeType || "image/png", s = a.split("/")[1];
  downloadFile(await t2.toDataURL(n), o2 || "polotno." + s, a);
}, async _toPDF(e5) {
  const i2 = e5.dpi || t2.dpi, o2 = e5.parallel || 1, n = e5.unit || ("px" === t2.unit ? "mm" : t2.unit), a = e5.pixelRatio || 1, s = e5.pageIds || t2.pages.map((e6) => e6.id), r = t2.pages.filter((e6) => s.includes(e6.id)), l = await getJsPDF(), d4 = (e6) => pxToUnit({ px: e6, unit: n, dpi: i2 }), c2 = e5.cropMarkSize || 0, p4 = d4(c2), m3 = r[0] || {}, g2 = e5.includeBleed ? m3.bleed : 0, f3 = d4(m3.computedWidth + 2 * g2 + 2 * p4), h = d4(m3.computedHeight + 2 * g2 + 2 * p4);
  var y3 = new l({ unit: n, orientation: f3 > h ? "landscape" : "portrait", format: [f3, h], compress: true, putOnlyUsedFonts: true });
  y3.deletePage(1);
  const b = ((e6, t3) => {
    for (var i3 = [], o3 = 0; o3 < e6.length; o3 += t3) {
      i3.push(e6.slice(o3, o3 + t3));
    }
    return i3;
  })(r, o2);
  let v = 0;
  for (const u3 of b) {
    const i3 = u3.map(async (i4) => {
      const o3 = e5.includeBleed ? i4.bleed : 0, n2 = i4.computedWidth + 2 * o3 + 2 * c2, r2 = i4.computedHeight + 2 * o3 + 2 * c2, l2 = d4(n2), p5 = d4(r2);
      let m4 = 0, g3 = a;
      for (; m4 < 10; ) {
        m4 += 1, 2 === m4 && console.error("Polotno can not export PDF with current settings. Quality is automatically reduced.");
        const o4 = await t2.toDataURL(Object.assign(Object.assign({}, e5), { pageId: i4.id, pixelRatio: g3 }));
        if (o4.length > 20) {
          return e5.onProgress && e5.onProgress(++v / s.length * 0.9), { url: o4, width: l2, height: p5, widthPx: n2, heightPx: r2 };
        }
        g3 *= 0.8;
      }
    });
    (await Promise.all(i3)).forEach(({ url: e6, width: t3, height: i4, widthPx: o3, heightPx: a2 }) => {
      y3.addPage([t3, i4], t3 > i4 ? "landscape" : "portrait");
      const s2 = y3.getCurrentPageInfo();
      var r2;
      switch (n) {
        case "pt":
          r2 = 1;
          break;
        case "mm":
          r2 = 72 / 25.4;
          break;
        case "cm":
          r2 = 72 / 2.54;
          break;
        case "in":
          r2 = 72;
          break;
        case "px":
          r2 = 0.75;
          break;
        case "pc":
        case "em":
          r2 = 12;
          break;
        case "ex":
          r2 = 6;
          break;
        default:
          throw "Invalid unit: " + n;
      }
      if (s2.pageContext.cropBox = { bottomLeftX: 0, bottomLeftY: 0, topRightX: t3 * r2, topRightY: i4 * r2 }, s2.pageContext.artBox = { bottomLeftX: d4(c2 + g2) * r2, bottomLeftY: d4(c2 + g2) * r2, topRightX: d4(o3 - c2 - g2) * r2, topRightY: d4(a2 - c2 - g2) * r2 }, s2.pageContext.bleedBox = { bottomLeftX: d4(c2 + g2) * r2, bottomLeftY: d4(c2 + g2) * r2, topRightX: d4(o3 - c2 - g2) * r2, topRightY: d4(a2 - c2 - g2) * r2 }, p4) {
        y3.setLineWidth(d4(1));
        const e7 = p4 + d4(g2);
        y3.line(e7, 0, e7, p4), y3.line(0, e7, p4, e7), y3.line(t3 - e7, 0, t3 - e7, p4), y3.line(t3, e7, t3 - p4, e7), y3.line(0, i4 - e7, p4, i4 - e7), y3.line(e7, i4, e7, i4 - p4), y3.line(t3, i4 - e7, t3 - p4, i4 - e7), y3.line(t3 - e7, i4, t3 - e7, i4 - p4);
      }
      y3.addImage(e6, p4, p4, t3 - 2 * p4, i4 - 2 * p4, void 0, "FAST");
    });
  }
  return y3;
}, toPDFDataURL: async (e5) => (await t2._toPDF(Object.assign({ mimeType: "image/jpeg" }, e5))).output("datauristring"), async toGIFDataURL(e5 = {}) {
  const i2 = e5.pixelRatio || 1, o2 = await createGIF({ width: t2.width * i2, height: t2.height * i2 }), n = 1e3 / (e5.fps || 10), a = t2.duration / n;
  for (let s = 0; s < a - 1; s++) {
    const e6 = s * n || 1;
    t2.setCurrentTime(e6);
    let a2 = 0, r = "";
    for (const i3 of t2.pages) {
      if (a2 += i3.duration, i3.set({ _rendering: a2 > e6 }), a2 > e6) {
        r = i3.id;
        break;
      }
    }
    const l = await t2._toCanvas({ pixelRatio: i2, pageId: r, _skipTimeout: true });
    o2.addFrame(l.getContext("2d"), { delay: n, copy: true });
  }
  for (const s of t2.pages) {
    s.set({ _rendering: false });
  }
  return t2.stop(), o2.render(), new Promise((e6) => {
    o2.on("finished", function(t3) {
      !function(e7, t4) {
        var i3 = new FileReader();
        i3.onload = function(e8) {
          t4(e8.target.result);
        }, i3.readAsDataURL(e7);
      }(t3, e6);
    });
  });
}, async saveAsGIF(i2 = {}) {
  var { fileName: o2 } = i2, n = e4(i2, ["fileName"]);
  const a = await t2.toGIFDataURL(n);
  downloadFile(a, o2 || "polotno.gif");
}, async toHTML({ elementHook: e5 } = { elementHook: void 0 }) {
  const i2 = t2.toJSON();
  return jsonToHTML({ json: i2, elementHook: e5 });
}, async saveAsHTML({ fileName: e5 } = {}) {
  const i2 = await t2.toHTML(), o2 = "data:text/html;base64," + window.btoa(unescape(encodeURIComponent(i2)));
  downloadFile(o2, e5 || "polotno.html");
}, async toSVG({ elementHook: e5, pageId: i2 } = { elementHook: void 0, pageId: void 0 }) {
  var o2;
  const n = t2.toJSON();
  i2 = i2 || (null === (o2 = n.pages[0]) || void 0 === o2 ? void 0 : o2.id);
  const a = n.pages.find((e6) => e6.id === i2);
  return jsonToSVG({ json: Object.assign(Object.assign({}, n), { pages: a ? [a] : [] }), elementHook: e5 });
}, async saveAsSVG({ fileName: e5, elementHook: i2, pageId: o2 } = {}) {
  const n = await t2.toSVG({ elementHook: i2, pageId: o2 }), a = "data:text/svg;base64," + window.btoa(unescape(encodeURIComponent(n)));
  downloadFile(a, e5 || "polotno.svg");
}, async saveAsPDF(i2 = {}) {
  var { fileName: o2 } = i2, n = e4(i2, ["fileName"]);
  (await t2._toPDF(Object.assign({ mimeType: "image/jpeg" }, n))).save(o2 || "polotno.pdf");
}, async waitLoading({ _skipTimeout: e5 = false } = {}) {
  e5 || await new Promise((e6) => setTimeout(e6, 50)), await whenLoaded();
}, toJSON: () => ({ width: t2.width, height: t2.height, fonts: getSnapshot(t2.fonts), pages: getSnapshot(t2.pages), audios: getSnapshot(t2.audios), unit: t2.unit, dpi: t2.dpi, custom: t2.custom, schemaVersion: t2.schemaVersion }), loadJSON(e5, i2 = false) {
  var n;
  const s = JSON.parse(JSON.stringify(e5)), r = s.schemaVersion || 0;
  r < 1 && flags.htmlRenderEnabled && forEveryChild2({ children: s.pages }, (e6) => {
    if ("text" === e6.type) {
      const t3 = 16, i3 = e6.letterSpacing * t3;
      e6.letterSpacing = i3 / e6.fontSize;
    }
  }), r < 2 && forEveryChild2({ children: s.pages }, (e6) => {
    e6.filters && Object.keys(e6.filters).forEach((t3) => {
      if (["warm", "cold", "natural"].includes(t3)) {
        return;
      }
      const i3 = e6.filters[t3];
      i3 && "number" == typeof i3.intensity && (i3.intensity = i3.intensity / 100);
    });
  }), delete s.schemaVersion;
  const l = t2.pages.indexOf(t2.activePage);
  let d4 = null === (n = s.pages[l] || s.pages[0]) || void 0 === n ? void 0 : n.id;
  s._activePageId = d4;
  const c2 = Object.assign({}, getSnapshot(t2));
  Object.assign(c2, s), c2.history = i2 ? t2.history.toJSON() : { history: [], undoIdx: -1 }, applySnapshot(t2, c2);
}, clear({ keepHistory: e5 = false } = {}) {
  const i2 = t2.pages.map((e6) => e6.id);
  t2.deletePages(i2), t2.custom = null, e5 || t2.history.clear();
}, addFont(e5) {
  t2.removeFont(e5.fontFamily), t2.fonts.push(e5), t2.loadFont(e5.fontFamily);
}, removeFont(e5) {
  t2.fonts.filter((t3) => t3.fontFamily === e5).forEach((e6) => destroy(e6));
}, addAudio(e5) {
  const i2 = Audio.create(Object.assign({ id: nanoid(10) }, e5));
  t2.audios.push(i2);
}, removeAudio(e5) {
  const i2 = t2.audios.find((t3) => t3.id === e5);
  i2 && t2.audios.remove(i2);
}, async loadFont(e5) {
  const i2 = t2.fonts.find((t3) => t3.fontFamily === e5) || globalFonts.find((t3) => t3.fontFamily === e5);
  let o2 = [{ fontStyle: "normal", fontWeight: "normal" }, { fontStyle: "normal", fontWeight: "bold" }];
  return i2 ? (i2.styles && (o2 = i2.styles.map((e6) => ({ fontStyle: e6.fontStyle || "normal", fontWeight: e6.fontWeight || "normal" }))), injectCustomFont(i2)) : injectGoogleFont(e5), Promise.all(o2.map((t3) => loadFont(e5, t3.fontStyle, t3.fontWeight)));
}, validate: (e5) => Store.validate(e5, [{ path: "", type: Store }]).map((e6) => ({ path: "store" + e6.context.map((e7) => e7.path).join("."), message: e6.message })) }));
function createStore({ key: e5, showCredit: t2 } = { key: "", showCredit: false }) {
  return Store.create({ _forceShowCredit: t2, _key: e5 });
}
var store_default = createStore;

export {
  TYPES,
  subTypeToPathDataFunc,
  figureToSvg,
  nanoid,
  pxToUnit,
  pxToUnitRounded,
  unitToPx,
  pxToUnitString,
  Effects,
  shapeFilterToCSS,
  Font,
  Store,
  createStore,
  store_default,
  INDEPENDENT_FILTERS,
  forEveryChild2 as forEveryChild,
  registerShapeModel
};
//# sourceMappingURL=chunk-PJEQXQTP.js.map
