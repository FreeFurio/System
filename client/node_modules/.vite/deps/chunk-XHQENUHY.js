import {
  ImagesGrid,
  UploadPanel,
  selectImage,
  selectVideo
} from "./chunk-66IZ6VUW.js";
import {
  ColorPicker,
  INFINITE_PREFIX,
  SWRGlobalState,
  Select,
  UNDEFINED,
  cache,
  color_picker_default,
  createCacheHelper,
  isFunction,
  isUndefined,
  require_cjs,
  serialize,
  useIsomorphicLayoutEffect,
  useSWR,
  withMiddleware
} from "./chunk-JVL76OAM.js";
import {
  registerNextDomDrop
} from "./chunk-RDFIOSVA.js";
import {
  Alignment,
  Button,
  Card,
  CloudUpload,
  Control,
  Cross,
  DragHandleVertical,
  EditableText,
  EyeOff,
  EyeOpen,
  Fullscreen,
  HTMLSelect,
  Help,
  Icon,
  InputGroup,
  Layers,
  LayoutGrid,
  Lock,
  Media,
  MenuItem,
  More,
  NewTextBox,
  NumericInput,
  Position,
  Search,
  Slider,
  Spinner,
  Switch,
  Tab,
  Tabs,
  Tooltip,
  Trash,
  Unlock,
  Upload,
  Video,
  isMobile,
  mobileStyle,
  observer,
  require_shim,
  styled_default,
  t,
  useMobile
} from "./chunk-EWQZPDGL.js";
import {
  Effects,
  INDEPENDENT_FILTERS,
  TYPES,
  figureToSvg,
  forEveryChild,
  nanoid,
  pxToUnit,
  pxToUnitRounded,
  shapeFilterToCSS,
  unitToPx
} from "./chunk-PJEQXQTP.js";
import {
  URLS,
  flags,
  getKey,
  isAlive,
  removeTags,
  svgToURL,
  templateList,
  textTemplateList,
  unsplashDownload,
  unsplashList
} from "./chunk-UKEGL2ZK.js";
import {
  observable
} from "./chunk-SXFTTVCS.js";
import {
  require_react
} from "./chunk-RA4EGHW6.js";
import {
  __commonJS,
  __esm,
  __export,
  __publicField,
  __toCommonJS,
  __toESM
} from "./chunk-2LSFTFF7.js";

// node_modules/@meronex/icons/fa/FaShapes.js
var require_FaShapes = __commonJS({
  "node_modules/@meronex/icons/fa/FaShapes.js"(exports, module) {
    var GenIcon = require_cjs().GenIcon;
    module.exports = function(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512", "fill": "currentColor" }, "child": [{ "tag": "path", "attr": { "d": "M128,256A128,128,0,1,0,256,384,128,128,0,0,0,128,256Zm379-54.86L400.07,18.29a37.26,37.26,0,0,0-64.14,0L229,201.14C214.76,225.52,232.58,256,261.09,256H474.91C503.42,256,521.24,225.52,507,201.14ZM480,288H320a32,32,0,0,0-32,32V480a32,32,0,0,0,32,32H480a32,32,0,0,0,32-32V320A32,32,0,0,0,480,288Z" } }] })(props);
    };
  }
});

// node_modules/@meronex/icons/fd/FdPageMultiple.js
var require_FdPageMultiple = __commonJS({
  "node_modules/@meronex/icons/fd/FdPageMultiple.js"(exports, module) {
    var GenIcon = require_cjs().GenIcon;
    module.exports = function(props) {
      return GenIcon({ "tag": "svg", "attr": { "version": "1.1", "id": "Layer_1", "x": "0px", "y": "0px", "viewBox": "0 0 100 100", "enableBackground": "new 0 0 100 100", "fill": "currentColor" }, "child": [{ "tag": "g", "attr": {}, "child": [{ "tag": "path", "attr": { "d": "M86.45,23.27h-3.475V90.18c0,0.835-0.677,1.513-1.513,1.513H31.987v3.475c0,0.836,0.677,1.513,1.513,1.513l0.001,0v0h52.95\n		c0.836,0,1.513-0.677,1.513-1.513V24.782C87.963,23.946,87.286,23.27,86.45,23.27z" } }, { "tag": "path", "attr": { "d": "M77.988,85.193V14.807c0-0.836-0.677-1.513-1.513-1.513h-3.475v66.911c0,0.836-0.677,1.513-1.513,1.513H22.011v3.475\n		c0,0.836,0.677,1.513,1.513,1.513c0,0,0,0,0,0h52.951C77.311,86.706,77.988,86.029,77.988,85.193z" } }, { "tag": "path", "attr": { "d": "M68.013,75.218V4.832c0-0.836-0.677-1.513-1.513-1.513H13.55c-0.836,0-1.513,0.677-1.513,1.513v70.386\n		c0,0.836,0.677,1.513,1.513,1.513H66.5C67.336,76.731,68.013,76.054,68.013,75.218z" } }], "content": "\n" }], "content": "\n" })(props);
    };
  }
});

// node_modules/@meronex/icons/ai/AiOutlineFacebook.js
var require_AiOutlineFacebook = __commonJS({
  "node_modules/@meronex/icons/ai/AiOutlineFacebook.js"(exports, module) {
    var GenIcon = require_cjs().GenIcon;
    module.exports = function(props) {
      return GenIcon({ "tag": "svg", "attr": { "className": "icon", "viewBox": "0 0 1024 1024", "fill": "currentColor" }, "child": [{ "tag": "path", "attr": { "d": "M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-32 736H663.9V602.2h104l15.6-120.7H663.9v-77.1c0-35 9.7-58.8 59.8-58.8h63.9v-108c-11.1-1.5-49-4.8-93.2-4.8-92.2 0-155.3 56.3-155.3 159.6v89H434.9v120.7h104.3V848H176V176h672v672z" } }], "content": "\n" })(props);
    };
  }
});

// node_modules/@meronex/icons/ai/AiOutlineInstagram.js
var require_AiOutlineInstagram = __commonJS({
  "node_modules/@meronex/icons/ai/AiOutlineInstagram.js"(exports, module) {
    var GenIcon = require_cjs().GenIcon;
    module.exports = function(props) {
      return GenIcon({ "tag": "svg", "attr": { "className": "icon", "viewBox": "0 0 1024 1024", "fill": "currentColor" }, "child": [{ "tag": "path", "attr": { "d": "M512 306.9c-113.5 0-205.1 91.6-205.1 205.1S398.5 717.1 512 717.1 717.1 625.5 717.1 512 625.5 306.9 512 306.9zm0 338.4c-73.4 0-133.3-59.9-133.3-133.3S438.6 378.7 512 378.7 645.3 438.6 645.3 512 585.4 645.3 512 645.3zm213.5-394.6c-26.5 0-47.9 21.4-47.9 47.9s21.4 47.9 47.9 47.9 47.9-21.3 47.9-47.9a47.84 47.84 0 0 0-47.9-47.9zM911.8 512c0-55.2.5-109.9-2.6-165-3.1-64-17.7-120.8-64.5-167.6-46.9-46.9-103.6-61.4-167.6-64.5-55.2-3.1-109.9-2.6-165-2.6-55.2 0-109.9-.5-165 2.6-64 3.1-120.8 17.7-167.6 64.5C132.6 226.3 118.1 283 115 347c-3.1 55.2-2.6 109.9-2.6 165s-.5 109.9 2.6 165c3.1 64 17.7 120.8 64.5 167.6 46.9 46.9 103.6 61.4 167.6 64.5 55.2 3.1 109.9 2.6 165 2.6 55.2 0 109.9.5 165-2.6 64-3.1 120.8-17.7 167.6-64.5 46.9-46.9 61.4-103.6 64.5-167.6 3.2-55.1 2.6-109.8 2.6-165zm-88 235.8c-7.3 18.2-16.1 31.8-30.2 45.8-14.1 14.1-27.6 22.9-45.8 30.2C695.2 844.7 570.3 840 512 840c-58.3 0-183.3 4.7-235.9-16.1-18.2-7.3-31.8-16.1-45.8-30.2-14.1-14.1-22.9-27.6-30.2-45.8C179.3 695.2 184 570.3 184 512c0-58.3-4.7-183.3 16.1-235.9 7.3-18.2 16.1-31.8 30.2-45.8s27.6-22.9 45.8-30.2C328.7 179.3 453.7 184 512 184s183.3-4.7 235.9 16.1c18.2 7.3 31.8 16.1 45.8 30.2 14.1 14.1 22.9 27.6 30.2 45.8C844.7 328.7 840 453.7 840 512c0 58.3 4.7 183.2-16.2 235.8z" } }], "content": "\n" })(props);
    };
  }
});

// node_modules/@meronex/icons/ai/AiOutlineYoutube.js
var require_AiOutlineYoutube = __commonJS({
  "node_modules/@meronex/icons/ai/AiOutlineYoutube.js"(exports, module) {
    var GenIcon = require_cjs().GenIcon;
    module.exports = function(props) {
      return GenIcon({ "tag": "svg", "attr": { "className": "icon", "viewBox": "0 0 1024 1024", "fill": "currentColor" }, "child": [{ "tag": "path", "attr": { "d": "M960 509.2c0-2.2 0-4.7-.1-7.6-.1-8.1-.3-17.2-.5-26.9-.8-27.9-2.2-55.7-4.4-81.9-3-36.1-7.4-66.2-13.4-88.8a139.52 139.52 0 0 0-98.3-98.5c-28.3-7.6-83.7-12.3-161.7-15.2-37.1-1.4-76.8-2.3-116.5-2.8-13.9-.2-26.8-.3-38.4-.4h-29.4c-11.6.1-24.5.2-38.4.4-39.7.5-79.4 1.4-116.5 2.8-78 3-133.5 7.7-161.7 15.2A139.35 139.35 0 0 0 82.4 304C76.3 326.6 72 356.7 69 392.8c-2.2 26.2-3.6 54-4.4 81.9-.3 9.7-.4 18.8-.5 26.9 0 2.9-.1 5.4-.1 7.6v5.6c0 2.2 0 4.7.1 7.6.1 8.1.3 17.2.5 26.9.8 27.9 2.2 55.7 4.4 81.9 3 36.1 7.4 66.2 13.4 88.8 12.8 47.9 50.4 85.7 98.3 98.5 28.2 7.6 83.7 12.3 161.7 15.2 37.1 1.4 76.8 2.3 116.5 2.8 13.9.2 26.8.3 38.4.4h29.4c11.6-.1 24.5-.2 38.4-.4 39.7-.5 79.4-1.4 116.5-2.8 78-3 133.5-7.7 161.7-15.2 47.9-12.8 85.5-50.5 98.3-98.5 6.1-22.6 10.4-52.7 13.4-88.8 2.2-26.2 3.6-54 4.4-81.9.3-9.7.4-18.8.5-26.9 0-2.9.1-5.4.1-7.6v-5.6zm-72 5.2c0 2.1 0 4.4-.1 7.1-.1 7.8-.3 16.4-.5 25.7-.7 26.6-2.1 53.2-4.2 77.9-2.7 32.2-6.5 58.6-11.2 76.3-6.2 23.1-24.4 41.4-47.4 47.5-21 5.6-73.9 10.1-145.8 12.8-36.4 1.4-75.6 2.3-114.7 2.8-13.7.2-26.4.3-37.8.3h-28.6l-37.8-.3c-39.1-.5-78.2-1.4-114.7-2.8-71.9-2.8-124.9-7.2-145.8-12.8-23-6.2-41.2-24.4-47.4-47.5-4.7-17.7-8.5-44.1-11.2-76.3-2.1-24.7-3.4-51.3-4.2-77.9-.3-9.3-.4-18-.5-25.7 0-2.7-.1-5.1-.1-7.1v-4.8c0-2.1 0-4.4.1-7.1.1-7.8.3-16.4.5-25.7.7-26.6 2.1-53.2 4.2-77.9 2.7-32.2 6.5-58.6 11.2-76.3 6.2-23.1 24.4-41.4 47.4-47.5 21-5.6 73.9-10.1 145.8-12.8 36.4-1.4 75.6-2.3 114.7-2.8 13.7-.2 26.4-.3 37.8-.3h28.6l37.8.3c39.1.5 78.2 1.4 114.7 2.8 71.9 2.8 124.9 7.2 145.8 12.8 23 6.2 41.2 24.4 47.4 47.5 4.7 17.7 8.5 44.1 11.2 76.3 2.1 24.7 3.4 51.3 4.2 77.9.3 9.3.4 18 .5 25.7 0 2.7.1 5.1.1 7.1v4.8zM423 646l232-135-232-133z" } }], "content": "\n" })(props);
    };
  }
});

// node_modules/@meronex/icons/ai/AiOutlineVideoCamera.js
var require_AiOutlineVideoCamera = __commonJS({
  "node_modules/@meronex/icons/ai/AiOutlineVideoCamera.js"(exports, module) {
    var GenIcon = require_cjs().GenIcon;
    module.exports = function(props) {
      return GenIcon({ "tag": "svg", "attr": { "className": "icon", "viewBox": "0 0 1024 1024", "fill": "currentColor" }, "child": [{ "tag": "path", "attr": { "d": "M912 302.3L784 376V224c0-35.3-28.7-64-64-64H128c-35.3 0-64 28.7-64 64v576c0 35.3 28.7 64 64 64h592c35.3 0 64-28.7 64-64V648l128 73.7c21.3 12.3 48-3.1 48-27.6V330c0-24.6-26.7-40-48-27.7zM712 792H136V232h576v560zm176-167l-104-59.8V458.9L888 399v226zM208 360h112c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H208c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8z" } }], "content": "\n" })(props);
    };
  }
});

// node_modules/@meronex/icons/zo/ZoDocument.js
var require_ZoDocument = __commonJS({
  "node_modules/@meronex/icons/zo/ZoDocument.js"(exports, module) {
    var GenIcon = require_cjs().GenIcon;
    module.exports = function(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 20 20", "fill": "currentColor" }, "child": [{ "tag": "path", "attr": { "d": "M4 18h12V6h-4V2H4v16zm-2 1V0h12l4 4v16H2v-1z" } }] })(props);
    };
  }
});

// node_modules/@meronex/icons/ai/AiOutlineIdcard.js
var require_AiOutlineIdcard = __commonJS({
  "node_modules/@meronex/icons/ai/AiOutlineIdcard.js"(exports, module) {
    var GenIcon = require_cjs().GenIcon;
    module.exports = function(props) {
      return GenIcon({ "tag": "svg", "attr": { "className": "icon", "viewBox": "0 0 1024 1024", "fill": "currentColor" }, "child": [{ "tag": "path", "attr": { "d": "M928 160H96c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32zm-40 632H136V232h752v560zM610.3 476h123.4c1.3 0 2.3-3.6 2.3-8v-48c0-4.4-1-8-2.3-8H610.3c-1.3 0-2.3 3.6-2.3 8v48c0 4.4 1 8 2.3 8zm4.8 144h185.7c3.9 0 7.1-3.6 7.1-8v-48c0-4.4-3.2-8-7.1-8H615.1c-3.9 0-7.1 3.6-7.1 8v48c0 4.4 3.2 8 7.1 8zM224 673h43.9c4.2 0 7.6-3.3 7.9-7.5 3.8-50.5 46-90.5 97.2-90.5s93.4 40 97.2 90.5c.3 4.2 3.7 7.5 7.9 7.5H522a8 8 0 0 0 8-8.4c-2.8-53.3-32-99.7-74.6-126.1a111.8 111.8 0 0 0 29.1-75.5c0-61.9-49.9-112-111.4-112s-111.4 50.1-111.4 112c0 29.1 11 55.5 29.1 75.5a158.09 158.09 0 0 0-74.6 126.1c-.4 4.6 3.2 8.4 7.8 8.4zm149-262c28.5 0 51.7 23.3 51.7 52s-23.2 52-51.7 52-51.7-23.3-51.7-52 23.2-52 51.7-52z" } }], "content": "\n" })(props);
    };
  }
});

// node_modules/@meronex/icons/ai/AiOutlineLinkedin.js
var require_AiOutlineLinkedin = __commonJS({
  "node_modules/@meronex/icons/ai/AiOutlineLinkedin.js"(exports, module) {
    var GenIcon = require_cjs().GenIcon;
    module.exports = function(props) {
      return GenIcon({ "tag": "svg", "attr": { "className": "icon", "viewBox": "0 0 1024 1024", "fill": "currentColor" }, "child": [{ "tag": "path", "attr": { "d": "M847.7 112H176.3c-35.5 0-64.3 28.8-64.3 64.3v671.4c0 35.5 28.8 64.3 64.3 64.3h671.4c35.5 0 64.3-28.8 64.3-64.3V176.3c0-35.5-28.8-64.3-64.3-64.3zm0 736c-447.8-.1-671.7-.2-671.7-.3.1-447.8.2-671.7.3-671.7 447.8.1 671.7.2 671.7.3-.1 447.8-.2 671.7-.3 671.7zM230.6 411.9h118.7v381.8H230.6zm59.4-52.2c37.9 0 68.8-30.8 68.8-68.8a68.8 68.8 0 1 0-137.6 0c-.1 38 30.7 68.8 68.8 68.8zm252.3 245.1c0-49.8 9.5-98 71.2-98 60.8 0 61.7 56.9 61.7 101.2v185.7h118.6V584.3c0-102.8-22.2-181.9-142.3-181.9-57.7 0-96.4 31.7-112.3 61.7h-1.6v-52.2H423.7v381.8h118.6V604.8z" } }], "content": "\n" })(props);
    };
  }
});

// node_modules/@meronex/icons/ai/AiOutlineTwitter.js
var require_AiOutlineTwitter = __commonJS({
  "node_modules/@meronex/icons/ai/AiOutlineTwitter.js"(exports, module) {
    var GenIcon = require_cjs().GenIcon;
    module.exports = function(props) {
      return GenIcon({ "tag": "svg", "attr": { "className": "icon", "viewBox": "0 0 1024 1024", "fill": "currentColor" }, "child": [{ "tag": "path", "attr": { "d": "M928 254.3c-30.6 13.2-63.9 22.7-98.2 26.4a170.1 170.1 0 0 0 75-94 336.64 336.64 0 0 1-108.2 41.2A170.1 170.1 0 0 0 672 174c-94.5 0-170.5 76.6-170.5 170.6 0 13.2 1.6 26.4 4.2 39.1-141.5-7.4-267.7-75-351.6-178.5a169.32 169.32 0 0 0-23.2 86.1c0 59.2 30.1 111.4 76 142.1a172 172 0 0 1-77.1-21.7v2.1c0 82.9 58.6 151.6 136.7 167.4a180.6 180.6 0 0 1-44.9 5.8c-11.1 0-21.6-1.1-32.2-2.6C211 652 273.9 701.1 348.8 702.7c-58.6 45.9-132 72.9-211.7 72.9-14.3 0-27.5-.5-41.2-2.1C171.5 822 261.2 850 357.8 850 671.4 850 843 590.2 843 364.7c0-7.4 0-14.8-.5-22.2 33.2-24.3 62.3-54.4 85.5-88.2z" } }], "content": "\n" })(props);
    };
  }
});

// node_modules/@meronex/icons/ios/IosColorPalette.js
var require_IosColorPalette = __commonJS({
  "node_modules/@meronex/icons/ios/IosColorPalette.js"(exports, module) {
    var GenIcon = require_cjs().GenIcon;
    module.exports = function(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512", "fill": "currentColor" }, "child": [{ "tag": "path", "attr": { "d": "M430.1 347.9c-6.6-6.1-16.3-7.6-24.6-9-11.5-1.9-15.9-4-22.6-10-14.3-12.7-14.3-31.1 0-43.8l30.3-26.9c46.4-41 46.4-108.2 0-149.2-34.2-30.1-80.1-45-127.8-45-55.7 0-113.9 20.3-158.8 60.1-83.5 73.8-83.5 194.7 0 268.5 41.5 36.7 97.5 55 152.9 55.4h1.7c55.4 0 110-17.9 148.8-52.4 14.4-12.7 12-36.6.1-47.7zM120 216c0-17.7 14.3-32 32-32s32 14.3 32 32-14.3 32-32 32-32-14.3-32-32zm40 126c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm64-161c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm72 219c-26.5 0-48-21.5-48-48s21.5-48 48-48 48 21.5 48 48-21.5 48-48 48zm24-208c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z" } }] })(props);
    };
  }
});

// node_modules/sortablejs/modular/sortable.esm.js
var sortable_esm_exports = {};
__export(sortable_esm_exports, {
  MultiDrag: () => MultiDragPlugin,
  Sortable: () => Sortable,
  Swap: () => SwapPlugin,
  default: () => sortable_esm_default
});
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _typeof(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof = function(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof(obj);
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _unsupportedIterableToArray(o3, minLen) {
  if (!o3)
    return;
  if (typeof o3 === "string")
    return _arrayLikeToArray(o3, minLen);
  var n4 = Object.prototype.toString.call(o3).slice(8, -1);
  if (n4 === "Object" && o3.constructor)
    n4 = o3.constructor.name;
  if (n4 === "Map" || n4 === "Set")
    return Array.from(o3);
  if (n4 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n4))
    return _arrayLikeToArray(o3, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function userAgent(pattern) {
  if (typeof window !== "undefined" && window.navigator) {
    return !!navigator.userAgent.match(pattern);
  }
}
function on(el, event, fn) {
  el.addEventListener(event, fn, !IE11OrLess && captureMode);
}
function off(el, event, fn) {
  el.removeEventListener(event, fn, !IE11OrLess && captureMode);
}
function matches(el, selector) {
  if (!selector)
    return;
  selector[0] === ">" && (selector = selector.substring(1));
  if (el) {
    try {
      if (el.matches) {
        return el.matches(selector);
      } else if (el.msMatchesSelector) {
        return el.msMatchesSelector(selector);
      } else if (el.webkitMatchesSelector) {
        return el.webkitMatchesSelector(selector);
      }
    } catch (_2) {
      return false;
    }
  }
  return false;
}
function getParentOrHost(el) {
  return el.host && el !== document && el.host.nodeType ? el.host : el.parentNode;
}
function closest(el, selector, ctx, includeCTX) {
  if (el) {
    ctx = ctx || document;
    do {
      if (selector != null && (selector[0] === ">" ? el.parentNode === ctx && matches(el, selector) : matches(el, selector)) || includeCTX && el === ctx) {
        return el;
      }
      if (el === ctx)
        break;
    } while (el = getParentOrHost(el));
  }
  return null;
}
function toggleClass(el, name, state) {
  if (el && name) {
    if (el.classList) {
      el.classList[state ? "add" : "remove"](name);
    } else {
      var className = (" " + el.className + " ").replace(R_SPACE, " ").replace(" " + name + " ", " ");
      el.className = (className + (state ? " " + name : "")).replace(R_SPACE, " ");
    }
  }
}
function css(el, prop, val) {
  var style = el && el.style;
  if (style) {
    if (val === void 0) {
      if (document.defaultView && document.defaultView.getComputedStyle) {
        val = document.defaultView.getComputedStyle(el, "");
      } else if (el.currentStyle) {
        val = el.currentStyle;
      }
      return prop === void 0 ? val : val[prop];
    } else {
      if (!(prop in style) && prop.indexOf("webkit") === -1) {
        prop = "-webkit-" + prop;
      }
      style[prop] = val + (typeof val === "string" ? "" : "px");
    }
  }
}
function matrix(el, selfOnly) {
  var appliedTransforms = "";
  if (typeof el === "string") {
    appliedTransforms = el;
  } else {
    do {
      var transform = css(el, "transform");
      if (transform && transform !== "none") {
        appliedTransforms = transform + " " + appliedTransforms;
      }
    } while (!selfOnly && (el = el.parentNode));
  }
  var matrixFn = window.DOMMatrix || window.WebKitCSSMatrix || window.CSSMatrix || window.MSCSSMatrix;
  return matrixFn && new matrixFn(appliedTransforms);
}
function find(ctx, tagName, iterator) {
  if (ctx) {
    var list = ctx.getElementsByTagName(tagName), i = 0, n4 = list.length;
    if (iterator) {
      for (; i < n4; i++) {
        iterator(list[i], i);
      }
    }
    return list;
  }
  return [];
}
function getWindowScrollingElement() {
  var scrollingElement = document.scrollingElement;
  if (scrollingElement) {
    return scrollingElement;
  } else {
    return document.documentElement;
  }
}
function getRect(el, relativeToContainingBlock, relativeToNonStaticParent, undoScale, container) {
  if (!el.getBoundingClientRect && el !== window)
    return;
  var elRect, top, left, bottom, right, height, width;
  if (el !== window && el.parentNode && el !== getWindowScrollingElement()) {
    elRect = el.getBoundingClientRect();
    top = elRect.top;
    left = elRect.left;
    bottom = elRect.bottom;
    right = elRect.right;
    height = elRect.height;
    width = elRect.width;
  } else {
    top = 0;
    left = 0;
    bottom = window.innerHeight;
    right = window.innerWidth;
    height = window.innerHeight;
    width = window.innerWidth;
  }
  if ((relativeToContainingBlock || relativeToNonStaticParent) && el !== window) {
    container = container || el.parentNode;
    if (!IE11OrLess) {
      do {
        if (container && container.getBoundingClientRect && (css(container, "transform") !== "none" || relativeToNonStaticParent && css(container, "position") !== "static")) {
          var containerRect = container.getBoundingClientRect();
          top -= containerRect.top + parseInt(css(container, "border-top-width"));
          left -= containerRect.left + parseInt(css(container, "border-left-width"));
          bottom = top + elRect.height;
          right = left + elRect.width;
          break;
        }
      } while (container = container.parentNode);
    }
  }
  if (undoScale && el !== window) {
    var elMatrix = matrix(container || el), scaleX = elMatrix && elMatrix.a, scaleY = elMatrix && elMatrix.d;
    if (elMatrix) {
      top /= scaleY;
      left /= scaleX;
      width /= scaleX;
      height /= scaleY;
      bottom = top + height;
      right = left + width;
    }
  }
  return {
    top,
    left,
    bottom,
    right,
    width,
    height
  };
}
function isScrolledPast(el, elSide, parentSide) {
  var parent = getParentAutoScrollElement(el, true), elSideVal = getRect(el)[elSide];
  while (parent) {
    var parentSideVal = getRect(parent)[parentSide], visible = void 0;
    if (parentSide === "top" || parentSide === "left") {
      visible = elSideVal >= parentSideVal;
    } else {
      visible = elSideVal <= parentSideVal;
    }
    if (!visible)
      return parent;
    if (parent === getWindowScrollingElement())
      break;
    parent = getParentAutoScrollElement(parent, false);
  }
  return false;
}
function getChild(el, childNum, options, includeDragEl) {
  var currentChild = 0, i = 0, children = el.children;
  while (i < children.length) {
    if (children[i].style.display !== "none" && children[i] !== Sortable.ghost && (includeDragEl || children[i] !== Sortable.dragged) && closest(children[i], options.draggable, el, false)) {
      if (currentChild === childNum) {
        return children[i];
      }
      currentChild++;
    }
    i++;
  }
  return null;
}
function lastChild(el, selector) {
  var last = el.lastElementChild;
  while (last && (last === Sortable.ghost || css(last, "display") === "none" || selector && !matches(last, selector))) {
    last = last.previousElementSibling;
  }
  return last || null;
}
function index(el, selector) {
  var index2 = 0;
  if (!el || !el.parentNode) {
    return -1;
  }
  while (el = el.previousElementSibling) {
    if (el.nodeName.toUpperCase() !== "TEMPLATE" && el !== Sortable.clone && (!selector || matches(el, selector))) {
      index2++;
    }
  }
  return index2;
}
function getRelativeScrollOffset(el) {
  var offsetLeft = 0, offsetTop = 0, winScroller = getWindowScrollingElement();
  if (el) {
    do {
      var elMatrix = matrix(el), scaleX = elMatrix.a, scaleY = elMatrix.d;
      offsetLeft += el.scrollLeft * scaleX;
      offsetTop += el.scrollTop * scaleY;
    } while (el !== winScroller && (el = el.parentNode));
  }
  return [offsetLeft, offsetTop];
}
function indexOfObject(arr, obj) {
  for (var i in arr) {
    if (!arr.hasOwnProperty(i))
      continue;
    for (var key in obj) {
      if (obj.hasOwnProperty(key) && obj[key] === arr[i][key])
        return Number(i);
    }
  }
  return -1;
}
function getParentAutoScrollElement(el, includeSelf) {
  if (!el || !el.getBoundingClientRect)
    return getWindowScrollingElement();
  var elem = el;
  var gotSelf = false;
  do {
    if (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {
      var elemCSS = css(elem);
      if (elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == "auto" || elemCSS.overflowX == "scroll") || elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == "auto" || elemCSS.overflowY == "scroll")) {
        if (!elem.getBoundingClientRect || elem === document.body)
          return getWindowScrollingElement();
        if (gotSelf || includeSelf)
          return elem;
        gotSelf = true;
      }
    }
  } while (elem = elem.parentNode);
  return getWindowScrollingElement();
}
function extend(dst, src) {
  if (dst && src) {
    for (var key in src) {
      if (src.hasOwnProperty(key)) {
        dst[key] = src[key];
      }
    }
  }
  return dst;
}
function isRectEqual(rect1, rect2) {
  return Math.round(rect1.top) === Math.round(rect2.top) && Math.round(rect1.left) === Math.round(rect2.left) && Math.round(rect1.height) === Math.round(rect2.height) && Math.round(rect1.width) === Math.round(rect2.width);
}
function throttle(callback, ms) {
  return function() {
    if (!_throttleTimeout) {
      var args = arguments, _this = this;
      if (args.length === 1) {
        callback.call(_this, args[0]);
      } else {
        callback.apply(_this, args);
      }
      _throttleTimeout = setTimeout(function() {
        _throttleTimeout = void 0;
      }, ms);
    }
  };
}
function cancelThrottle() {
  clearTimeout(_throttleTimeout);
  _throttleTimeout = void 0;
}
function scrollBy(el, x5, y3) {
  el.scrollLeft += x5;
  el.scrollTop += y3;
}
function clone(el) {
  var Polymer = window.Polymer;
  var $2 = window.jQuery || window.Zepto;
  if (Polymer && Polymer.dom) {
    return Polymer.dom(el).cloneNode(true);
  } else if ($2) {
    return $2(el).clone(true)[0];
  } else {
    return el.cloneNode(true);
  }
}
function setRect(el, rect) {
  css(el, "position", "absolute");
  css(el, "top", rect.top);
  css(el, "left", rect.left);
  css(el, "width", rect.width);
  css(el, "height", rect.height);
}
function unsetRect(el) {
  css(el, "position", "");
  css(el, "top", "");
  css(el, "left", "");
  css(el, "width", "");
  css(el, "height", "");
}
function getChildContainingRectFromElement(container, options, ghostEl2) {
  var rect = {};
  Array.from(container.children).forEach(function(child) {
    var _rect$left, _rect$top, _rect$right, _rect$bottom;
    if (!closest(child, options.draggable, container, false) || child.animated || child === ghostEl2)
      return;
    var childRect = getRect(child);
    rect.left = Math.min((_rect$left = rect.left) !== null && _rect$left !== void 0 ? _rect$left : Infinity, childRect.left);
    rect.top = Math.min((_rect$top = rect.top) !== null && _rect$top !== void 0 ? _rect$top : Infinity, childRect.top);
    rect.right = Math.max((_rect$right = rect.right) !== null && _rect$right !== void 0 ? _rect$right : -Infinity, childRect.right);
    rect.bottom = Math.max((_rect$bottom = rect.bottom) !== null && _rect$bottom !== void 0 ? _rect$bottom : -Infinity, childRect.bottom);
  });
  rect.width = rect.right - rect.left;
  rect.height = rect.bottom - rect.top;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function AnimationStateManager() {
  var animationStates = [], animationCallbackId;
  return {
    captureAnimationState: function captureAnimationState() {
      animationStates = [];
      if (!this.options.animation)
        return;
      var children = [].slice.call(this.el.children);
      children.forEach(function(child) {
        if (css(child, "display") === "none" || child === Sortable.ghost)
          return;
        animationStates.push({
          target: child,
          rect: getRect(child)
        });
        var fromRect = _objectSpread2({}, animationStates[animationStates.length - 1].rect);
        if (child.thisAnimationDuration) {
          var childMatrix = matrix(child, true);
          if (childMatrix) {
            fromRect.top -= childMatrix.f;
            fromRect.left -= childMatrix.e;
          }
        }
        child.fromRect = fromRect;
      });
    },
    addAnimationState: function addAnimationState(state) {
      animationStates.push(state);
    },
    removeAnimationState: function removeAnimationState(target) {
      animationStates.splice(indexOfObject(animationStates, {
        target
      }), 1);
    },
    animateAll: function animateAll(callback) {
      var _this = this;
      if (!this.options.animation) {
        clearTimeout(animationCallbackId);
        if (typeof callback === "function")
          callback();
        return;
      }
      var animating = false, animationTime = 0;
      animationStates.forEach(function(state) {
        var time = 0, target = state.target, fromRect = target.fromRect, toRect = getRect(target), prevFromRect = target.prevFromRect, prevToRect = target.prevToRect, animatingRect = state.rect, targetMatrix = matrix(target, true);
        if (targetMatrix) {
          toRect.top -= targetMatrix.f;
          toRect.left -= targetMatrix.e;
        }
        target.toRect = toRect;
        if (target.thisAnimationDuration) {
          if (isRectEqual(prevFromRect, toRect) && !isRectEqual(fromRect, toRect) && // Make sure animatingRect is on line between toRect & fromRect
          (animatingRect.top - toRect.top) / (animatingRect.left - toRect.left) === (fromRect.top - toRect.top) / (fromRect.left - toRect.left)) {
            time = calculateRealTime(animatingRect, prevFromRect, prevToRect, _this.options);
          }
        }
        if (!isRectEqual(toRect, fromRect)) {
          target.prevFromRect = fromRect;
          target.prevToRect = toRect;
          if (!time) {
            time = _this.options.animation;
          }
          _this.animate(target, animatingRect, toRect, time);
        }
        if (time) {
          animating = true;
          animationTime = Math.max(animationTime, time);
          clearTimeout(target.animationResetTimer);
          target.animationResetTimer = setTimeout(function() {
            target.animationTime = 0;
            target.prevFromRect = null;
            target.fromRect = null;
            target.prevToRect = null;
            target.thisAnimationDuration = null;
          }, time);
          target.thisAnimationDuration = time;
        }
      });
      clearTimeout(animationCallbackId);
      if (!animating) {
        if (typeof callback === "function")
          callback();
      } else {
        animationCallbackId = setTimeout(function() {
          if (typeof callback === "function")
            callback();
        }, animationTime);
      }
      animationStates = [];
    },
    animate: function animate(target, currentRect, toRect, duration) {
      if (duration) {
        css(target, "transition", "");
        css(target, "transform", "");
        var elMatrix = matrix(this.el), scaleX = elMatrix && elMatrix.a, scaleY = elMatrix && elMatrix.d, translateX = (currentRect.left - toRect.left) / (scaleX || 1), translateY = (currentRect.top - toRect.top) / (scaleY || 1);
        target.animatingX = !!translateX;
        target.animatingY = !!translateY;
        css(target, "transform", "translate3d(" + translateX + "px," + translateY + "px,0)");
        this.forRepaintDummy = repaint(target);
        css(target, "transition", "transform " + duration + "ms" + (this.options.easing ? " " + this.options.easing : ""));
        css(target, "transform", "translate3d(0,0,0)");
        typeof target.animated === "number" && clearTimeout(target.animated);
        target.animated = setTimeout(function() {
          css(target, "transition", "");
          css(target, "transform", "");
          target.animated = false;
          target.animatingX = false;
          target.animatingY = false;
        }, duration);
      }
    }
  };
}
function repaint(target) {
  return target.offsetWidth;
}
function calculateRealTime(animatingRect, fromRect, toRect, options) {
  return Math.sqrt(Math.pow(fromRect.top - animatingRect.top, 2) + Math.pow(fromRect.left - animatingRect.left, 2)) / Math.sqrt(Math.pow(fromRect.top - toRect.top, 2) + Math.pow(fromRect.left - toRect.left, 2)) * options.animation;
}
function dispatchEvent(_ref) {
  var sortable = _ref.sortable, rootEl2 = _ref.rootEl, name = _ref.name, targetEl = _ref.targetEl, cloneEl2 = _ref.cloneEl, toEl = _ref.toEl, fromEl = _ref.fromEl, oldIndex2 = _ref.oldIndex, newIndex2 = _ref.newIndex, oldDraggableIndex2 = _ref.oldDraggableIndex, newDraggableIndex2 = _ref.newDraggableIndex, originalEvent = _ref.originalEvent, putSortable2 = _ref.putSortable, extraEventProperties = _ref.extraEventProperties;
  sortable = sortable || rootEl2 && rootEl2[expando];
  if (!sortable)
    return;
  var evt, options = sortable.options, onName = "on" + name.charAt(0).toUpperCase() + name.substr(1);
  if (window.CustomEvent && !IE11OrLess && !Edge) {
    evt = new CustomEvent(name, {
      bubbles: true,
      cancelable: true
    });
  } else {
    evt = document.createEvent("Event");
    evt.initEvent(name, true, true);
  }
  evt.to = toEl || rootEl2;
  evt.from = fromEl || rootEl2;
  evt.item = targetEl || rootEl2;
  evt.clone = cloneEl2;
  evt.oldIndex = oldIndex2;
  evt.newIndex = newIndex2;
  evt.oldDraggableIndex = oldDraggableIndex2;
  evt.newDraggableIndex = newDraggableIndex2;
  evt.originalEvent = originalEvent;
  evt.pullMode = putSortable2 ? putSortable2.lastPutMode : void 0;
  var allEventProperties = _objectSpread2(_objectSpread2({}, extraEventProperties), PluginManager.getEventProperties(name, sortable));
  for (var option2 in allEventProperties) {
    evt[option2] = allEventProperties[option2];
  }
  if (rootEl2) {
    rootEl2.dispatchEvent(evt);
  }
  if (options[onName]) {
    options[onName].call(sortable, evt);
  }
}
function _dispatchEvent(info) {
  dispatchEvent(_objectSpread2({
    putSortable,
    cloneEl,
    targetEl: dragEl,
    rootEl,
    oldIndex,
    oldDraggableIndex,
    newIndex,
    newDraggableIndex
  }, info));
}
function Sortable(el, options) {
  if (!(el && el.nodeType && el.nodeType === 1)) {
    throw "Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(el));
  }
  this.el = el;
  this.options = options = _extends({}, options);
  el[expando] = this;
  var defaults2 = {
    group: null,
    sort: true,
    disabled: false,
    store: null,
    handle: null,
    draggable: /^[uo]l$/i.test(el.nodeName) ? ">li" : ">*",
    swapThreshold: 1,
    // percentage; 0 <= x <= 1
    invertSwap: false,
    // invert always
    invertedSwapThreshold: null,
    // will be set to same as swapThreshold if default
    removeCloneOnHide: true,
    direction: function direction() {
      return _detectDirection(el, this.options);
    },
    ghostClass: "sortable-ghost",
    chosenClass: "sortable-chosen",
    dragClass: "sortable-drag",
    ignore: "a, img",
    filter: null,
    preventOnFilter: true,
    animation: 0,
    easing: null,
    setData: function setData(dataTransfer, dragEl2) {
      dataTransfer.setData("Text", dragEl2.textContent);
    },
    dropBubble: false,
    dragoverBubble: false,
    dataIdAttr: "data-id",
    delay: 0,
    delayOnTouchOnly: false,
    touchStartThreshold: (Number.parseInt ? Number : window).parseInt(window.devicePixelRatio, 10) || 1,
    forceFallback: false,
    fallbackClass: "sortable-fallback",
    fallbackOnBody: false,
    fallbackTolerance: 0,
    fallbackOffset: {
      x: 0,
      y: 0
    },
    // Disabled on Safari: #1571; Enabled on Safari IOS: #2244
    supportPointer: Sortable.supportPointer !== false && "PointerEvent" in window && (!Safari || IOS),
    emptyInsertThreshold: 5
  };
  PluginManager.initializePlugins(this, el, defaults2);
  for (var name in defaults2) {
    !(name in options) && (options[name] = defaults2[name]);
  }
  _prepareGroup(options);
  for (var fn in this) {
    if (fn.charAt(0) === "_" && typeof this[fn] === "function") {
      this[fn] = this[fn].bind(this);
    }
  }
  this.nativeDraggable = options.forceFallback ? false : supportDraggable;
  if (this.nativeDraggable) {
    this.options.touchStartThreshold = 1;
  }
  if (options.supportPointer) {
    on(el, "pointerdown", this._onTapStart);
  } else {
    on(el, "mousedown", this._onTapStart);
    on(el, "touchstart", this._onTapStart);
  }
  if (this.nativeDraggable) {
    on(el, "dragover", this);
    on(el, "dragenter", this);
  }
  sortables.push(this.el);
  options.store && options.store.get && this.sort(options.store.get(this) || []);
  _extends(this, AnimationStateManager());
}
function _globalDragOver(evt) {
  if (evt.dataTransfer) {
    evt.dataTransfer.dropEffect = "move";
  }
  evt.cancelable && evt.preventDefault();
}
function _onMove(fromEl, toEl, dragEl2, dragRect, targetEl, targetRect, originalEvent, willInsertAfter) {
  var evt, sortable = fromEl[expando], onMoveFn = sortable.options.onMove, retVal;
  if (window.CustomEvent && !IE11OrLess && !Edge) {
    evt = new CustomEvent("move", {
      bubbles: true,
      cancelable: true
    });
  } else {
    evt = document.createEvent("Event");
    evt.initEvent("move", true, true);
  }
  evt.to = toEl;
  evt.from = fromEl;
  evt.dragged = dragEl2;
  evt.draggedRect = dragRect;
  evt.related = targetEl || toEl;
  evt.relatedRect = targetRect || getRect(toEl);
  evt.willInsertAfter = willInsertAfter;
  evt.originalEvent = originalEvent;
  fromEl.dispatchEvent(evt);
  if (onMoveFn) {
    retVal = onMoveFn.call(sortable, evt, originalEvent);
  }
  return retVal;
}
function _disableDraggable(el) {
  el.draggable = false;
}
function _unsilent() {
  _silent = false;
}
function _ghostIsFirst(evt, vertical, sortable) {
  var firstElRect = getRect(getChild(sortable.el, 0, sortable.options, true));
  var childContainingRect = getChildContainingRectFromElement(sortable.el, sortable.options, ghostEl);
  var spacer = 10;
  return vertical ? evt.clientX < childContainingRect.left - spacer || evt.clientY < firstElRect.top && evt.clientX < firstElRect.right : evt.clientY < childContainingRect.top - spacer || evt.clientY < firstElRect.bottom && evt.clientX < firstElRect.left;
}
function _ghostIsLast(evt, vertical, sortable) {
  var lastElRect = getRect(lastChild(sortable.el, sortable.options.draggable));
  var childContainingRect = getChildContainingRectFromElement(sortable.el, sortable.options, ghostEl);
  var spacer = 10;
  return vertical ? evt.clientX > childContainingRect.right + spacer || evt.clientY > lastElRect.bottom && evt.clientX > lastElRect.left : evt.clientY > childContainingRect.bottom + spacer || evt.clientX > lastElRect.right && evt.clientY > lastElRect.top;
}
function _getSwapDirection(evt, target, targetRect, vertical, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {
  var mouseOnAxis = vertical ? evt.clientY : evt.clientX, targetLength = vertical ? targetRect.height : targetRect.width, targetS1 = vertical ? targetRect.top : targetRect.left, targetS2 = vertical ? targetRect.bottom : targetRect.right, invert = false;
  if (!invertSwap) {
    if (isLastTarget && targetMoveDistance < targetLength * swapThreshold) {
      if (!pastFirstInvertThresh && (lastDirection === 1 ? mouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2 : mouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2)) {
        pastFirstInvertThresh = true;
      }
      if (!pastFirstInvertThresh) {
        if (lastDirection === 1 ? mouseOnAxis < targetS1 + targetMoveDistance : mouseOnAxis > targetS2 - targetMoveDistance) {
          return -lastDirection;
        }
      } else {
        invert = true;
      }
    } else {
      if (mouseOnAxis > targetS1 + targetLength * (1 - swapThreshold) / 2 && mouseOnAxis < targetS2 - targetLength * (1 - swapThreshold) / 2) {
        return _getInsertDirection(target);
      }
    }
  }
  invert = invert || invertSwap;
  if (invert) {
    if (mouseOnAxis < targetS1 + targetLength * invertedSwapThreshold / 2 || mouseOnAxis > targetS2 - targetLength * invertedSwapThreshold / 2) {
      return mouseOnAxis > targetS1 + targetLength / 2 ? 1 : -1;
    }
  }
  return 0;
}
function _getInsertDirection(target) {
  if (index(dragEl) < index(target)) {
    return 1;
  } else {
    return -1;
  }
}
function _generateId(el) {
  var str = el.tagName + el.className + el.src + el.href + el.textContent, i = str.length, sum = 0;
  while (i--) {
    sum += str.charCodeAt(i);
  }
  return sum.toString(36);
}
function _saveInputCheckedState(root) {
  savedInputChecked.length = 0;
  var inputs = root.getElementsByTagName("input");
  var idx = inputs.length;
  while (idx--) {
    var el = inputs[idx];
    el.checked && savedInputChecked.push(el);
  }
}
function _nextTick(fn) {
  return setTimeout(fn, 0);
}
function _cancelNextTick(id) {
  return clearTimeout(id);
}
function AutoScrollPlugin() {
  function AutoScroll() {
    this.defaults = {
      scroll: true,
      forceAutoScrollFallback: false,
      scrollSensitivity: 30,
      scrollSpeed: 10,
      bubbleScroll: true
    };
    for (var fn in this) {
      if (fn.charAt(0) === "_" && typeof this[fn] === "function") {
        this[fn] = this[fn].bind(this);
      }
    }
  }
  AutoScroll.prototype = {
    dragStarted: function dragStarted2(_ref) {
      var originalEvent = _ref.originalEvent;
      if (this.sortable.nativeDraggable) {
        on(document, "dragover", this._handleAutoScroll);
      } else {
        if (this.options.supportPointer) {
          on(document, "pointermove", this._handleFallbackAutoScroll);
        } else if (originalEvent.touches) {
          on(document, "touchmove", this._handleFallbackAutoScroll);
        } else {
          on(document, "mousemove", this._handleFallbackAutoScroll);
        }
      }
    },
    dragOverCompleted: function dragOverCompleted(_ref2) {
      var originalEvent = _ref2.originalEvent;
      if (!this.options.dragOverBubble && !originalEvent.rootEl) {
        this._handleAutoScroll(originalEvent);
      }
    },
    drop: function drop3() {
      if (this.sortable.nativeDraggable) {
        off(document, "dragover", this._handleAutoScroll);
      } else {
        off(document, "pointermove", this._handleFallbackAutoScroll);
        off(document, "touchmove", this._handleFallbackAutoScroll);
        off(document, "mousemove", this._handleFallbackAutoScroll);
      }
      clearPointerElemChangedInterval();
      clearAutoScrolls();
      cancelThrottle();
    },
    nulling: function nulling() {
      touchEvt$1 = scrollRootEl = scrollEl = scrolling = pointerElemChangedInterval = lastAutoScrollX = lastAutoScrollY = null;
      autoScrolls.length = 0;
    },
    _handleFallbackAutoScroll: function _handleFallbackAutoScroll(evt) {
      this._handleAutoScroll(evt, true);
    },
    _handleAutoScroll: function _handleAutoScroll(evt, fallback) {
      var _this = this;
      var x5 = (evt.touches ? evt.touches[0] : evt).clientX, y3 = (evt.touches ? evt.touches[0] : evt).clientY, elem = document.elementFromPoint(x5, y3);
      touchEvt$1 = evt;
      if (fallback || this.options.forceAutoScrollFallback || Edge || IE11OrLess || Safari) {
        autoScroll(evt, this.options, elem, fallback);
        var ogElemScroller = getParentAutoScrollElement(elem, true);
        if (scrolling && (!pointerElemChangedInterval || x5 !== lastAutoScrollX || y3 !== lastAutoScrollY)) {
          pointerElemChangedInterval && clearPointerElemChangedInterval();
          pointerElemChangedInterval = setInterval(function() {
            var newElem = getParentAutoScrollElement(document.elementFromPoint(x5, y3), true);
            if (newElem !== ogElemScroller) {
              ogElemScroller = newElem;
              clearAutoScrolls();
            }
            autoScroll(evt, _this.options, newElem, fallback);
          }, 10);
          lastAutoScrollX = x5;
          lastAutoScrollY = y3;
        }
      } else {
        if (!this.options.bubbleScroll || getParentAutoScrollElement(elem, true) === getWindowScrollingElement()) {
          clearAutoScrolls();
          return;
        }
        autoScroll(evt, this.options, getParentAutoScrollElement(elem, false), false);
      }
    }
  };
  return _extends(AutoScroll, {
    pluginName: "scroll",
    initializeByDefault: true
  });
}
function clearAutoScrolls() {
  autoScrolls.forEach(function(autoScroll2) {
    clearInterval(autoScroll2.pid);
  });
  autoScrolls = [];
}
function clearPointerElemChangedInterval() {
  clearInterval(pointerElemChangedInterval);
}
function Revert() {
}
function Remove() {
}
function SwapPlugin() {
  function Swap() {
    this.defaults = {
      swapClass: "sortable-swap-highlight"
    };
  }
  Swap.prototype = {
    dragStart: function dragStart2(_ref) {
      var dragEl2 = _ref.dragEl;
      lastSwapEl = dragEl2;
    },
    dragOverValid: function dragOverValid(_ref2) {
      var completed = _ref2.completed, target = _ref2.target, onMove = _ref2.onMove, activeSortable = _ref2.activeSortable, changed = _ref2.changed, cancel = _ref2.cancel;
      if (!activeSortable.options.swap)
        return;
      var el = this.sortable.el, options = this.options;
      if (target && target !== el) {
        var prevSwapEl = lastSwapEl;
        if (onMove(target) !== false) {
          toggleClass(target, options.swapClass, true);
          lastSwapEl = target;
        } else {
          lastSwapEl = null;
        }
        if (prevSwapEl && prevSwapEl !== lastSwapEl) {
          toggleClass(prevSwapEl, options.swapClass, false);
        }
      }
      changed();
      completed(true);
      cancel();
    },
    drop: function drop3(_ref3) {
      var activeSortable = _ref3.activeSortable, putSortable2 = _ref3.putSortable, dragEl2 = _ref3.dragEl;
      var toSortable = putSortable2 || this.sortable;
      var options = this.options;
      lastSwapEl && toggleClass(lastSwapEl, options.swapClass, false);
      if (lastSwapEl && (options.swap || putSortable2 && putSortable2.options.swap)) {
        if (dragEl2 !== lastSwapEl) {
          toSortable.captureAnimationState();
          if (toSortable !== activeSortable)
            activeSortable.captureAnimationState();
          swapNodes(dragEl2, lastSwapEl);
          toSortable.animateAll();
          if (toSortable !== activeSortable)
            activeSortable.animateAll();
        }
      }
    },
    nulling: function nulling() {
      lastSwapEl = null;
    }
  };
  return _extends(Swap, {
    pluginName: "swap",
    eventProperties: function eventProperties() {
      return {
        swapItem: lastSwapEl
      };
    }
  });
}
function swapNodes(n1, n22) {
  var p1 = n1.parentNode, p22 = n22.parentNode, i1, i2;
  if (!p1 || !p22 || p1.isEqualNode(n22) || p22.isEqualNode(n1))
    return;
  i1 = index(n1);
  i2 = index(n22);
  if (p1.isEqualNode(p22) && i1 < i2) {
    i2++;
  }
  p1.insertBefore(n22, p1.children[i1]);
  p22.insertBefore(n1, p22.children[i2]);
}
function MultiDragPlugin() {
  function MultiDrag(sortable) {
    for (var fn in this) {
      if (fn.charAt(0) === "_" && typeof this[fn] === "function") {
        this[fn] = this[fn].bind(this);
      }
    }
    if (!sortable.options.avoidImplicitDeselect) {
      if (sortable.options.supportPointer) {
        on(document, "pointerup", this._deselectMultiDrag);
      } else {
        on(document, "mouseup", this._deselectMultiDrag);
        on(document, "touchend", this._deselectMultiDrag);
      }
    }
    on(document, "keydown", this._checkKeyDown);
    on(document, "keyup", this._checkKeyUp);
    this.defaults = {
      selectedClass: "sortable-selected",
      multiDragKey: null,
      avoidImplicitDeselect: false,
      setData: function setData(dataTransfer, dragEl2) {
        var data = "";
        if (multiDragElements.length && multiDragSortable === sortable) {
          multiDragElements.forEach(function(multiDragElement, i) {
            data += (!i ? "" : ", ") + multiDragElement.textContent;
          });
        } else {
          data = dragEl2.textContent;
        }
        dataTransfer.setData("Text", data);
      }
    };
  }
  MultiDrag.prototype = {
    multiDragKeyDown: false,
    isMultiDrag: false,
    delayStartGlobal: function delayStartGlobal(_ref) {
      var dragged = _ref.dragEl;
      dragEl$1 = dragged;
    },
    delayEnded: function delayEnded() {
      this.isMultiDrag = ~multiDragElements.indexOf(dragEl$1);
    },
    setupClone: function setupClone(_ref2) {
      var sortable = _ref2.sortable, cancel = _ref2.cancel;
      if (!this.isMultiDrag)
        return;
      for (var i = 0; i < multiDragElements.length; i++) {
        multiDragClones.push(clone(multiDragElements[i]));
        multiDragClones[i].sortableIndex = multiDragElements[i].sortableIndex;
        multiDragClones[i].draggable = false;
        multiDragClones[i].style["will-change"] = "";
        toggleClass(multiDragClones[i], this.options.selectedClass, false);
        multiDragElements[i] === dragEl$1 && toggleClass(multiDragClones[i], this.options.chosenClass, false);
      }
      sortable._hideClone();
      cancel();
    },
    clone: function clone2(_ref3) {
      var sortable = _ref3.sortable, rootEl2 = _ref3.rootEl, dispatchSortableEvent = _ref3.dispatchSortableEvent, cancel = _ref3.cancel;
      if (!this.isMultiDrag)
        return;
      if (!this.options.removeCloneOnHide) {
        if (multiDragElements.length && multiDragSortable === sortable) {
          insertMultiDragClones(true, rootEl2);
          dispatchSortableEvent("clone");
          cancel();
        }
      }
    },
    showClone: function showClone(_ref4) {
      var cloneNowShown = _ref4.cloneNowShown, rootEl2 = _ref4.rootEl, cancel = _ref4.cancel;
      if (!this.isMultiDrag)
        return;
      insertMultiDragClones(false, rootEl2);
      multiDragClones.forEach(function(clone2) {
        css(clone2, "display", "");
      });
      cloneNowShown();
      clonesHidden = false;
      cancel();
    },
    hideClone: function hideClone(_ref5) {
      var _this = this;
      var sortable = _ref5.sortable, cloneNowHidden = _ref5.cloneNowHidden, cancel = _ref5.cancel;
      if (!this.isMultiDrag)
        return;
      multiDragClones.forEach(function(clone2) {
        css(clone2, "display", "none");
        if (_this.options.removeCloneOnHide && clone2.parentNode) {
          clone2.parentNode.removeChild(clone2);
        }
      });
      cloneNowHidden();
      clonesHidden = true;
      cancel();
    },
    dragStartGlobal: function dragStartGlobal(_ref6) {
      var sortable = _ref6.sortable;
      if (!this.isMultiDrag && multiDragSortable) {
        multiDragSortable.multiDrag._deselectMultiDrag();
      }
      multiDragElements.forEach(function(multiDragElement) {
        multiDragElement.sortableIndex = index(multiDragElement);
      });
      multiDragElements = multiDragElements.sort(function(a2, b5) {
        return a2.sortableIndex - b5.sortableIndex;
      });
      dragStarted = true;
    },
    dragStarted: function dragStarted2(_ref7) {
      var _this2 = this;
      var sortable = _ref7.sortable;
      if (!this.isMultiDrag)
        return;
      if (this.options.sort) {
        sortable.captureAnimationState();
        if (this.options.animation) {
          multiDragElements.forEach(function(multiDragElement) {
            if (multiDragElement === dragEl$1)
              return;
            css(multiDragElement, "position", "absolute");
          });
          var dragRect = getRect(dragEl$1, false, true, true);
          multiDragElements.forEach(function(multiDragElement) {
            if (multiDragElement === dragEl$1)
              return;
            setRect(multiDragElement, dragRect);
          });
          folding = true;
          initialFolding = true;
        }
      }
      sortable.animateAll(function() {
        folding = false;
        initialFolding = false;
        if (_this2.options.animation) {
          multiDragElements.forEach(function(multiDragElement) {
            unsetRect(multiDragElement);
          });
        }
        if (_this2.options.sort) {
          removeMultiDragElements();
        }
      });
    },
    dragOver: function dragOver(_ref8) {
      var target = _ref8.target, completed = _ref8.completed, cancel = _ref8.cancel;
      if (folding && ~multiDragElements.indexOf(target)) {
        completed(false);
        cancel();
      }
    },
    revert: function revert(_ref9) {
      var fromSortable = _ref9.fromSortable, rootEl2 = _ref9.rootEl, sortable = _ref9.sortable, dragRect = _ref9.dragRect;
      if (multiDragElements.length > 1) {
        multiDragElements.forEach(function(multiDragElement) {
          sortable.addAnimationState({
            target: multiDragElement,
            rect: folding ? getRect(multiDragElement) : dragRect
          });
          unsetRect(multiDragElement);
          multiDragElement.fromRect = dragRect;
          fromSortable.removeAnimationState(multiDragElement);
        });
        folding = false;
        insertMultiDragElements(!this.options.removeCloneOnHide, rootEl2);
      }
    },
    dragOverCompleted: function dragOverCompleted(_ref10) {
      var sortable = _ref10.sortable, isOwner = _ref10.isOwner, insertion = _ref10.insertion, activeSortable = _ref10.activeSortable, parentEl2 = _ref10.parentEl, putSortable2 = _ref10.putSortable;
      var options = this.options;
      if (insertion) {
        if (isOwner) {
          activeSortable._hideClone();
        }
        initialFolding = false;
        if (options.animation && multiDragElements.length > 1 && (folding || !isOwner && !activeSortable.options.sort && !putSortable2)) {
          var dragRectAbsolute = getRect(dragEl$1, false, true, true);
          multiDragElements.forEach(function(multiDragElement) {
            if (multiDragElement === dragEl$1)
              return;
            setRect(multiDragElement, dragRectAbsolute);
            parentEl2.appendChild(multiDragElement);
          });
          folding = true;
        }
        if (!isOwner) {
          if (!folding) {
            removeMultiDragElements();
          }
          if (multiDragElements.length > 1) {
            var clonesHiddenBefore = clonesHidden;
            activeSortable._showClone(sortable);
            if (activeSortable.options.animation && !clonesHidden && clonesHiddenBefore) {
              multiDragClones.forEach(function(clone2) {
                activeSortable.addAnimationState({
                  target: clone2,
                  rect: clonesFromRect
                });
                clone2.fromRect = clonesFromRect;
                clone2.thisAnimationDuration = null;
              });
            }
          } else {
            activeSortable._showClone(sortable);
          }
        }
      }
    },
    dragOverAnimationCapture: function dragOverAnimationCapture(_ref11) {
      var dragRect = _ref11.dragRect, isOwner = _ref11.isOwner, activeSortable = _ref11.activeSortable;
      multiDragElements.forEach(function(multiDragElement) {
        multiDragElement.thisAnimationDuration = null;
      });
      if (activeSortable.options.animation && !isOwner && activeSortable.multiDrag.isMultiDrag) {
        clonesFromRect = _extends({}, dragRect);
        var dragMatrix = matrix(dragEl$1, true);
        clonesFromRect.top -= dragMatrix.f;
        clonesFromRect.left -= dragMatrix.e;
      }
    },
    dragOverAnimationComplete: function dragOverAnimationComplete() {
      if (folding) {
        folding = false;
        removeMultiDragElements();
      }
    },
    drop: function drop3(_ref12) {
      var evt = _ref12.originalEvent, rootEl2 = _ref12.rootEl, parentEl2 = _ref12.parentEl, sortable = _ref12.sortable, dispatchSortableEvent = _ref12.dispatchSortableEvent, oldIndex2 = _ref12.oldIndex, putSortable2 = _ref12.putSortable;
      var toSortable = putSortable2 || this.sortable;
      if (!evt)
        return;
      var options = this.options, children = parentEl2.children;
      if (!dragStarted) {
        if (options.multiDragKey && !this.multiDragKeyDown) {
          this._deselectMultiDrag();
        }
        toggleClass(dragEl$1, options.selectedClass, !~multiDragElements.indexOf(dragEl$1));
        if (!~multiDragElements.indexOf(dragEl$1)) {
          multiDragElements.push(dragEl$1);
          dispatchEvent({
            sortable,
            rootEl: rootEl2,
            name: "select",
            targetEl: dragEl$1,
            originalEvent: evt
          });
          if (evt.shiftKey && lastMultiDragSelect && sortable.el.contains(lastMultiDragSelect)) {
            var lastIndex = index(lastMultiDragSelect), currentIndex = index(dragEl$1);
            if (~lastIndex && ~currentIndex && lastIndex !== currentIndex) {
              (function() {
                var n4, i;
                if (currentIndex > lastIndex) {
                  i = lastIndex;
                  n4 = currentIndex;
                } else {
                  i = currentIndex;
                  n4 = lastIndex + 1;
                }
                var filter = options.filter;
                for (; i < n4; i++) {
                  if (~multiDragElements.indexOf(children[i]))
                    continue;
                  if (!closest(children[i], options.draggable, parentEl2, false))
                    continue;
                  var filtered = filter && (typeof filter === "function" ? filter.call(sortable, evt, children[i], sortable) : filter.split(",").some(function(criteria) {
                    return closest(children[i], criteria.trim(), parentEl2, false);
                  }));
                  if (filtered)
                    continue;
                  toggleClass(children[i], options.selectedClass, true);
                  multiDragElements.push(children[i]);
                  dispatchEvent({
                    sortable,
                    rootEl: rootEl2,
                    name: "select",
                    targetEl: children[i],
                    originalEvent: evt
                  });
                }
              })();
            }
          } else {
            lastMultiDragSelect = dragEl$1;
          }
          multiDragSortable = toSortable;
        } else {
          multiDragElements.splice(multiDragElements.indexOf(dragEl$1), 1);
          lastMultiDragSelect = null;
          dispatchEvent({
            sortable,
            rootEl: rootEl2,
            name: "deselect",
            targetEl: dragEl$1,
            originalEvent: evt
          });
        }
      }
      if (dragStarted && this.isMultiDrag) {
        folding = false;
        if ((parentEl2[expando].options.sort || parentEl2 !== rootEl2) && multiDragElements.length > 1) {
          var dragRect = getRect(dragEl$1), multiDragIndex = index(dragEl$1, ":not(." + this.options.selectedClass + ")");
          if (!initialFolding && options.animation)
            dragEl$1.thisAnimationDuration = null;
          toSortable.captureAnimationState();
          if (!initialFolding) {
            if (options.animation) {
              dragEl$1.fromRect = dragRect;
              multiDragElements.forEach(function(multiDragElement) {
                multiDragElement.thisAnimationDuration = null;
                if (multiDragElement !== dragEl$1) {
                  var rect = folding ? getRect(multiDragElement) : dragRect;
                  multiDragElement.fromRect = rect;
                  toSortable.addAnimationState({
                    target: multiDragElement,
                    rect
                  });
                }
              });
            }
            removeMultiDragElements();
            multiDragElements.forEach(function(multiDragElement) {
              if (children[multiDragIndex]) {
                parentEl2.insertBefore(multiDragElement, children[multiDragIndex]);
              } else {
                parentEl2.appendChild(multiDragElement);
              }
              multiDragIndex++;
            });
            if (oldIndex2 === index(dragEl$1)) {
              var update = false;
              multiDragElements.forEach(function(multiDragElement) {
                if (multiDragElement.sortableIndex !== index(multiDragElement)) {
                  update = true;
                  return;
                }
              });
              if (update) {
                dispatchSortableEvent("update");
                dispatchSortableEvent("sort");
              }
            }
          }
          multiDragElements.forEach(function(multiDragElement) {
            unsetRect(multiDragElement);
          });
          toSortable.animateAll();
        }
        multiDragSortable = toSortable;
      }
      if (rootEl2 === parentEl2 || putSortable2 && putSortable2.lastPutMode !== "clone") {
        multiDragClones.forEach(function(clone2) {
          clone2.parentNode && clone2.parentNode.removeChild(clone2);
        });
      }
    },
    nullingGlobal: function nullingGlobal() {
      this.isMultiDrag = dragStarted = false;
      multiDragClones.length = 0;
    },
    destroyGlobal: function destroyGlobal() {
      this._deselectMultiDrag();
      off(document, "pointerup", this._deselectMultiDrag);
      off(document, "mouseup", this._deselectMultiDrag);
      off(document, "touchend", this._deselectMultiDrag);
      off(document, "keydown", this._checkKeyDown);
      off(document, "keyup", this._checkKeyUp);
    },
    _deselectMultiDrag: function _deselectMultiDrag(evt) {
      if (typeof dragStarted !== "undefined" && dragStarted)
        return;
      if (multiDragSortable !== this.sortable)
        return;
      if (evt && closest(evt.target, this.options.draggable, this.sortable.el, false))
        return;
      if (evt && evt.button !== 0)
        return;
      while (multiDragElements.length) {
        var el = multiDragElements[0];
        toggleClass(el, this.options.selectedClass, false);
        multiDragElements.shift();
        dispatchEvent({
          sortable: this.sortable,
          rootEl: this.sortable.el,
          name: "deselect",
          targetEl: el,
          originalEvent: evt
        });
      }
    },
    _checkKeyDown: function _checkKeyDown(evt) {
      if (evt.key === this.options.multiDragKey) {
        this.multiDragKeyDown = true;
      }
    },
    _checkKeyUp: function _checkKeyUp(evt) {
      if (evt.key === this.options.multiDragKey) {
        this.multiDragKeyDown = false;
      }
    }
  };
  return _extends(MultiDrag, {
    // Static methods & properties
    pluginName: "multiDrag",
    utils: {
      /**
       * Selects the provided multi-drag item
       * @param  {HTMLElement} el    The element to be selected
       */
      select: function select(el) {
        var sortable = el.parentNode[expando];
        if (!sortable || !sortable.options.multiDrag || ~multiDragElements.indexOf(el))
          return;
        if (multiDragSortable && multiDragSortable !== sortable) {
          multiDragSortable.multiDrag._deselectMultiDrag();
          multiDragSortable = sortable;
        }
        toggleClass(el, sortable.options.selectedClass, true);
        multiDragElements.push(el);
      },
      /**
       * Deselects the provided multi-drag item
       * @param  {HTMLElement} el    The element to be deselected
       */
      deselect: function deselect(el) {
        var sortable = el.parentNode[expando], index2 = multiDragElements.indexOf(el);
        if (!sortable || !sortable.options.multiDrag || !~index2)
          return;
        toggleClass(el, sortable.options.selectedClass, false);
        multiDragElements.splice(index2, 1);
      }
    },
    eventProperties: function eventProperties() {
      var _this3 = this;
      var oldIndicies = [], newIndicies = [];
      multiDragElements.forEach(function(multiDragElement) {
        oldIndicies.push({
          multiDragElement,
          index: multiDragElement.sortableIndex
        });
        var newIndex2;
        if (folding && multiDragElement !== dragEl$1) {
          newIndex2 = -1;
        } else if (folding) {
          newIndex2 = index(multiDragElement, ":not(." + _this3.options.selectedClass + ")");
        } else {
          newIndex2 = index(multiDragElement);
        }
        newIndicies.push({
          multiDragElement,
          index: newIndex2
        });
      });
      return {
        items: _toConsumableArray(multiDragElements),
        clones: [].concat(multiDragClones),
        oldIndicies,
        newIndicies
      };
    },
    optionListeners: {
      multiDragKey: function multiDragKey(key) {
        key = key.toLowerCase();
        if (key === "ctrl") {
          key = "Control";
        } else if (key.length > 1) {
          key = key.charAt(0).toUpperCase() + key.substr(1);
        }
        return key;
      }
    }
  });
}
function insertMultiDragElements(clonesInserted, rootEl2) {
  multiDragElements.forEach(function(multiDragElement, i) {
    var target = rootEl2.children[multiDragElement.sortableIndex + (clonesInserted ? Number(i) : 0)];
    if (target) {
      rootEl2.insertBefore(multiDragElement, target);
    } else {
      rootEl2.appendChild(multiDragElement);
    }
  });
}
function insertMultiDragClones(elementsInserted, rootEl2) {
  multiDragClones.forEach(function(clone2, i) {
    var target = rootEl2.children[clone2.sortableIndex + (elementsInserted ? Number(i) : 0)];
    if (target) {
      rootEl2.insertBefore(clone2, target);
    } else {
      rootEl2.appendChild(clone2);
    }
  });
}
function removeMultiDragElements() {
  multiDragElements.forEach(function(multiDragElement) {
    if (multiDragElement === dragEl$1)
      return;
    multiDragElement.parentNode && multiDragElement.parentNode.removeChild(multiDragElement);
  });
}
var version, IE11OrLess, Edge, FireFox, Safari, IOS, ChromeForAndroid, captureMode, R_SPACE, _throttleTimeout, expando, plugins, defaults, PluginManager, _excluded, pluginEvent2, dragEl, parentEl, ghostEl, rootEl, nextEl, lastDownEl, cloneEl, cloneHidden, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, activeGroup, putSortable, awaitingDragStarted, ignoreNextClick, sortables, tapEvt, touchEvt, lastDx, lastDy, tapDistanceLeft, tapDistanceTop, moved, lastTarget, lastDirection, pastFirstInvertThresh, isCircumstantialInvert, targetMoveDistance, ghostRelativeParent, ghostRelativeParentInitialScroll, _silent, savedInputChecked, documentExists, PositionGhostAbsolutely, CSSFloatProperty, supportDraggable, supportCssPointerEvents, _detectDirection, _dragElInRowColumn, _detectNearestEmptySortable, _prepareGroup, _hideGhostForTarget, _unhideGhostForTarget, nearestEmptyInsertDetectEvent, _checkOutsideTargetEl, autoScrolls, scrollEl, scrollRootEl, scrolling, lastAutoScrollX, lastAutoScrollY, touchEvt$1, pointerElemChangedInterval, autoScroll, drop, lastSwapEl, multiDragElements, multiDragClones, lastMultiDragSelect, multiDragSortable, initialFolding, folding, dragStarted, dragEl$1, clonesFromRect, clonesHidden, sortable_esm_default;
var init_sortable_esm = __esm({
  "node_modules/sortablejs/modular/sortable.esm.js"() {
    version = "1.15.6";
    IE11OrLess = userAgent(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i);
    Edge = userAgent(/Edge/i);
    FireFox = userAgent(/firefox/i);
    Safari = userAgent(/safari/i) && !userAgent(/chrome/i) && !userAgent(/android/i);
    IOS = userAgent(/iP(ad|od|hone)/i);
    ChromeForAndroid = userAgent(/chrome/i) && userAgent(/android/i);
    captureMode = {
      capture: false,
      passive: false
    };
    R_SPACE = /\s+/g;
    expando = "Sortable" + (/* @__PURE__ */ new Date()).getTime();
    plugins = [];
    defaults = {
      initializeByDefault: true
    };
    PluginManager = {
      mount: function mount(plugin) {
        for (var option2 in defaults) {
          if (defaults.hasOwnProperty(option2) && !(option2 in plugin)) {
            plugin[option2] = defaults[option2];
          }
        }
        plugins.forEach(function(p8) {
          if (p8.pluginName === plugin.pluginName) {
            throw "Sortable: Cannot mount plugin ".concat(plugin.pluginName, " more than once");
          }
        });
        plugins.push(plugin);
      },
      pluginEvent: function pluginEvent(eventName, sortable, evt) {
        var _this = this;
        this.eventCanceled = false;
        evt.cancel = function() {
          _this.eventCanceled = true;
        };
        var eventNameGlobal = eventName + "Global";
        plugins.forEach(function(plugin) {
          if (!sortable[plugin.pluginName])
            return;
          if (sortable[plugin.pluginName][eventNameGlobal]) {
            sortable[plugin.pluginName][eventNameGlobal](_objectSpread2({
              sortable
            }, evt));
          }
          if (sortable.options[plugin.pluginName] && sortable[plugin.pluginName][eventName]) {
            sortable[plugin.pluginName][eventName](_objectSpread2({
              sortable
            }, evt));
          }
        });
      },
      initializePlugins: function initializePlugins(sortable, el, defaults2, options) {
        plugins.forEach(function(plugin) {
          var pluginName = plugin.pluginName;
          if (!sortable.options[pluginName] && !plugin.initializeByDefault)
            return;
          var initialized = new plugin(sortable, el, sortable.options);
          initialized.sortable = sortable;
          initialized.options = sortable.options;
          sortable[pluginName] = initialized;
          _extends(defaults2, initialized.defaults);
        });
        for (var option2 in sortable.options) {
          if (!sortable.options.hasOwnProperty(option2))
            continue;
          var modified = this.modifyOption(sortable, option2, sortable.options[option2]);
          if (typeof modified !== "undefined") {
            sortable.options[option2] = modified;
          }
        }
      },
      getEventProperties: function getEventProperties(name, sortable) {
        var eventProperties = {};
        plugins.forEach(function(plugin) {
          if (typeof plugin.eventProperties !== "function")
            return;
          _extends(eventProperties, plugin.eventProperties.call(sortable[plugin.pluginName], name));
        });
        return eventProperties;
      },
      modifyOption: function modifyOption(sortable, name, value) {
        var modifiedValue;
        plugins.forEach(function(plugin) {
          if (!sortable[plugin.pluginName])
            return;
          if (plugin.optionListeners && typeof plugin.optionListeners[name] === "function") {
            modifiedValue = plugin.optionListeners[name].call(sortable[plugin.pluginName], value);
          }
        });
        return modifiedValue;
      }
    };
    _excluded = ["evt"];
    pluginEvent2 = function pluginEvent3(eventName, sortable) {
      var _ref = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, originalEvent = _ref.evt, data = _objectWithoutProperties(_ref, _excluded);
      PluginManager.pluginEvent.bind(Sortable)(eventName, sortable, _objectSpread2({
        dragEl,
        parentEl,
        ghostEl,
        rootEl,
        nextEl,
        lastDownEl,
        cloneEl,
        cloneHidden,
        dragStarted: moved,
        putSortable,
        activeSortable: Sortable.active,
        originalEvent,
        oldIndex,
        oldDraggableIndex,
        newIndex,
        newDraggableIndex,
        hideGhostForTarget: _hideGhostForTarget,
        unhideGhostForTarget: _unhideGhostForTarget,
        cloneNowHidden: function cloneNowHidden() {
          cloneHidden = true;
        },
        cloneNowShown: function cloneNowShown() {
          cloneHidden = false;
        },
        dispatchSortableEvent: function dispatchSortableEvent(name) {
          _dispatchEvent({
            sortable,
            name,
            originalEvent
          });
        }
      }, data));
    };
    awaitingDragStarted = false;
    ignoreNextClick = false;
    sortables = [];
    pastFirstInvertThresh = false;
    isCircumstantialInvert = false;
    ghostRelativeParentInitialScroll = [];
    _silent = false;
    savedInputChecked = [];
    documentExists = typeof document !== "undefined";
    PositionGhostAbsolutely = IOS;
    CSSFloatProperty = Edge || IE11OrLess ? "cssFloat" : "float";
    supportDraggable = documentExists && !ChromeForAndroid && !IOS && "draggable" in document.createElement("div");
    supportCssPointerEvents = function() {
      if (!documentExists)
        return;
      if (IE11OrLess) {
        return false;
      }
      var el = document.createElement("x");
      el.style.cssText = "pointer-events:auto";
      return el.style.pointerEvents === "auto";
    }();
    _detectDirection = function _detectDirection2(el, options) {
      var elCSS = css(el), elWidth = parseInt(elCSS.width) - parseInt(elCSS.paddingLeft) - parseInt(elCSS.paddingRight) - parseInt(elCSS.borderLeftWidth) - parseInt(elCSS.borderRightWidth), child1 = getChild(el, 0, options), child2 = getChild(el, 1, options), firstChildCSS = child1 && css(child1), secondChildCSS = child2 && css(child2), firstChildWidth = firstChildCSS && parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + getRect(child1).width, secondChildWidth = secondChildCSS && parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + getRect(child2).width;
      if (elCSS.display === "flex") {
        return elCSS.flexDirection === "column" || elCSS.flexDirection === "column-reverse" ? "vertical" : "horizontal";
      }
      if (elCSS.display === "grid") {
        return elCSS.gridTemplateColumns.split(" ").length <= 1 ? "vertical" : "horizontal";
      }
      if (child1 && firstChildCSS["float"] && firstChildCSS["float"] !== "none") {
        var touchingSideChild2 = firstChildCSS["float"] === "left" ? "left" : "right";
        return child2 && (secondChildCSS.clear === "both" || secondChildCSS.clear === touchingSideChild2) ? "vertical" : "horizontal";
      }
      return child1 && (firstChildCSS.display === "block" || firstChildCSS.display === "flex" || firstChildCSS.display === "table" || firstChildCSS.display === "grid" || firstChildWidth >= elWidth && elCSS[CSSFloatProperty] === "none" || child2 && elCSS[CSSFloatProperty] === "none" && firstChildWidth + secondChildWidth > elWidth) ? "vertical" : "horizontal";
    };
    _dragElInRowColumn = function _dragElInRowColumn2(dragRect, targetRect, vertical) {
      var dragElS1Opp = vertical ? dragRect.left : dragRect.top, dragElS2Opp = vertical ? dragRect.right : dragRect.bottom, dragElOppLength = vertical ? dragRect.width : dragRect.height, targetS1Opp = vertical ? targetRect.left : targetRect.top, targetS2Opp = vertical ? targetRect.right : targetRect.bottom, targetOppLength = vertical ? targetRect.width : targetRect.height;
      return dragElS1Opp === targetS1Opp || dragElS2Opp === targetS2Opp || dragElS1Opp + dragElOppLength / 2 === targetS1Opp + targetOppLength / 2;
    };
    _detectNearestEmptySortable = function _detectNearestEmptySortable2(x5, y3) {
      var ret;
      sortables.some(function(sortable) {
        var threshold = sortable[expando].options.emptyInsertThreshold;
        if (!threshold || lastChild(sortable))
          return;
        var rect = getRect(sortable), insideHorizontally = x5 >= rect.left - threshold && x5 <= rect.right + threshold, insideVertically = y3 >= rect.top - threshold && y3 <= rect.bottom + threshold;
        if (insideHorizontally && insideVertically) {
          return ret = sortable;
        }
      });
      return ret;
    };
    _prepareGroup = function _prepareGroup2(options) {
      function toFn(value, pull) {
        return function(to, from, dragEl2, evt) {
          var sameGroup = to.options.group.name && from.options.group.name && to.options.group.name === from.options.group.name;
          if (value == null && (pull || sameGroup)) {
            return true;
          } else if (value == null || value === false) {
            return false;
          } else if (pull && value === "clone") {
            return value;
          } else if (typeof value === "function") {
            return toFn(value(to, from, dragEl2, evt), pull)(to, from, dragEl2, evt);
          } else {
            var otherGroup = (pull ? to : from).options.group.name;
            return value === true || typeof value === "string" && value === otherGroup || value.join && value.indexOf(otherGroup) > -1;
          }
        };
      }
      var group = {};
      var originalGroup = options.group;
      if (!originalGroup || _typeof(originalGroup) != "object") {
        originalGroup = {
          name: originalGroup
        };
      }
      group.name = originalGroup.name;
      group.checkPull = toFn(originalGroup.pull, true);
      group.checkPut = toFn(originalGroup.put);
      group.revertClone = originalGroup.revertClone;
      options.group = group;
    };
    _hideGhostForTarget = function _hideGhostForTarget2() {
      if (!supportCssPointerEvents && ghostEl) {
        css(ghostEl, "display", "none");
      }
    };
    _unhideGhostForTarget = function _unhideGhostForTarget2() {
      if (!supportCssPointerEvents && ghostEl) {
        css(ghostEl, "display", "");
      }
    };
    if (documentExists && !ChromeForAndroid) {
      document.addEventListener("click", function(evt) {
        if (ignoreNextClick) {
          evt.preventDefault();
          evt.stopPropagation && evt.stopPropagation();
          evt.stopImmediatePropagation && evt.stopImmediatePropagation();
          ignoreNextClick = false;
          return false;
        }
      }, true);
    }
    nearestEmptyInsertDetectEvent = function nearestEmptyInsertDetectEvent2(evt) {
      if (dragEl) {
        evt = evt.touches ? evt.touches[0] : evt;
        var nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);
        if (nearest) {
          var event = {};
          for (var i in evt) {
            if (evt.hasOwnProperty(i)) {
              event[i] = evt[i];
            }
          }
          event.target = event.rootEl = nearest;
          event.preventDefault = void 0;
          event.stopPropagation = void 0;
          nearest[expando]._onDragOver(event);
        }
      }
    };
    _checkOutsideTargetEl = function _checkOutsideTargetEl2(evt) {
      if (dragEl) {
        dragEl.parentNode[expando]._isOutsideThisEl(evt.target);
      }
    };
    Sortable.prototype = /** @lends Sortable.prototype */
    {
      constructor: Sortable,
      _isOutsideThisEl: function _isOutsideThisEl(target) {
        if (!this.el.contains(target) && target !== this.el) {
          lastTarget = null;
        }
      },
      _getDirection: function _getDirection(evt, target) {
        return typeof this.options.direction === "function" ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;
      },
      _onTapStart: function _onTapStart(evt) {
        if (!evt.cancelable)
          return;
        var _this = this, el = this.el, options = this.options, preventOnFilter = options.preventOnFilter, type = evt.type, touch = evt.touches && evt.touches[0] || evt.pointerType && evt.pointerType === "touch" && evt, target = (touch || evt).target, originalTarget = evt.target.shadowRoot && (evt.path && evt.path[0] || evt.composedPath && evt.composedPath()[0]) || target, filter = options.filter;
        _saveInputCheckedState(el);
        if (dragEl) {
          return;
        }
        if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {
          return;
        }
        if (originalTarget.isContentEditable) {
          return;
        }
        if (!this.nativeDraggable && Safari && target && target.tagName.toUpperCase() === "SELECT") {
          return;
        }
        target = closest(target, options.draggable, el, false);
        if (target && target.animated) {
          return;
        }
        if (lastDownEl === target) {
          return;
        }
        oldIndex = index(target);
        oldDraggableIndex = index(target, options.draggable);
        if (typeof filter === "function") {
          if (filter.call(this, evt, target, this)) {
            _dispatchEvent({
              sortable: _this,
              rootEl: originalTarget,
              name: "filter",
              targetEl: target,
              toEl: el,
              fromEl: el
            });
            pluginEvent2("filter", _this, {
              evt
            });
            preventOnFilter && evt.preventDefault();
            return;
          }
        } else if (filter) {
          filter = filter.split(",").some(function(criteria) {
            criteria = closest(originalTarget, criteria.trim(), el, false);
            if (criteria) {
              _dispatchEvent({
                sortable: _this,
                rootEl: criteria,
                name: "filter",
                targetEl: target,
                fromEl: el,
                toEl: el
              });
              pluginEvent2("filter", _this, {
                evt
              });
              return true;
            }
          });
          if (filter) {
            preventOnFilter && evt.preventDefault();
            return;
          }
        }
        if (options.handle && !closest(originalTarget, options.handle, el, false)) {
          return;
        }
        this._prepareDragStart(evt, touch, target);
      },
      _prepareDragStart: function _prepareDragStart(evt, touch, target) {
        var _this = this, el = _this.el, options = _this.options, ownerDocument = el.ownerDocument, dragStartFn;
        if (target && !dragEl && target.parentNode === el) {
          var dragRect = getRect(target);
          rootEl = el;
          dragEl = target;
          parentEl = dragEl.parentNode;
          nextEl = dragEl.nextSibling;
          lastDownEl = target;
          activeGroup = options.group;
          Sortable.dragged = dragEl;
          tapEvt = {
            target: dragEl,
            clientX: (touch || evt).clientX,
            clientY: (touch || evt).clientY
          };
          tapDistanceLeft = tapEvt.clientX - dragRect.left;
          tapDistanceTop = tapEvt.clientY - dragRect.top;
          this._lastX = (touch || evt).clientX;
          this._lastY = (touch || evt).clientY;
          dragEl.style["will-change"] = "all";
          dragStartFn = function dragStartFn2() {
            pluginEvent2("delayEnded", _this, {
              evt
            });
            if (Sortable.eventCanceled) {
              _this._onDrop();
              return;
            }
            _this._disableDelayedDragEvents();
            if (!FireFox && _this.nativeDraggable) {
              dragEl.draggable = true;
            }
            _this._triggerDragStart(evt, touch);
            _dispatchEvent({
              sortable: _this,
              name: "choose",
              originalEvent: evt
            });
            toggleClass(dragEl, options.chosenClass, true);
          };
          options.ignore.split(",").forEach(function(criteria) {
            find(dragEl, criteria.trim(), _disableDraggable);
          });
          on(ownerDocument, "dragover", nearestEmptyInsertDetectEvent);
          on(ownerDocument, "mousemove", nearestEmptyInsertDetectEvent);
          on(ownerDocument, "touchmove", nearestEmptyInsertDetectEvent);
          if (options.supportPointer) {
            on(ownerDocument, "pointerup", _this._onDrop);
            !this.nativeDraggable && on(ownerDocument, "pointercancel", _this._onDrop);
          } else {
            on(ownerDocument, "mouseup", _this._onDrop);
            on(ownerDocument, "touchend", _this._onDrop);
            on(ownerDocument, "touchcancel", _this._onDrop);
          }
          if (FireFox && this.nativeDraggable) {
            this.options.touchStartThreshold = 4;
            dragEl.draggable = true;
          }
          pluginEvent2("delayStart", this, {
            evt
          });
          if (options.delay && (!options.delayOnTouchOnly || touch) && (!this.nativeDraggable || !(Edge || IE11OrLess))) {
            if (Sortable.eventCanceled) {
              this._onDrop();
              return;
            }
            if (options.supportPointer) {
              on(ownerDocument, "pointerup", _this._disableDelayedDrag);
              on(ownerDocument, "pointercancel", _this._disableDelayedDrag);
            } else {
              on(ownerDocument, "mouseup", _this._disableDelayedDrag);
              on(ownerDocument, "touchend", _this._disableDelayedDrag);
              on(ownerDocument, "touchcancel", _this._disableDelayedDrag);
            }
            on(ownerDocument, "mousemove", _this._delayedDragTouchMoveHandler);
            on(ownerDocument, "touchmove", _this._delayedDragTouchMoveHandler);
            options.supportPointer && on(ownerDocument, "pointermove", _this._delayedDragTouchMoveHandler);
            _this._dragStartTimer = setTimeout(dragStartFn, options.delay);
          } else {
            dragStartFn();
          }
        }
      },
      _delayedDragTouchMoveHandler: function _delayedDragTouchMoveHandler(e18) {
        var touch = e18.touches ? e18.touches[0] : e18;
        if (Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) >= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))) {
          this._disableDelayedDrag();
        }
      },
      _disableDelayedDrag: function _disableDelayedDrag() {
        dragEl && _disableDraggable(dragEl);
        clearTimeout(this._dragStartTimer);
        this._disableDelayedDragEvents();
      },
      _disableDelayedDragEvents: function _disableDelayedDragEvents() {
        var ownerDocument = this.el.ownerDocument;
        off(ownerDocument, "mouseup", this._disableDelayedDrag);
        off(ownerDocument, "touchend", this._disableDelayedDrag);
        off(ownerDocument, "touchcancel", this._disableDelayedDrag);
        off(ownerDocument, "pointerup", this._disableDelayedDrag);
        off(ownerDocument, "pointercancel", this._disableDelayedDrag);
        off(ownerDocument, "mousemove", this._delayedDragTouchMoveHandler);
        off(ownerDocument, "touchmove", this._delayedDragTouchMoveHandler);
        off(ownerDocument, "pointermove", this._delayedDragTouchMoveHandler);
      },
      _triggerDragStart: function _triggerDragStart(evt, touch) {
        touch = touch || evt.pointerType == "touch" && evt;
        if (!this.nativeDraggable || touch) {
          if (this.options.supportPointer) {
            on(document, "pointermove", this._onTouchMove);
          } else if (touch) {
            on(document, "touchmove", this._onTouchMove);
          } else {
            on(document, "mousemove", this._onTouchMove);
          }
        } else {
          on(dragEl, "dragend", this);
          on(rootEl, "dragstart", this._onDragStart);
        }
        try {
          if (document.selection) {
            _nextTick(function() {
              document.selection.empty();
            });
          } else {
            window.getSelection().removeAllRanges();
          }
        } catch (err) {
        }
      },
      _dragStarted: function _dragStarted(fallback, evt) {
        awaitingDragStarted = false;
        if (rootEl && dragEl) {
          pluginEvent2("dragStarted", this, {
            evt
          });
          if (this.nativeDraggable) {
            on(document, "dragover", _checkOutsideTargetEl);
          }
          var options = this.options;
          !fallback && toggleClass(dragEl, options.dragClass, false);
          toggleClass(dragEl, options.ghostClass, true);
          Sortable.active = this;
          fallback && this._appendGhost();
          _dispatchEvent({
            sortable: this,
            name: "start",
            originalEvent: evt
          });
        } else {
          this._nulling();
        }
      },
      _emulateDragOver: function _emulateDragOver() {
        if (touchEvt) {
          this._lastX = touchEvt.clientX;
          this._lastY = touchEvt.clientY;
          _hideGhostForTarget();
          var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
          var parent = target;
          while (target && target.shadowRoot) {
            target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
            if (target === parent)
              break;
            parent = target;
          }
          dragEl.parentNode[expando]._isOutsideThisEl(target);
          if (parent) {
            do {
              if (parent[expando]) {
                var inserted = void 0;
                inserted = parent[expando]._onDragOver({
                  clientX: touchEvt.clientX,
                  clientY: touchEvt.clientY,
                  target,
                  rootEl: parent
                });
                if (inserted && !this.options.dragoverBubble) {
                  break;
                }
              }
              target = parent;
            } while (parent = getParentOrHost(parent));
          }
          _unhideGhostForTarget();
        }
      },
      _onTouchMove: function _onTouchMove(evt) {
        if (tapEvt) {
          var options = this.options, fallbackTolerance = options.fallbackTolerance, fallbackOffset = options.fallbackOffset, touch = evt.touches ? evt.touches[0] : evt, ghostMatrix = ghostEl && matrix(ghostEl, true), scaleX = ghostEl && ghostMatrix && ghostMatrix.a, scaleY = ghostEl && ghostMatrix && ghostMatrix.d, relativeScrollOffset = PositionGhostAbsolutely && ghostRelativeParent && getRelativeScrollOffset(ghostRelativeParent), dx = (touch.clientX - tapEvt.clientX + fallbackOffset.x) / (scaleX || 1) + (relativeScrollOffset ? relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0] : 0) / (scaleX || 1), dy = (touch.clientY - tapEvt.clientY + fallbackOffset.y) / (scaleY || 1) + (relativeScrollOffset ? relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1] : 0) / (scaleY || 1);
          if (!Sortable.active && !awaitingDragStarted) {
            if (fallbackTolerance && Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) < fallbackTolerance) {
              return;
            }
            this._onDragStart(evt, true);
          }
          if (ghostEl) {
            if (ghostMatrix) {
              ghostMatrix.e += dx - (lastDx || 0);
              ghostMatrix.f += dy - (lastDy || 0);
            } else {
              ghostMatrix = {
                a: 1,
                b: 0,
                c: 0,
                d: 1,
                e: dx,
                f: dy
              };
            }
            var cssMatrix = "matrix(".concat(ghostMatrix.a, ",").concat(ghostMatrix.b, ",").concat(ghostMatrix.c, ",").concat(ghostMatrix.d, ",").concat(ghostMatrix.e, ",").concat(ghostMatrix.f, ")");
            css(ghostEl, "webkitTransform", cssMatrix);
            css(ghostEl, "mozTransform", cssMatrix);
            css(ghostEl, "msTransform", cssMatrix);
            css(ghostEl, "transform", cssMatrix);
            lastDx = dx;
            lastDy = dy;
            touchEvt = touch;
          }
          evt.cancelable && evt.preventDefault();
        }
      },
      _appendGhost: function _appendGhost() {
        if (!ghostEl) {
          var container = this.options.fallbackOnBody ? document.body : rootEl, rect = getRect(dragEl, true, PositionGhostAbsolutely, true, container), options = this.options;
          if (PositionGhostAbsolutely) {
            ghostRelativeParent = container;
            while (css(ghostRelativeParent, "position") === "static" && css(ghostRelativeParent, "transform") === "none" && ghostRelativeParent !== document) {
              ghostRelativeParent = ghostRelativeParent.parentNode;
            }
            if (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {
              if (ghostRelativeParent === document)
                ghostRelativeParent = getWindowScrollingElement();
              rect.top += ghostRelativeParent.scrollTop;
              rect.left += ghostRelativeParent.scrollLeft;
            } else {
              ghostRelativeParent = getWindowScrollingElement();
            }
            ghostRelativeParentInitialScroll = getRelativeScrollOffset(ghostRelativeParent);
          }
          ghostEl = dragEl.cloneNode(true);
          toggleClass(ghostEl, options.ghostClass, false);
          toggleClass(ghostEl, options.fallbackClass, true);
          toggleClass(ghostEl, options.dragClass, true);
          css(ghostEl, "transition", "");
          css(ghostEl, "transform", "");
          css(ghostEl, "box-sizing", "border-box");
          css(ghostEl, "margin", 0);
          css(ghostEl, "top", rect.top);
          css(ghostEl, "left", rect.left);
          css(ghostEl, "width", rect.width);
          css(ghostEl, "height", rect.height);
          css(ghostEl, "opacity", "0.8");
          css(ghostEl, "position", PositionGhostAbsolutely ? "absolute" : "fixed");
          css(ghostEl, "zIndex", "100000");
          css(ghostEl, "pointerEvents", "none");
          Sortable.ghost = ghostEl;
          container.appendChild(ghostEl);
          css(ghostEl, "transform-origin", tapDistanceLeft / parseInt(ghostEl.style.width) * 100 + "% " + tapDistanceTop / parseInt(ghostEl.style.height) * 100 + "%");
        }
      },
      _onDragStart: function _onDragStart(evt, fallback) {
        var _this = this;
        var dataTransfer = evt.dataTransfer;
        var options = _this.options;
        pluginEvent2("dragStart", this, {
          evt
        });
        if (Sortable.eventCanceled) {
          this._onDrop();
          return;
        }
        pluginEvent2("setupClone", this);
        if (!Sortable.eventCanceled) {
          cloneEl = clone(dragEl);
          cloneEl.removeAttribute("id");
          cloneEl.draggable = false;
          cloneEl.style["will-change"] = "";
          this._hideClone();
          toggleClass(cloneEl, this.options.chosenClass, false);
          Sortable.clone = cloneEl;
        }
        _this.cloneId = _nextTick(function() {
          pluginEvent2("clone", _this);
          if (Sortable.eventCanceled)
            return;
          if (!_this.options.removeCloneOnHide) {
            rootEl.insertBefore(cloneEl, dragEl);
          }
          _this._hideClone();
          _dispatchEvent({
            sortable: _this,
            name: "clone"
          });
        });
        !fallback && toggleClass(dragEl, options.dragClass, true);
        if (fallback) {
          ignoreNextClick = true;
          _this._loopId = setInterval(_this._emulateDragOver, 50);
        } else {
          off(document, "mouseup", _this._onDrop);
          off(document, "touchend", _this._onDrop);
          off(document, "touchcancel", _this._onDrop);
          if (dataTransfer) {
            dataTransfer.effectAllowed = "move";
            options.setData && options.setData.call(_this, dataTransfer, dragEl);
          }
          on(document, "drop", _this);
          css(dragEl, "transform", "translateZ(0)");
        }
        awaitingDragStarted = true;
        _this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));
        on(document, "selectstart", _this);
        moved = true;
        window.getSelection().removeAllRanges();
        if (Safari) {
          css(document.body, "user-select", "none");
        }
      },
      // Returns true - if no further action is needed (either inserted or another condition)
      _onDragOver: function _onDragOver(evt) {
        var el = this.el, target = evt.target, dragRect, targetRect, revert, options = this.options, group = options.group, activeSortable = Sortable.active, isOwner = activeGroup === group, canSort = options.sort, fromSortable = putSortable || activeSortable, vertical, _this = this, completedFired = false;
        if (_silent)
          return;
        function dragOverEvent(name, extra) {
          pluginEvent2(name, _this, _objectSpread2({
            evt,
            isOwner,
            axis: vertical ? "vertical" : "horizontal",
            revert,
            dragRect,
            targetRect,
            canSort,
            fromSortable,
            target,
            completed,
            onMove: function onMove(target2, after2) {
              return _onMove(rootEl, el, dragEl, dragRect, target2, getRect(target2), evt, after2);
            },
            changed
          }, extra));
        }
        function capture() {
          dragOverEvent("dragOverAnimationCapture");
          _this.captureAnimationState();
          if (_this !== fromSortable) {
            fromSortable.captureAnimationState();
          }
        }
        function completed(insertion) {
          dragOverEvent("dragOverCompleted", {
            insertion
          });
          if (insertion) {
            if (isOwner) {
              activeSortable._hideClone();
            } else {
              activeSortable._showClone(_this);
            }
            if (_this !== fromSortable) {
              toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);
              toggleClass(dragEl, options.ghostClass, true);
            }
            if (putSortable !== _this && _this !== Sortable.active) {
              putSortable = _this;
            } else if (_this === Sortable.active && putSortable) {
              putSortable = null;
            }
            if (fromSortable === _this) {
              _this._ignoreWhileAnimating = target;
            }
            _this.animateAll(function() {
              dragOverEvent("dragOverAnimationComplete");
              _this._ignoreWhileAnimating = null;
            });
            if (_this !== fromSortable) {
              fromSortable.animateAll();
              fromSortable._ignoreWhileAnimating = null;
            }
          }
          if (target === dragEl && !dragEl.animated || target === el && !target.animated) {
            lastTarget = null;
          }
          if (!options.dragoverBubble && !evt.rootEl && target !== document) {
            dragEl.parentNode[expando]._isOutsideThisEl(evt.target);
            !insertion && nearestEmptyInsertDetectEvent(evt);
          }
          !options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();
          return completedFired = true;
        }
        function changed() {
          newIndex = index(dragEl);
          newDraggableIndex = index(dragEl, options.draggable);
          _dispatchEvent({
            sortable: _this,
            name: "change",
            toEl: el,
            newIndex,
            newDraggableIndex,
            originalEvent: evt
          });
        }
        if (evt.preventDefault !== void 0) {
          evt.cancelable && evt.preventDefault();
        }
        target = closest(target, options.draggable, el, true);
        dragOverEvent("dragOver");
        if (Sortable.eventCanceled)
          return completedFired;
        if (dragEl.contains(evt.target) || target.animated && target.animatingX && target.animatingY || _this._ignoreWhileAnimating === target) {
          return completed(false);
        }
        ignoreNextClick = false;
        if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = parentEl !== rootEl) : putSortable === this || (this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt))) {
          vertical = this._getDirection(evt, target) === "vertical";
          dragRect = getRect(dragEl);
          dragOverEvent("dragOverValid");
          if (Sortable.eventCanceled)
            return completedFired;
          if (revert) {
            parentEl = rootEl;
            capture();
            this._hideClone();
            dragOverEvent("revert");
            if (!Sortable.eventCanceled) {
              if (nextEl) {
                rootEl.insertBefore(dragEl, nextEl);
              } else {
                rootEl.appendChild(dragEl);
              }
            }
            return completed(true);
          }
          var elLastChild = lastChild(el, options.draggable);
          if (!elLastChild || _ghostIsLast(evt, vertical, this) && !elLastChild.animated) {
            if (elLastChild === dragEl) {
              return completed(false);
            }
            if (elLastChild && el === evt.target) {
              target = elLastChild;
            }
            if (target) {
              targetRect = getRect(target);
            }
            if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {
              capture();
              if (elLastChild && elLastChild.nextSibling) {
                el.insertBefore(dragEl, elLastChild.nextSibling);
              } else {
                el.appendChild(dragEl);
              }
              parentEl = el;
              changed();
              return completed(true);
            }
          } else if (elLastChild && _ghostIsFirst(evt, vertical, this)) {
            var firstChild = getChild(el, 0, options, true);
            if (firstChild === dragEl) {
              return completed(false);
            }
            target = firstChild;
            targetRect = getRect(target);
            if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, false) !== false) {
              capture();
              el.insertBefore(dragEl, firstChild);
              parentEl = el;
              changed();
              return completed(true);
            }
          } else if (target.parentNode === el) {
            targetRect = getRect(target);
            var direction = 0, targetBeforeFirstSwap, differentLevel = dragEl.parentNode !== el, differentRowCol = !_dragElInRowColumn(dragEl.animated && dragEl.toRect || dragRect, target.animated && target.toRect || targetRect, vertical), side1 = vertical ? "top" : "left", scrolledPastTop = isScrolledPast(target, "top", "top") || isScrolledPast(dragEl, "top", "top"), scrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;
            if (lastTarget !== target) {
              targetBeforeFirstSwap = targetRect[side1];
              pastFirstInvertThresh = false;
              isCircumstantialInvert = !differentRowCol && options.invertSwap || differentLevel;
            }
            direction = _getSwapDirection(evt, target, targetRect, vertical, differentRowCol ? 1 : options.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold, isCircumstantialInvert, lastTarget === target);
            var sibling;
            if (direction !== 0) {
              var dragIndex = index(dragEl);
              do {
                dragIndex -= direction;
                sibling = parentEl.children[dragIndex];
              } while (sibling && (css(sibling, "display") === "none" || sibling === ghostEl));
            }
            if (direction === 0 || sibling === target) {
              return completed(false);
            }
            lastTarget = target;
            lastDirection = direction;
            var nextSibling = target.nextElementSibling, after = false;
            after = direction === 1;
            var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);
            if (moveVector !== false) {
              if (moveVector === 1 || moveVector === -1) {
                after = moveVector === 1;
              }
              _silent = true;
              setTimeout(_unsilent, 30);
              capture();
              if (after && !nextSibling) {
                el.appendChild(dragEl);
              } else {
                target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
              }
              if (scrolledPastTop) {
                scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);
              }
              parentEl = dragEl.parentNode;
              if (targetBeforeFirstSwap !== void 0 && !isCircumstantialInvert) {
                targetMoveDistance = Math.abs(targetBeforeFirstSwap - getRect(target)[side1]);
              }
              changed();
              return completed(true);
            }
          }
          if (el.contains(dragEl)) {
            return completed(false);
          }
        }
        return false;
      },
      _ignoreWhileAnimating: null,
      _offMoveEvents: function _offMoveEvents() {
        off(document, "mousemove", this._onTouchMove);
        off(document, "touchmove", this._onTouchMove);
        off(document, "pointermove", this._onTouchMove);
        off(document, "dragover", nearestEmptyInsertDetectEvent);
        off(document, "mousemove", nearestEmptyInsertDetectEvent);
        off(document, "touchmove", nearestEmptyInsertDetectEvent);
      },
      _offUpEvents: function _offUpEvents() {
        var ownerDocument = this.el.ownerDocument;
        off(ownerDocument, "mouseup", this._onDrop);
        off(ownerDocument, "touchend", this._onDrop);
        off(ownerDocument, "pointerup", this._onDrop);
        off(ownerDocument, "pointercancel", this._onDrop);
        off(ownerDocument, "touchcancel", this._onDrop);
        off(document, "selectstart", this);
      },
      _onDrop: function _onDrop(evt) {
        var el = this.el, options = this.options;
        newIndex = index(dragEl);
        newDraggableIndex = index(dragEl, options.draggable);
        pluginEvent2("drop", this, {
          evt
        });
        parentEl = dragEl && dragEl.parentNode;
        newIndex = index(dragEl);
        newDraggableIndex = index(dragEl, options.draggable);
        if (Sortable.eventCanceled) {
          this._nulling();
          return;
        }
        awaitingDragStarted = false;
        isCircumstantialInvert = false;
        pastFirstInvertThresh = false;
        clearInterval(this._loopId);
        clearTimeout(this._dragStartTimer);
        _cancelNextTick(this.cloneId);
        _cancelNextTick(this._dragStartId);
        if (this.nativeDraggable) {
          off(document, "drop", this);
          off(el, "dragstart", this._onDragStart);
        }
        this._offMoveEvents();
        this._offUpEvents();
        if (Safari) {
          css(document.body, "user-select", "");
        }
        css(dragEl, "transform", "");
        if (evt) {
          if (moved) {
            evt.cancelable && evt.preventDefault();
            !options.dropBubble && evt.stopPropagation();
          }
          ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);
          if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== "clone") {
            cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);
          }
          if (dragEl) {
            if (this.nativeDraggable) {
              off(dragEl, "dragend", this);
            }
            _disableDraggable(dragEl);
            dragEl.style["will-change"] = "";
            if (moved && !awaitingDragStarted) {
              toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);
            }
            toggleClass(dragEl, this.options.chosenClass, false);
            _dispatchEvent({
              sortable: this,
              name: "unchoose",
              toEl: parentEl,
              newIndex: null,
              newDraggableIndex: null,
              originalEvent: evt
            });
            if (rootEl !== parentEl) {
              if (newIndex >= 0) {
                _dispatchEvent({
                  rootEl: parentEl,
                  name: "add",
                  toEl: parentEl,
                  fromEl: rootEl,
                  originalEvent: evt
                });
                _dispatchEvent({
                  sortable: this,
                  name: "remove",
                  toEl: parentEl,
                  originalEvent: evt
                });
                _dispatchEvent({
                  rootEl: parentEl,
                  name: "sort",
                  toEl: parentEl,
                  fromEl: rootEl,
                  originalEvent: evt
                });
                _dispatchEvent({
                  sortable: this,
                  name: "sort",
                  toEl: parentEl,
                  originalEvent: evt
                });
              }
              putSortable && putSortable.save();
            } else {
              if (newIndex !== oldIndex) {
                if (newIndex >= 0) {
                  _dispatchEvent({
                    sortable: this,
                    name: "update",
                    toEl: parentEl,
                    originalEvent: evt
                  });
                  _dispatchEvent({
                    sortable: this,
                    name: "sort",
                    toEl: parentEl,
                    originalEvent: evt
                  });
                }
              }
            }
            if (Sortable.active) {
              if (newIndex == null || newIndex === -1) {
                newIndex = oldIndex;
                newDraggableIndex = oldDraggableIndex;
              }
              _dispatchEvent({
                sortable: this,
                name: "end",
                toEl: parentEl,
                originalEvent: evt
              });
              this.save();
            }
          }
        }
        this._nulling();
      },
      _nulling: function _nulling() {
        pluginEvent2("nulling", this);
        rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = cloneHidden = tapEvt = touchEvt = moved = newIndex = newDraggableIndex = oldIndex = oldDraggableIndex = lastTarget = lastDirection = putSortable = activeGroup = Sortable.dragged = Sortable.ghost = Sortable.clone = Sortable.active = null;
        savedInputChecked.forEach(function(el) {
          el.checked = true;
        });
        savedInputChecked.length = lastDx = lastDy = 0;
      },
      handleEvent: function handleEvent(evt) {
        switch (evt.type) {
          case "drop":
          case "dragend":
            this._onDrop(evt);
            break;
          case "dragenter":
          case "dragover":
            if (dragEl) {
              this._onDragOver(evt);
              _globalDragOver(evt);
            }
            break;
          case "selectstart":
            evt.preventDefault();
            break;
        }
      },
      /**
       * Serializes the item into an array of string.
       * @returns {String[]}
       */
      toArray: function toArray() {
        var order = [], el, children = this.el.children, i = 0, n4 = children.length, options = this.options;
        for (; i < n4; i++) {
          el = children[i];
          if (closest(el, options.draggable, this.el, false)) {
            order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
          }
        }
        return order;
      },
      /**
       * Sorts the elements according to the array.
       * @param  {String[]}  order  order of the items
       */
      sort: function sort(order, useAnimation) {
        var items = {}, rootEl2 = this.el;
        this.toArray().forEach(function(id, i) {
          var el = rootEl2.children[i];
          if (closest(el, this.options.draggable, rootEl2, false)) {
            items[id] = el;
          }
        }, this);
        useAnimation && this.captureAnimationState();
        order.forEach(function(id) {
          if (items[id]) {
            rootEl2.removeChild(items[id]);
            rootEl2.appendChild(items[id]);
          }
        });
        useAnimation && this.animateAll();
      },
      /**
       * Save the current sorting
       */
      save: function save() {
        var store = this.options.store;
        store && store.set && store.set(this);
      },
      /**
       * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
       * @param   {HTMLElement}  el
       * @param   {String}       [selector]  default: `options.draggable`
       * @returns {HTMLElement|null}
       */
      closest: function closest$1(el, selector) {
        return closest(el, selector || this.options.draggable, this.el, false);
      },
      /**
       * Set/get option
       * @param   {string} name
       * @param   {*}      [value]
       * @returns {*}
       */
      option: function option(name, value) {
        var options = this.options;
        if (value === void 0) {
          return options[name];
        } else {
          var modifiedValue = PluginManager.modifyOption(this, name, value);
          if (typeof modifiedValue !== "undefined") {
            options[name] = modifiedValue;
          } else {
            options[name] = value;
          }
          if (name === "group") {
            _prepareGroup(options);
          }
        }
      },
      /**
       * Destroy
       */
      destroy: function destroy() {
        pluginEvent2("destroy", this);
        var el = this.el;
        el[expando] = null;
        off(el, "mousedown", this._onTapStart);
        off(el, "touchstart", this._onTapStart);
        off(el, "pointerdown", this._onTapStart);
        if (this.nativeDraggable) {
          off(el, "dragover", this);
          off(el, "dragenter", this);
        }
        Array.prototype.forEach.call(el.querySelectorAll("[draggable]"), function(el2) {
          el2.removeAttribute("draggable");
        });
        this._onDrop();
        this._disableDelayedDragEvents();
        sortables.splice(sortables.indexOf(this.el), 1);
        this.el = el = null;
      },
      _hideClone: function _hideClone() {
        if (!cloneHidden) {
          pluginEvent2("hideClone", this);
          if (Sortable.eventCanceled)
            return;
          css(cloneEl, "display", "none");
          if (this.options.removeCloneOnHide && cloneEl.parentNode) {
            cloneEl.parentNode.removeChild(cloneEl);
          }
          cloneHidden = true;
        }
      },
      _showClone: function _showClone(putSortable2) {
        if (putSortable2.lastPutMode !== "clone") {
          this._hideClone();
          return;
        }
        if (cloneHidden) {
          pluginEvent2("showClone", this);
          if (Sortable.eventCanceled)
            return;
          if (dragEl.parentNode == rootEl && !this.options.group.revertClone) {
            rootEl.insertBefore(cloneEl, dragEl);
          } else if (nextEl) {
            rootEl.insertBefore(cloneEl, nextEl);
          } else {
            rootEl.appendChild(cloneEl);
          }
          if (this.options.group.revertClone) {
            this.animate(dragEl, cloneEl);
          }
          css(cloneEl, "display", "");
          cloneHidden = false;
        }
      }
    };
    if (documentExists) {
      on(document, "touchmove", function(evt) {
        if ((Sortable.active || awaitingDragStarted) && evt.cancelable) {
          evt.preventDefault();
        }
      });
    }
    Sortable.utils = {
      on,
      off,
      css,
      find,
      is: function is(el, selector) {
        return !!closest(el, selector, el, false);
      },
      extend,
      throttle,
      closest,
      toggleClass,
      clone,
      index,
      nextTick: _nextTick,
      cancelNextTick: _cancelNextTick,
      detectDirection: _detectDirection,
      getChild,
      expando
    };
    Sortable.get = function(element) {
      return element[expando];
    };
    Sortable.mount = function() {
      for (var _len = arguments.length, plugins2 = new Array(_len), _key = 0; _key < _len; _key++) {
        plugins2[_key] = arguments[_key];
      }
      if (plugins2[0].constructor === Array)
        plugins2 = plugins2[0];
      plugins2.forEach(function(plugin) {
        if (!plugin.prototype || !plugin.prototype.constructor) {
          throw "Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(plugin));
        }
        if (plugin.utils)
          Sortable.utils = _objectSpread2(_objectSpread2({}, Sortable.utils), plugin.utils);
        PluginManager.mount(plugin);
      });
    };
    Sortable.create = function(el, options) {
      return new Sortable(el, options);
    };
    Sortable.version = version;
    autoScrolls = [];
    scrolling = false;
    autoScroll = throttle(function(evt, options, rootEl2, isFallback) {
      if (!options.scroll)
        return;
      var x5 = (evt.touches ? evt.touches[0] : evt).clientX, y3 = (evt.touches ? evt.touches[0] : evt).clientY, sens = options.scrollSensitivity, speed = options.scrollSpeed, winScroller = getWindowScrollingElement();
      var scrollThisInstance = false, scrollCustomFn;
      if (scrollRootEl !== rootEl2) {
        scrollRootEl = rootEl2;
        clearAutoScrolls();
        scrollEl = options.scroll;
        scrollCustomFn = options.scrollFn;
        if (scrollEl === true) {
          scrollEl = getParentAutoScrollElement(rootEl2, true);
        }
      }
      var layersOut = 0;
      var currentParent = scrollEl;
      do {
        var el = currentParent, rect = getRect(el), top = rect.top, bottom = rect.bottom, left = rect.left, right = rect.right, width = rect.width, height = rect.height, canScrollX = void 0, canScrollY = void 0, scrollWidth = el.scrollWidth, scrollHeight = el.scrollHeight, elCSS = css(el), scrollPosX = el.scrollLeft, scrollPosY = el.scrollTop;
        if (el === winScroller) {
          canScrollX = width < scrollWidth && (elCSS.overflowX === "auto" || elCSS.overflowX === "scroll" || elCSS.overflowX === "visible");
          canScrollY = height < scrollHeight && (elCSS.overflowY === "auto" || elCSS.overflowY === "scroll" || elCSS.overflowY === "visible");
        } else {
          canScrollX = width < scrollWidth && (elCSS.overflowX === "auto" || elCSS.overflowX === "scroll");
          canScrollY = height < scrollHeight && (elCSS.overflowY === "auto" || elCSS.overflowY === "scroll");
        }
        var vx = canScrollX && (Math.abs(right - x5) <= sens && scrollPosX + width < scrollWidth) - (Math.abs(left - x5) <= sens && !!scrollPosX);
        var vy = canScrollY && (Math.abs(bottom - y3) <= sens && scrollPosY + height < scrollHeight) - (Math.abs(top - y3) <= sens && !!scrollPosY);
        if (!autoScrolls[layersOut]) {
          for (var i = 0; i <= layersOut; i++) {
            if (!autoScrolls[i]) {
              autoScrolls[i] = {};
            }
          }
        }
        if (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {
          autoScrolls[layersOut].el = el;
          autoScrolls[layersOut].vx = vx;
          autoScrolls[layersOut].vy = vy;
          clearInterval(autoScrolls[layersOut].pid);
          if (vx != 0 || vy != 0) {
            scrollThisInstance = true;
            autoScrolls[layersOut].pid = setInterval((function() {
              if (isFallback && this.layer === 0) {
                Sortable.active._onTouchMove(touchEvt$1);
              }
              var scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;
              var scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;
              if (typeof scrollCustomFn === "function") {
                if (scrollCustomFn.call(Sortable.dragged.parentNode[expando], scrollOffsetX, scrollOffsetY, evt, touchEvt$1, autoScrolls[this.layer].el) !== "continue") {
                  return;
                }
              }
              scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);
            }).bind({
              layer: layersOut
            }), 24);
          }
        }
        layersOut++;
      } while (options.bubbleScroll && currentParent !== winScroller && (currentParent = getParentAutoScrollElement(currentParent, false)));
      scrolling = scrollThisInstance;
    }, 30);
    drop = function drop2(_ref) {
      var originalEvent = _ref.originalEvent, putSortable2 = _ref.putSortable, dragEl2 = _ref.dragEl, activeSortable = _ref.activeSortable, dispatchSortableEvent = _ref.dispatchSortableEvent, hideGhostForTarget = _ref.hideGhostForTarget, unhideGhostForTarget = _ref.unhideGhostForTarget;
      if (!originalEvent)
        return;
      var toSortable = putSortable2 || activeSortable;
      hideGhostForTarget();
      var touch = originalEvent.changedTouches && originalEvent.changedTouches.length ? originalEvent.changedTouches[0] : originalEvent;
      var target = document.elementFromPoint(touch.clientX, touch.clientY);
      unhideGhostForTarget();
      if (toSortable && !toSortable.el.contains(target)) {
        dispatchSortableEvent("spill");
        this.onSpill({
          dragEl: dragEl2,
          putSortable: putSortable2
        });
      }
    };
    Revert.prototype = {
      startIndex: null,
      dragStart: function dragStart(_ref2) {
        var oldDraggableIndex2 = _ref2.oldDraggableIndex;
        this.startIndex = oldDraggableIndex2;
      },
      onSpill: function onSpill(_ref3) {
        var dragEl2 = _ref3.dragEl, putSortable2 = _ref3.putSortable;
        this.sortable.captureAnimationState();
        if (putSortable2) {
          putSortable2.captureAnimationState();
        }
        var nextSibling = getChild(this.sortable.el, this.startIndex, this.options);
        if (nextSibling) {
          this.sortable.el.insertBefore(dragEl2, nextSibling);
        } else {
          this.sortable.el.appendChild(dragEl2);
        }
        this.sortable.animateAll();
        if (putSortable2) {
          putSortable2.animateAll();
        }
      },
      drop
    };
    _extends(Revert, {
      pluginName: "revertOnSpill"
    });
    Remove.prototype = {
      onSpill: function onSpill2(_ref4) {
        var dragEl2 = _ref4.dragEl, putSortable2 = _ref4.putSortable;
        var parentSortable = putSortable2 || this.sortable;
        parentSortable.captureAnimationState();
        dragEl2.parentNode && dragEl2.parentNode.removeChild(dragEl2);
        parentSortable.animateAll();
      },
      drop
    };
    _extends(Remove, {
      pluginName: "removeOnSpill"
    });
    multiDragElements = [];
    multiDragClones = [];
    initialFolding = false;
    folding = false;
    dragStarted = false;
    Sortable.mount(new AutoScrollPlugin());
    Sortable.mount(Remove, Revert);
    sortable_esm_default = Sortable;
  }
});

// node_modules/react-sortablejs/node_modules/classnames/index.js
var require_classnames = __commonJS({
  "node_modules/react-sortablejs/node_modules/classnames/index.js"(exports, module) {
    (function() {
      "use strict";
      var hasOwn = {}.hasOwnProperty;
      function classNames() {
        var classes = [];
        for (var i = 0; i < arguments.length; i++) {
          var arg = arguments[i];
          if (!arg)
            continue;
          var argType = typeof arg;
          if (argType === "string" || argType === "number") {
            classes.push(arg);
          } else if (Array.isArray(arg)) {
            if (arg.length) {
              var inner = classNames.apply(null, arg);
              if (inner) {
                classes.push(inner);
              }
            }
          } else if (argType === "object") {
            if (arg.toString === Object.prototype.toString) {
              for (var key in arg) {
                if (hasOwn.call(arg, key) && arg[key]) {
                  classes.push(key);
                }
              }
            } else {
              classes.push(arg.toString());
            }
          }
        }
        return classes.join(" ");
      }
      if (typeof module !== "undefined" && module.exports) {
        classNames.default = classNames;
        module.exports = classNames;
      } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
        define("classnames", [], function() {
          return classNames;
        });
      } else {
        window.classNames = classNames;
      }
    })();
  }
});

// node_modules/tiny-invariant/dist/tiny-invariant.esm.js
var tiny_invariant_esm_exports = {};
__export(tiny_invariant_esm_exports, {
  default: () => invariant
});
function invariant(condition, message) {
  if (condition) {
    return;
  }
  if (isProduction) {
    throw new Error(prefix);
  }
  var provided = typeof message === "function" ? message() : message;
  var value = provided ? prefix + ": " + provided : prefix;
  throw new Error(value);
}
var isProduction, prefix;
var init_tiny_invariant_esm = __esm({
  "node_modules/tiny-invariant/dist/tiny-invariant.esm.js"() {
    isProduction = false;
    prefix = "Invariant failed";
  }
});

// node_modules/react-sortablejs/dist/index.js
var require_dist = __commonJS({
  "node_modules/react-sortablejs/dist/index.js"(exports, module) {
    var $8zHUo$sortablejs = (init_sortable_esm(), __toCommonJS(sortable_esm_exports));
    var $8zHUo$classnames = require_classnames();
    var $8zHUo$react = require_react();
    var $8zHUo$tinyinvariant = (init_tiny_invariant_esm(), __toCommonJS(tiny_invariant_esm_exports));
    function $parcel$interopDefault(a2) {
      return a2 && a2.__esModule ? a2.default : a2;
    }
    function $parcel$export(e18, n4, v7, s3) {
      Object.defineProperty(e18, n4, { get: v7, set: s3, enumerable: true, configurable: true });
    }
    function $parcel$exportWildcard(dest, source) {
      Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || dest.hasOwnProperty(key)) {
          return;
        }
        Object.defineProperty(dest, key, {
          enumerable: true,
          get: function get() {
            return source[key];
          }
        });
      });
      return dest;
    }
    $parcel$export(module.exports, "Sortable", () => $882b6d93070905b3$re_export$Sortable);
    $parcel$export(module.exports, "Direction", () => $882b6d93070905b3$re_export$Direction);
    $parcel$export(module.exports, "DOMRect", () => $882b6d93070905b3$re_export$DOMRect);
    $parcel$export(module.exports, "GroupOptions", () => $882b6d93070905b3$re_export$GroupOptions);
    $parcel$export(module.exports, "MoveEvent", () => $882b6d93070905b3$re_export$MoveEvent);
    $parcel$export(module.exports, "Options", () => $882b6d93070905b3$re_export$Options);
    $parcel$export(module.exports, "PullResult", () => $882b6d93070905b3$re_export$PullResult);
    $parcel$export(module.exports, "PutResult", () => $882b6d93070905b3$re_export$PutResult);
    $parcel$export(module.exports, "SortableEvent", () => $882b6d93070905b3$re_export$SortableEvent);
    $parcel$export(module.exports, "SortableOptions", () => $882b6d93070905b3$re_export$SortableOptions);
    $parcel$export(module.exports, "Utils", () => $882b6d93070905b3$re_export$Utils);
    $parcel$export(module.exports, "ReactSortable", () => $7fe8e3ea572bda7a$export$11bbed9ee0012c13);
    function $eb03e74f8f7db1f3$export$1d0aa160432dfea5(node) {
      if (node.parentElement !== null)
        node.parentElement.removeChild(node);
    }
    function $eb03e74f8f7db1f3$export$6d240faa51aa562f(parent, newChild, index2) {
      const refChild = parent.children[index2] || null;
      parent.insertBefore(newChild, refChild);
    }
    function $eb03e74f8f7db1f3$export$77f49a256021c8de(customs) {
      customs.forEach((curr) => $eb03e74f8f7db1f3$export$1d0aa160432dfea5(curr.element));
    }
    function $eb03e74f8f7db1f3$export$a6177d5829f70ebc(customs) {
      customs.forEach((curr) => {
        $eb03e74f8f7db1f3$export$6d240faa51aa562f(curr.parentElement, curr.element, curr.oldIndex);
      });
    }
    function $eb03e74f8f7db1f3$export$4655efe700f887a(evt, list) {
      const mode = $eb03e74f8f7db1f3$export$1fc0f6205829e19c(evt);
      const parentElement = {
        parentElement: evt.from
      };
      let custom = [];
      switch (mode) {
        case "normal":
          const item = {
            element: evt.item,
            newIndex: evt.newIndex,
            oldIndex: evt.oldIndex,
            parentElement: evt.from
          };
          custom = [
            item
          ];
          break;
        case "swap":
          const drag = {
            element: evt.item,
            oldIndex: evt.oldIndex,
            newIndex: evt.newIndex,
            ...parentElement
          };
          const swap = {
            element: evt.swapItem,
            oldIndex: evt.newIndex,
            newIndex: evt.oldIndex,
            ...parentElement
          };
          custom = [
            drag,
            swap
          ];
          break;
        case "multidrag":
          custom = evt.oldIndicies.map((curr, index2) => ({
            element: curr.multiDragElement,
            oldIndex: curr.index,
            newIndex: evt.newIndicies[index2].index,
            ...parentElement
          }));
          break;
      }
      const customs = $eb03e74f8f7db1f3$export$bc06a3af7dc65f53(custom, list);
      return customs;
    }
    function $eb03e74f8f7db1f3$export$c25cf8080bd305ec(normalized, list) {
      const a2 = $eb03e74f8f7db1f3$export$be2da95e6167b0bd(normalized, list);
      const b5 = $eb03e74f8f7db1f3$export$eca851ee65ae17e4(normalized, a2);
      return b5;
    }
    function $eb03e74f8f7db1f3$export$be2da95e6167b0bd(normalized, list) {
      const newList = [
        ...list
      ];
      normalized.concat().reverse().forEach((curr) => newList.splice(curr.oldIndex, 1));
      return newList;
    }
    function $eb03e74f8f7db1f3$export$eca851ee65ae17e4(normalized, list, evt, clone2) {
      const newList = [
        ...list
      ];
      normalized.forEach((curr) => {
        const newItem = clone2 && evt && clone2(curr.item, evt);
        newList.splice(curr.newIndex, 0, newItem || curr.item);
      });
      return newList;
    }
    function $eb03e74f8f7db1f3$export$1fc0f6205829e19c(evt) {
      if (evt.oldIndicies && evt.oldIndicies.length > 0)
        return "multidrag";
      if (evt.swapItem)
        return "swap";
      return "normal";
    }
    function $eb03e74f8f7db1f3$export$bc06a3af7dc65f53(inputs, list) {
      const normalized = inputs.map((curr) => ({
        ...curr,
        item: list[curr.oldIndex]
      })).sort((a2, b5) => a2.oldIndex - b5.oldIndex);
      return normalized;
    }
    function $eb03e74f8f7db1f3$export$7553c81e62e31b7e(props) {
      const { list, setList, children, tag, style, className, clone: clone2, onAdd, onChange, onChoose, onClone, onEnd, onFilter, onRemove, onSort, onStart, onUnchoose, onUpdate, onMove, onSpill: onSpill3, onSelect, onDeselect, ...options } = props;
      return options;
    }
    var $7fe8e3ea572bda7a$var$store = {
      dragging: null
    };
    var $7fe8e3ea572bda7a$export$11bbed9ee0012c13 = class extends (0, $8zHUo$react.Component) {
      constructor(props) {
        super(props);
        this.ref = (0, $8zHUo$react.createRef)();
        const newList = [
          ...props.list
        ].map((item) => Object.assign(item, {
          chosen: false,
          selected: false
        }));
        props.setList(newList, this.sortable, $7fe8e3ea572bda7a$var$store);
        (0, $parcel$interopDefault($8zHUo$tinyinvariant))(
          //@ts-expect-error: Doesn't exist. Will deprecate soon.
          !props.plugins,
          `
Plugins prop is no longer supported.
Instead, mount it with "Sortable.mount(new MultiDrag())"
Please read the updated README.md at https://github.com/SortableJS/react-sortablejs.
      `
        );
      }
      componentDidMount() {
        if (this.ref.current === null)
          return;
        const newOptions = this.makeOptions();
        (0, $parcel$interopDefault($8zHUo$sortablejs)).create(this.ref.current, newOptions);
      }
      componentDidUpdate(prevProps) {
        if (prevProps.disabled !== this.props.disabled && this.sortable)
          this.sortable.option("disabled", this.props.disabled);
      }
      render() {
        const { tag, style, className, id } = this.props;
        const classicProps = {
          style,
          className,
          id
        };
        const newTag = !tag || tag === null ? "div" : tag;
        return (0, $8zHUo$react.createElement)(newTag, {
          // @todo - find a way (perhaps with the callback) to allow AntD components to work
          ref: this.ref,
          ...classicProps
        }, this.getChildren());
      }
      getChildren() {
        const { children, dataIdAttr, selectedClass = "sortable-selected", chosenClass = "sortable-chosen", dragClass = "sortable-drag", fallbackClass = "sortable-falback", ghostClass = "sortable-ghost", swapClass = "sortable-swap-highlight", filter = "sortable-filter", list } = this.props;
        if (!children || children == null)
          return null;
        const dataid = dataIdAttr || "data-id";
        return (0, $8zHUo$react.Children).map(children, (child, index2) => {
          if (child === void 0)
            return void 0;
          const item = list[index2] || {};
          const { className: prevClassName } = child.props;
          const filtered = typeof filter === "string" && {
            [filter.replace(".", "")]: !!item.filtered
          };
          const className = (0, $parcel$interopDefault($8zHUo$classnames))(prevClassName, {
            [selectedClass]: item.selected,
            [chosenClass]: item.chosen,
            ...filtered
          });
          return (0, $8zHUo$react.cloneElement)(child, {
            [dataid]: child.key,
            className
          });
        });
      }
      /** Appends the `sortable` property to this component */
      get sortable() {
        const el = this.ref.current;
        if (el === null)
          return null;
        const key = Object.keys(el).find((k3) => k3.includes("Sortable"));
        if (!key)
          return null;
        return el[key];
      }
      /** Converts all the props from `ReactSortable` into the `options` object that `Sortable.create(el, [options])` can use. */
      makeOptions() {
        const DOMHandlers = [
          "onAdd",
          "onChoose",
          "onDeselect",
          "onEnd",
          "onRemove",
          "onSelect",
          "onSpill",
          "onStart",
          "onUnchoose",
          "onUpdate"
        ];
        const NonDOMHandlers = [
          "onChange",
          "onClone",
          "onFilter",
          "onSort"
        ];
        const newOptions = (0, $eb03e74f8f7db1f3$export$7553c81e62e31b7e)(this.props);
        DOMHandlers.forEach((name) => newOptions[name] = this.prepareOnHandlerPropAndDOM(name));
        NonDOMHandlers.forEach((name) => newOptions[name] = this.prepareOnHandlerProp(name));
        const onMove1 = (evt, originalEvt) => {
          const { onMove } = this.props;
          const defaultValue = evt.willInsertAfter || -1;
          if (!onMove)
            return defaultValue;
          const result = onMove(evt, originalEvt, this.sortable, $7fe8e3ea572bda7a$var$store);
          if (typeof result === "undefined")
            return false;
          return result;
        };
        return {
          ...newOptions,
          onMove: onMove1
        };
      }
      /** Prepares a method that will be used in the sortable options to call an `on[Handler]` prop & an `on[Handler]` ReactSortable method.  */
      prepareOnHandlerPropAndDOM(evtName) {
        return (evt) => {
          this.callOnHandlerProp(evt, evtName);
          this[evtName](evt);
        };
      }
      /** Prepares a method that will be used in the sortable options to call an `on[Handler]` prop */
      prepareOnHandlerProp(evtName) {
        return (evt) => {
          this.callOnHandlerProp(evt, evtName);
        };
      }
      /** Calls the `props.on[Handler]` function */
      callOnHandlerProp(evt, evtName) {
        const propEvent = this.props[evtName];
        if (propEvent)
          propEvent(evt, this.sortable, $7fe8e3ea572bda7a$var$store);
      }
      // SORTABLE DOM HANDLING
      onAdd(evt) {
        const { list, setList, clone: clone2 } = this.props;
        const otherList = [
          ...$7fe8e3ea572bda7a$var$store.dragging.props.list
        ];
        const customs = (0, $eb03e74f8f7db1f3$export$4655efe700f887a)(evt, otherList);
        (0, $eb03e74f8f7db1f3$export$77f49a256021c8de)(customs);
        const newList = (0, $eb03e74f8f7db1f3$export$eca851ee65ae17e4)(customs, list, evt, clone2).map((item) => Object.assign(item, {
          selected: false
        }));
        setList(newList, this.sortable, $7fe8e3ea572bda7a$var$store);
      }
      onRemove(evt) {
        const { list, setList } = this.props;
        const mode = (0, $eb03e74f8f7db1f3$export$1fc0f6205829e19c)(evt);
        const customs = (0, $eb03e74f8f7db1f3$export$4655efe700f887a)(evt, list);
        (0, $eb03e74f8f7db1f3$export$a6177d5829f70ebc)(customs);
        let newList = [
          ...list
        ];
        if (evt.pullMode !== "clone")
          newList = (0, $eb03e74f8f7db1f3$export$be2da95e6167b0bd)(customs, newList);
        else {
          let customClones = customs;
          switch (mode) {
            case "multidrag":
              customClones = customs.map((item, index2) => ({
                ...item,
                element: evt.clones[index2]
              }));
              break;
            case "normal":
              customClones = customs.map((item) => ({
                ...item,
                element: evt.clone
              }));
              break;
            case "swap":
            default:
              (0, $parcel$interopDefault($8zHUo$tinyinvariant))(true, `mode "${mode}" cannot clone. Please remove "props.clone" from <ReactSortable/> when using the "${mode}" plugin`);
          }
          (0, $eb03e74f8f7db1f3$export$77f49a256021c8de)(customClones);
          customs.forEach((curr) => {
            const index2 = curr.oldIndex;
            const newItem = this.props.clone(curr.item, evt);
            newList.splice(index2, 1, newItem);
          });
        }
        newList = newList.map((item) => Object.assign(item, {
          selected: false
        }));
        setList(newList, this.sortable, $7fe8e3ea572bda7a$var$store);
      }
      onUpdate(evt) {
        const { list, setList } = this.props;
        const customs = (0, $eb03e74f8f7db1f3$export$4655efe700f887a)(evt, list);
        (0, $eb03e74f8f7db1f3$export$77f49a256021c8de)(customs);
        (0, $eb03e74f8f7db1f3$export$a6177d5829f70ebc)(customs);
        const newList = (0, $eb03e74f8f7db1f3$export$c25cf8080bd305ec)(customs, list);
        return setList(newList, this.sortable, $7fe8e3ea572bda7a$var$store);
      }
      onStart() {
        $7fe8e3ea572bda7a$var$store.dragging = this;
      }
      onEnd() {
        $7fe8e3ea572bda7a$var$store.dragging = null;
      }
      onChoose(evt) {
        const { list, setList } = this.props;
        const newList = list.map((item, index2) => {
          let newItem = item;
          if (index2 === evt.oldIndex)
            newItem = Object.assign(item, {
              chosen: true
            });
          return newItem;
        });
        setList(newList, this.sortable, $7fe8e3ea572bda7a$var$store);
      }
      onUnchoose(evt) {
        const { list, setList } = this.props;
        const newList = list.map((item, index2) => {
          let newItem = item;
          if (index2 === evt.oldIndex)
            newItem = Object.assign(newItem, {
              chosen: false
            });
          return newItem;
        });
        setList(newList, this.sortable, $7fe8e3ea572bda7a$var$store);
      }
      onSpill(evt) {
        const { removeOnSpill, revertOnSpill } = this.props;
        if (removeOnSpill && !revertOnSpill)
          (0, $eb03e74f8f7db1f3$export$1d0aa160432dfea5)(evt.item);
      }
      onSelect(evt) {
        const { list, setList } = this.props;
        const newList = list.map((item) => Object.assign(item, {
          selected: false
        }));
        evt.newIndicies.forEach((curr) => {
          const index2 = curr.index;
          if (index2 === -1) {
            console.log(`"${evt.type}" had indice of "${curr.index}", which is probably -1 and doesn't usually happen here.`);
            console.log(evt);
            return;
          }
          newList[index2].selected = true;
        });
        setList(newList, this.sortable, $7fe8e3ea572bda7a$var$store);
      }
      onDeselect(evt) {
        const { list, setList } = this.props;
        const newList = list.map((item) => Object.assign(item, {
          selected: false
        }));
        evt.newIndicies.forEach((curr) => {
          const index2 = curr.index;
          if (index2 === -1)
            return;
          newList[index2].selected = true;
        });
        setList(newList, this.sortable, $7fe8e3ea572bda7a$var$store);
      }
    };
    /* eslint-disable-next-line */
    __publicField($7fe8e3ea572bda7a$export$11bbed9ee0012c13, "defaultProps", {
      clone: (item) => item
    });
    var $faefaad95e5fcca0$exports = {};
    $parcel$exportWildcard(module.exports, $faefaad95e5fcca0$exports);
  }
});

// node_modules/polotno/side-panel/side-panel.js
var import_react18 = __toESM(require_react());
var import_FaShapes = __toESM(require_FaShapes());
var import_FdPageMultiple = __toESM(require_FdPageMultiple());

// node_modules/polotno/side-panel/tab-button.js
var import_react = __toESM(require_react(), 1);
var n = styled_default("div")`
  width: 100%;
  height: 72px;
  padding-top: 15px;
  padding-left: 5px;
  padding-right: 5px;
  text-align: center;
  font-size: 12px;
  cursor: pointer;
  white-space: pre;

  .bp5-dark &:hover,
  .bp5-dark &.active {
    color: #48aff0 !important;
  }

  &:hover,
  &.active {
    background-color: rgba(19, 124, 189, 0.2);
  }

  ${mobileStyle("\n    height: 54px;\n    padding-top: 9px;\n    min-width: 72px;\n    width: min-content;\n  ")}
`;
var SectionTab = ({ children: t10, name: i, onClick: o3, active: p8, iconSize: r3 }) => import_react.default.createElement(n, { onClick: o3, className: "polotno-side-panel-tab" + (p8 ? " active" : "") }, import_react.default.createElement("div", { style: { fontSize: (r3 || 14) + "px" } }, t10), import_react.default.createElement("div", { style: { paddingTop: "5px" } }, i));

// node_modules/polotno/side-panel/text-panel.js
var import_react4 = __toESM(require_react(), 1);

// node_modules/polotno/utils/use-api.js
var import_react3 = __toESM(require_react(), 1);

// node_modules/swr/dist/infinite/index.mjs
var import_react2 = __toESM(require_react(), 1);
var import_shim = __toESM(require_shim(), 1);
var noop = () => {
};
var UNDEFINED2 = (
  /*#__NOINLINE__*/
  noop()
);
var OBJECT = Object;
var isUndefined2 = (v7) => v7 === UNDEFINED2;
var isFunction2 = (v7) => typeof v7 == "function";
var table = /* @__PURE__ */ new WeakMap();
var getTypeName = (value) => OBJECT.prototype.toString.call(value);
var isObjectTypeName = (typeName, type) => typeName === `[object ${type}]`;
var counter = 0;
var stableHash = (arg) => {
  const type = typeof arg;
  const typeName = getTypeName(arg);
  const isDate = isObjectTypeName(typeName, "Date");
  const isRegex = isObjectTypeName(typeName, "RegExp");
  const isPlainObject = isObjectTypeName(typeName, "Object");
  let result;
  let index2;
  if (OBJECT(arg) === arg && !isDate && !isRegex) {
    result = table.get(arg);
    if (result)
      return result;
    result = ++counter + "~";
    table.set(arg, result);
    if (Array.isArray(arg)) {
      result = "@";
      for (index2 = 0; index2 < arg.length; index2++) {
        result += stableHash(arg[index2]) + ",";
      }
      table.set(arg, result);
    }
    if (isPlainObject) {
      result = "#";
      const keys = OBJECT.keys(arg).sort();
      while (!isUndefined2(index2 = keys.pop())) {
        if (!isUndefined2(arg[index2])) {
          result += index2 + ":" + stableHash(arg[index2]) + ",";
        }
      }
      table.set(arg, result);
    }
  } else {
    result = isDate ? arg.toJSON() : type == "symbol" ? arg.toString() : type == "string" ? JSON.stringify(arg) : "" + arg;
  }
  return result;
};
var serialize2 = (key) => {
  if (isFunction2(key)) {
    try {
      key = key();
    } catch (err) {
      key = "";
    }
  }
  const args = key;
  key = typeof key == "string" ? key : (Array.isArray(key) ? key.length : key) ? stableHash(key) : "";
  return [
    key,
    args
  ];
};
var getFirstPageKey = (getKey2) => {
  return serialize2(getKey2 ? getKey2(0, null) : null)[0];
};
var EMPTY_PROMISE = Promise.resolve();
var infinite = (useSWRNext) => (getKey2, fn, config) => {
  const didMountRef = (0, import_react2.useRef)(false);
  const { cache: cache$1, initialSize = 1, revalidateAll = false, persistSize = false, revalidateFirstPage = true, revalidateOnMount = false, parallel = false } = config;
  const [, , , PRELOAD] = SWRGlobalState.get(cache);
  let infiniteKey;
  try {
    infiniteKey = getFirstPageKey(getKey2);
    if (infiniteKey)
      infiniteKey = INFINITE_PREFIX + infiniteKey;
  } catch (err) {
  }
  const [get, set, subscribeCache] = createCacheHelper(cache$1, infiniteKey);
  const getSnapshot = (0, import_react2.useCallback)(() => {
    const size = isUndefined(get()._l) ? initialSize : get()._l;
    return size;
  }, [
    cache$1,
    infiniteKey,
    initialSize
  ]);
  (0, import_shim.useSyncExternalStore)((0, import_react2.useCallback)(
    (callback) => {
      if (infiniteKey)
        return subscribeCache(infiniteKey, () => {
          callback();
        });
      return () => {
      };
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      cache$1,
      infiniteKey
    ]
  ), getSnapshot, getSnapshot);
  const resolvePageSize = (0, import_react2.useCallback)(() => {
    const cachedPageSize = get()._l;
    return isUndefined(cachedPageSize) ? initialSize : cachedPageSize;
  }, [
    infiniteKey,
    initialSize
  ]);
  const lastPageSizeRef = (0, import_react2.useRef)(resolvePageSize());
  useIsomorphicLayoutEffect(() => {
    if (!didMountRef.current) {
      didMountRef.current = true;
      return;
    }
    if (infiniteKey) {
      set({
        _l: persistSize ? lastPageSizeRef.current : resolvePageSize()
      });
    }
  }, [
    infiniteKey,
    cache$1
  ]);
  const shouldRevalidateOnMount = revalidateOnMount && !didMountRef.current;
  const swr = useSWRNext(infiniteKey, async (key) => {
    const forceRevalidateAll = get()._i;
    const shouldRevalidatePage = get()._r;
    set({
      _r: UNDEFINED
    });
    const data = [];
    const pageSize = resolvePageSize();
    const [getCache] = createCacheHelper(cache$1, key);
    const cacheData = getCache().data;
    const revalidators = [];
    let previousPageData = null;
    for (let i = 0; i < pageSize; ++i) {
      const [pageKey, pageArg] = serialize(getKey2(i, parallel ? null : previousPageData));
      if (!pageKey) {
        break;
      }
      const [getSWRCache, setSWRCache] = createCacheHelper(cache$1, pageKey);
      let pageData = getSWRCache().data;
      const shouldFetchPage = revalidateAll || forceRevalidateAll || isUndefined(pageData) || revalidateFirstPage && !i && !isUndefined(cacheData) || shouldRevalidateOnMount || cacheData && !isUndefined(cacheData[i]) && !config.compare(cacheData[i], pageData);
      if (fn && (typeof shouldRevalidatePage === "function" ? shouldRevalidatePage(pageData, pageArg) : shouldFetchPage)) {
        const revalidate = async () => {
          const hasPreloadedRequest = pageKey in PRELOAD;
          if (!hasPreloadedRequest) {
            pageData = await fn(pageArg);
          } else {
            const req = PRELOAD[pageKey];
            delete PRELOAD[pageKey];
            pageData = await req;
          }
          setSWRCache({
            data: pageData,
            _k: pageArg
          });
          data[i] = pageData;
        };
        if (parallel) {
          revalidators.push(revalidate);
        } else {
          await revalidate();
        }
      } else {
        data[i] = pageData;
      }
      if (!parallel) {
        previousPageData = pageData;
      }
    }
    if (parallel) {
      await Promise.all(revalidators.map((r3) => r3()));
    }
    set({
      _i: UNDEFINED
    });
    return data;
  }, config);
  const mutate = (0, import_react2.useCallback)(
    // eslint-disable-next-line func-names
    function(data, opts) {
      const options = typeof opts === "boolean" ? {
        revalidate: opts
      } : opts || {};
      const shouldRevalidate = options.revalidate !== false;
      if (!infiniteKey)
        return EMPTY_PROMISE;
      if (shouldRevalidate) {
        if (!isUndefined(data)) {
          set({
            _i: false,
            _r: options.revalidate
          });
        } else {
          set({
            _i: true,
            _r: options.revalidate
          });
        }
      }
      return arguments.length ? swr.mutate(data, {
        ...options,
        revalidate: shouldRevalidate
      }) : swr.mutate();
    },
    // swr.mutate is always the same reference
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      infiniteKey,
      cache$1
    ]
  );
  const setSize = (0, import_react2.useCallback)(
    (arg) => {
      if (!infiniteKey)
        return EMPTY_PROMISE;
      const [, changeSize] = createCacheHelper(cache$1, infiniteKey);
      let size;
      if (isFunction(arg)) {
        size = arg(resolvePageSize());
      } else if (typeof arg == "number") {
        size = arg;
      }
      if (typeof size != "number")
        return EMPTY_PROMISE;
      changeSize({
        _l: size
      });
      lastPageSizeRef.current = size;
      const data = [];
      const [getInfiniteCache] = createCacheHelper(cache$1, infiniteKey);
      let previousPageData = null;
      for (let i = 0; i < size; ++i) {
        const [pageKey] = serialize(getKey2(i, previousPageData));
        const [getCache] = createCacheHelper(cache$1, pageKey);
        const pageData = pageKey ? getCache().data : UNDEFINED;
        if (isUndefined(pageData)) {
          return mutate(getInfiniteCache().data);
        }
        data.push(pageData);
        previousPageData = pageData;
      }
      return mutate(data);
    },
    // exclude getKey from the dependencies, which isn't allowed to change during the lifecycle
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      infiniteKey,
      cache$1,
      mutate,
      resolvePageSize
    ]
  );
  return {
    size: resolvePageSize(),
    setSize,
    mutate,
    get data() {
      return swr.data;
    },
    get error() {
      return swr.error;
    },
    get isValidating() {
      return swr.isValidating;
    },
    get isLoading() {
      return swr.isLoading;
    }
  };
};
var useSWRInfinite = withMiddleware(useSWR, infinite);

// node_modules/polotno/utils/use-api.js
var fetcher = (e18) => fetch(e18).then((e19) => e19.json());
var useInfiniteAPI = ({ defaultQuery: o3 = "", timeout: i = 1e3, getAPI: n4, getSize: l2 = (e18) => e18.total_pages, fetchFunc: a2 = fetcher }) => {
  var u8;
  const s3 = (0, import_react3.useRef)(o3), c5 = (0, import_react3.useRef)(), { data: d5, error: f5, size: v7, setSize: h7, mutate: m4 } = useSWRInfinite((e18) => n4({ query: s3.current, page: e18 + 1 }), a2, { revalidateAll: false, revalidateOnFocus: false }), g8 = !d5 && !f5 || v7 > 0 && d5 && void 0 === d5[v7 - 1], p8 = 0 === (null === (u8 = null == d5 ? void 0 : d5[0]) || void 0 === u8 ? void 0 : u8.length), y3 = null == d5 ? void 0 : d5[d5.length - 1], z = p8 || y3 && l2(y3) === v7;
  return { setQuery: (0, import_react3.useCallback)((e18) => {
    s3.current = e18, clearTimeout(c5.current), c5.current = setTimeout(() => {
      m4([]);
    }, i);
  }, [i, m4]), isLoading: g8, loadMore: () => {
    z || h7(v7 + 1);
  }, isReachingEnd: z, data: null == d5 ? void 0 : d5.filter(Boolean), items: (null == d5 ? void 0 : d5.flat()) || [], hasMore: !z, reset: m4, error: f5 };
};

// node_modules/polotno/side-panel/text-panel.js
var e3 = function(e18, t10) {
  var o3 = {};
  for (var n4 in e18) {
    Object.prototype.hasOwnProperty.call(e18, n4) && t10.indexOf(n4) < 0 && (o3[n4] = e18[n4]);
  }
  if (null != e18 && "function" == typeof Object.getOwnPropertySymbols) {
    var i = 0;
    for (n4 = Object.getOwnPropertySymbols(e18); i < n4.length; i++) {
      t10.indexOf(n4[i]) < 0 && Object.prototype.propertyIsEnumerable.call(e18, n4[i]) && (o3[n4[i]] = e18[n4[i]]);
    }
  }
  return o3;
};
var h = styled_default("div")`
  height: calc(100% - 40px);
  display: flex;
  flex-direction: column;

  .bp5-dark & .polotno-text-preview-plain {
    filter: invert(1);
  }
`;
var u = styled_default("div")`
  height: 100px;
  cursor: pointer;
  box-shadow: 0 0 5px rgba(16, 22, 26, 0.3);
  border-radius: 5px;
  background-color: rgba(0, 0, 0, 0.4);
  position: relative;
  font-size: 25px;
  display: flex;
  justify-content: center;
  align-content: center;
  flex-direction: column;
  text-align: center;
  color: white;
  margin-bottom: 10px;
`;
var x = (e18) => new Promise((t10, o3) => {
  const n4 = new FileReader();
  n4.readAsDataURL(e18), n4.onload = () => t10(n4.result), n4.onerror = (e19) => o3(e19);
});
var b = observer(({ onSelect: e18, onRemove: o3, font: i }) => import_react4.default.createElement(u, { style: { fontFamily: i.fontFamily }, className: "polotno-font-item", onClick: e18 }, i.fontFamily, " text", import_react4.default.createElement(Button, { style: { position: "absolute", right: 0, bottom: 0 }, minimal: true, icon: import_react4.default.createElement(Trash, null), onClick: (e19) => {
  e19.stopPropagation(), o3();
} })));
var v = (o3) => {
  var { onSelect: i } = o3, l2 = e3(o3, ["onSelect"]);
  return import_react4.default.createElement(Button, Object.assign({}, l2, { draggable: true, className: "polotno-close-panel", onClick: () => i(), onDragStart: () => {
    registerNextDomDrop(({ x: e18, y: t10 }) => {
      i({ x: e18, y: t10 });
    });
  }, onDragEnd: (e18) => {
    registerNextDomDrop(null);
  } }));
};
var TextPanel = observer(({ store: e18 }) => {
  import_react4.default.useEffect(() => {
    e18.loadFont("Roboto");
  }, []);
  const o3 = (t10) => {
    var o4;
    const n4 = t10.width || e18.width / 2, i = ((null == t10 ? void 0 : t10.x) || e18.width / 2) - n4 / 2, l2 = ((null == t10 ? void 0 : t10.y) || e18.height / 2) - t10.fontSize / 2, a2 = (e18.width + e18.height) / 2160, r3 = null === (o4 = e18.activePage) || void 0 === o4 ? void 0 : o4.addElement(Object.assign(Object.assign({ type: "text", fontFamily: "Roboto" }, t10), { x: i, y: l2, width: n4, fontSize: t10.fontSize * a2 }));
    isMobile() || null == r3 || r3.toggleEditMode(true);
  };
  import_react4.default.useEffect(() => {
    e18.fonts.forEach((t10) => e18.loadFont(t10.fontFamily));
  }, [e18.fonts]);
  const { data: s3, error: m4 } = useSWR(textTemplateList(), fetcher), [y3, u8] = import_react4.default.useState("text");
  return import_react4.default.createElement("div", { style: { height: "100%", display: "flex", flexDirection: "column" } }, import_react4.default.createElement(Tabs, { large: true, onChange: (e19) => u8(e19) }, import_react4.default.createElement(Tab, { id: "text" }, t("sidePanel.text")), import_react4.default.createElement(Tab, { id: "font" }, t("sidePanel.myFonts"))), "text" === y3 && import_react4.default.createElement(h, null, import_react4.default.createElement(v, { style: { marginBottom: "5px", width: "100%", fontSize: "25px", fontFamily: "Roboto" }, minimal: true, onSelect: (e19) => {
    o3(Object.assign(Object.assign({}, e19), { fontSize: 76, text: t("sidePanel.headerText"), fontFamily: "Roboto" }));
  } }, t("sidePanel.createHeader")), import_react4.default.createElement(v, { style: { marginBottom: "5px", width: "100%", fontSize: "18px", fontFamily: "Roboto" }, minimal: true, onSelect: (e19) => {
    o3(Object.assign(Object.assign({}, e19), { fontSize: 44, text: t("sidePanel.subHeaderText"), fontFamily: "Roboto" }));
  } }, t("sidePanel.createSubHeader")), import_react4.default.createElement(v, { style: { marginBottom: "5px", width: "100%", fontSize: "14px", fontFamily: "Roboto" }, minimal: true, onSelect: (e19) => {
    o3(Object.assign(Object.assign({}, e19), { fontSize: 30, text: t("sidePanel.bodyText"), fontFamily: "Roboto" }));
  } }, t("sidePanel.createBody")), import_react4.default.createElement(ImagesGrid, { shadowEnabled: false, images: null == s3 ? void 0 : s3.items, getPreview: (e19) => e19.preview, getImageClassName: (e19) => e19.json.indexOf("plain") >= 0 ? "polotno-text-preview-plain" : "", isLoading: !s3, error: m4, onSelect: async (t10, o4) => {
    const n4 = await fetch(t10.json), i = await n4.json();
    if (!e18.activePage) {
      return;
    }
    const l2 = (e18.width + e18.height) / 2160, a2 = o4 ? o4.x - i.width / 2 * l2 : e18.width / 2 - i.width / 2 * l2, r3 = o4 ? o4.y - i.height / 2 * l2 : e18.height / 2 - i.height / 2 * l2;
    e18.history.transaction(() => {
      const t11 = i.pages[0].children, o5 = [];
      t11.forEach((t12) => {
        var n5;
        delete t12.id;
        const { id: i2 } = null === (n5 = e18.activePage) || void 0 === n5 ? void 0 : n5.addElement(Object.assign(Object.assign({}, t12), { fontSize: t12.fontSize * l2, x: t12.x * l2 + a2, y: t12.y * l2 + r3, width: t12.width * l2, height: t12.height * l2 }));
        o5.push(i2);
      }), e18.selectElements(o5);
    });
  } })), "font" === y3 && import_react4.default.createElement("div", { style: { display: "flex", flexDirection: "column", height: "calc(100% - 50px)" } }, import_react4.default.createElement("label", { htmlFor: "polotno-font-upload" }, import_react4.default.createElement(Button, { icon: import_react4.default.createElement(Upload, null), style: { width: "100%" }, onClick: () => {
    var e19;
    null === (e19 = document.querySelector("#polotno-font-upload")) || void 0 === e19 || e19.click();
  } }, t("sidePanel.uploadFont")), import_react4.default.createElement("input", { type: "file", accept: ".ttf, .otf, .woff, .woff2, .eot", id: "polotno-font-upload", style: { display: "none" }, onChange: async (t10) => {
    const { target: o4 } = t10;
    for (const n4 of o4.files) {
      const t11 = await x(n4), o5 = n4.name.split(".")[0].replace(/,/g, "");
      e18.addFont({ fontFamily: o5, url: t11 });
    }
    o4.value = null;
  } })), import_react4.default.createElement("div", { style: { paddingTop: "20px", overflow: "auto", height: "100%" } }, e18.fonts.map((n4, i) => import_react4.default.createElement(b, { font: n4, key: i, onSelect: () => {
    o3({ fontSize: 80, text: "Cool text", fontFamily: n4.fontFamily });
  }, onRemove: () => {
    e18.find((e19) => {
      "text" === e19.type && e19.fontFamily === n4.fontFamily && e19.set({ fontFamily: "Roboto" });
    }), e18.removeFont(n4.fontFamily);
  } })))));
});

// node_modules/polotno/side-panel/size-panel.js
var import_react5 = __toESM(require_react(), 1);
var import_AiOutlineFacebook = __toESM(require_AiOutlineFacebook(), 1);
var import_AiOutlineInstagram = __toESM(require_AiOutlineInstagram(), 1);
var import_AiOutlineYoutube = __toESM(require_AiOutlineYoutube(), 1);
var import_AiOutlineVideoCamera = __toESM(require_AiOutlineVideoCamera(), 1);
var import_ZoDocument = __toESM(require_ZoDocument(), 1);
var import_AiOutlineIdcard = __toESM(require_AiOutlineIdcard(), 1);
var import_AiOutlineLinkedin = __toESM(require_AiOutlineLinkedin(), 1);
var import_AiOutlineTwitter = __toESM(require_AiOutlineTwitter(), 1);
var e4 = function(e18, t10) {
  var n4 = {};
  for (var i in e18) {
    Object.prototype.hasOwnProperty.call(e18, i) && t10.indexOf(i) < 0 && (n4[i] = e18[i]);
  }
  if (null != e18 && "function" == typeof Object.getOwnPropertySymbols) {
    var l2 = 0;
    for (i = Object.getOwnPropertySymbols(e18); l2 < i.length; l2++) {
      t10.indexOf(i[l2]) < 0 && Object.prototype.propertyIsEnumerable.call(e18, i[l2]) && (n4[i[l2]] = e18[i[l2]]);
    }
  }
  return n4;
};
var SIZE_CATEGORIES = [{ name: "Instagram", icon: import_react5.default.createElement(import_AiOutlineInstagram.default, null), sizes: [["Post", 1080, 1080, "px", import_react5.default.createElement(import_AiOutlineInstagram.default, null)], ["Story", 1080, 1920, "px", import_react5.default.createElement(import_AiOutlineInstagram.default, null)], ["Ad", 1080, 1080, "px", import_react5.default.createElement(import_AiOutlineInstagram.default, null)]] }, { name: "Facebook", icon: import_react5.default.createElement(import_AiOutlineFacebook.default, null), sizes: [["Post (Landscape)", 1200, 630, "px", import_react5.default.createElement(import_AiOutlineFacebook.default, null)], ["Post (Square)", 1080, 1080, "px", import_react5.default.createElement(import_AiOutlineFacebook.default, null)], ["Cover", 851, 315, "px", import_react5.default.createElement(import_AiOutlineFacebook.default, null)]] }, { name: "Youtube", icon: import_react5.default.createElement(import_AiOutlineYoutube.default, null), sizes: [["Thumbnail", 1280, 720, "px", import_react5.default.createElement(import_AiOutlineYoutube.default, null)], ["Channel", 2560, 1440, "px", import_react5.default.createElement(import_AiOutlineYoutube.default, null)], ["Short", 1080, 1920, "px", import_react5.default.createElement(import_AiOutlineYoutube.default, null)]] }, { name: "LinkedIn", icon: import_react5.default.createElement(import_AiOutlineLinkedin.default, null), sizes: [["Post", 1200, 627, "px", import_react5.default.createElement(import_AiOutlineLinkedin.default, null)], ["Banner", 1584, 396, "px", import_react5.default.createElement(import_AiOutlineLinkedin.default, null)], ["Square", 1080, 1080, "px", import_react5.default.createElement(import_AiOutlineLinkedin.default, null)]] }, { name: "Twitter", icon: import_react5.default.createElement(import_AiOutlineTwitter.default, null), sizes: [["Post", 1600, 900, "px", import_react5.default.createElement(import_AiOutlineTwitter.default, null)], ["Header", 1500, 500, "px", import_react5.default.createElement(import_AiOutlineTwitter.default, null)], ["Square", 1080, 1080, "px", import_react5.default.createElement(import_AiOutlineTwitter.default, null)]] }, { name: "Video", icon: import_react5.default.createElement(import_AiOutlineVideoCamera.default, null), sizes: [["Full HD", 1920, 1080, "px", import_react5.default.createElement(import_AiOutlineVideoCamera.default, null)], ["4K UHD", 3840, 2160, "px", import_react5.default.createElement(import_AiOutlineVideoCamera.default, null)], ["Vertical HD", 1080, 1920, "px", import_react5.default.createElement(import_AiOutlineVideoCamera.default, null)], ["Square HD", 1080, 1080, "px", import_react5.default.createElement(import_AiOutlineVideoCamera.default, null)]] }, { name: "Print", icon: import_react5.default.createElement(import_ZoDocument.default, null), sizes: [["Invitation", 14, 14, "cm", import_react5.default.createElement(import_ZoDocument.default, null)], ["A4 Portrait", 21, 29.7, "cm", import_react5.default.createElement(import_ZoDocument.default, null)], ["A4 Landscape", 29.7, 21, "cm", import_react5.default.createElement(import_ZoDocument.default, null)], ["A3", 29.7, 42, "cm", import_react5.default.createElement(import_ZoDocument.default, null)], ["Letter Portrait", 8.5, 11, "in", import_react5.default.createElement(import_ZoDocument.default, null)], ["Letter Landscape", 11, 8.5, "in", import_react5.default.createElement(import_ZoDocument.default, null)], ["Business card", 3.5, 2, "in", import_react5.default.createElement(import_AiOutlineIdcard.default, null)], ["Poster", 18, 24, "in", import_react5.default.createElement(import_ZoDocument.default, null)]] }];
var O = (n4) => {
  var { value: i, onChange: a2 } = n4, r3 = e4(n4, ["value", "onChange"]);
  const [o3, c5] = import_react5.default.useState(i.toString()), m4 = import_react5.default.useRef(i);
  m4.current = o3;
  const s3 = () => {
    a2(Math.max(r3.min || 0, parseFloat(m4.current)));
  };
  return import_react5.default.useEffect(() => {
    c5(i);
  }, [i]), import_react5.default.createElement(NumericInput, Object.assign({}, r3, { value: o3.toString(), onValueChange: (e18, t10) => {
    Number.isNaN(t10) || c5(t10);
  }, onBlur: s3, allowNumericCharactersOnly: false, onKeyDown: (e18) => {
    "Enter" === e18.key && s3();
  } }));
};
var SizePanel = observer(({ store: e18 }) => {
  var n4, l2;
  const [p8, d5] = import_react5.default.useState(true), [E4, v7] = import_react5.default.useState(e18.width), [g8, x5] = import_react5.default.useState(e18.height), b5 = pxToUnit({ px: 10, unit: e18.unit, dpi: e18.dpi }), S3 = (null === (n4 = e18.activePage) || void 0 === n4 ? void 0 : n4.computedWidth) || e18.width;
  import_react5.default.useEffect(() => {
    v7(pxToUnitRounded({ px: S3, unit: e18.unit, dpi: e18.dpi }));
  }, [S3, e18.unit, e18.dpi]);
  const w3 = (null === (l2 = e18.activePage) || void 0 === l2 ? void 0 : l2.computedHeight) || e18.height;
  return import_react5.default.useEffect(() => {
    x5(pxToUnitRounded({ px: w3, unit: e18.unit, dpi: e18.dpi }));
  }, [w3, e18.unit, e18.dpi]), import_react5.default.createElement("div", { style: { height: "100%", overflow: "auto", paddingRight: "3px" } }, import_react5.default.createElement("div", { style: { paddingBottom: "15px" } }, import_react5.default.createElement(Switch, { checked: p8, onChange: (e19) => {
    d5(e19.target.checked);
  }, alignIndicator: Alignment.RIGHT, style: { marginTop: "8px", marginBottom: "25px" } }, t("sidePanel.useMagicResize"), " ", import_react5.default.createElement(Tooltip, { content: t("sidePanel.magicResizeDescription"), position: Position.BOTTOM }, import_react5.default.createElement(Icon, { icon: import_react5.default.createElement(Help, null) }))), import_react5.default.createElement("div", { style: { width: "50%", display: "inline-block" } }, t("sidePanel.width"), " (", e18.unit, ")"), import_react5.default.createElement("div", { style: { width: "50%", display: "inline-block" } }, import_react5.default.createElement(O, { fill: true, value: E4, onChange: (e19) => {
    e19 || (e19 = b5), v7(e19);
  }, min: b5, max: 1e4, selectAllOnFocus: true, stepSize: "px" === e18.unit ? 1 : 0.1 }))), import_react5.default.createElement("div", { style: { paddingBottom: "15px" } }, import_react5.default.createElement("div", { style: { width: "50%", display: "inline-block" } }, t("sidePanel.height"), " (", e18.unit, ")"), import_react5.default.createElement("div", { style: { width: "50%", display: "inline-block" } }, import_react5.default.createElement(O, { fill: true, value: g8, onChange: (e19) => {
    e19 || (e19 = b5), x5(e19);
  }, min: b5, max: 1e4, selectAllOnFocus: true, stepSize: "px" === e18.unit ? 1 : 0.1 }))), import_react5.default.createElement("div", { style: { paddingBottom: "15px" } }, import_react5.default.createElement("div", { style: { width: "50%", display: "inline-block" } }, t("sidePanel.units")), import_react5.default.createElement("div", { style: { width: "50%", display: "inline-block" } }, import_react5.default.createElement(HTMLSelect, { value: e18.unit, onChange: (t10) => {
    const n5 = t10.currentTarget.value;
    e18.setUnit({ unit: n5, dpi: e18.dpi });
  }, options: [{ label: "px", value: "px" }, { label: "cm", value: "cm" }, { label: "in", value: "in" }], fill: true }))), import_react5.default.createElement("div", { style: { paddingBottom: "15px" } }, import_react5.default.createElement(Button, { fill: true, intent: "primary", onClick: () => {
    var t10, n5, i, l3;
    const a2 = unitToPx({ unitVal: E4, dpi: e18.dpi, unit: e18.unit }), r3 = unitToPx({ unitVal: g8, dpi: e18.dpi, unit: e18.unit });
    e18.setSize(a2, r3, p8), "auto" !== (null === (t10 = e18.activePage) || void 0 === t10 ? void 0 : t10.width) && (null === (n5 = e18.activePage) || void 0 === n5 || n5.set({ width: a2 })), "auto" !== (null === (i = e18.activePage) || void 0 === i ? void 0 : i.height) && (null === (l3 = e18.activePage) || void 0 === l3 || l3.set({ height: r3 }));
  } }, t("sidePanel.resize"))), SIZE_CATEGORIES.map(({ name: n5, icon: l3, sizes: a2 }) => import_react5.default.createElement(import_react5.default.Fragment, { key: n5 }, import_react5.default.createElement("div", { style: { paddingBottom: "15px", paddingTop: "15px", fontWeight: 600, display: "flex", alignItems: "center", gap: 6 } }, l3, n5), import_react5.default.createElement("div", { style: { display: "grid", gridTemplateColumns: "repeat(3, 1fr)", gap: "8px", marginBottom: "10px" } }, a2.map(([n6, l4, a3, r3, o3]) => import_react5.default.createElement(Button, { key: n6, style: { height: "80px", display: "flex", flexDirection: "column", alignItems: "center", justifyContent: "center", textAlign: "center", fontSize: "13px" }, minimal: true, onClick: () => {
    var t10, n7, i, o4;
    const c5 = unitToPx({ unitVal: l4, dpi: e18.dpi, unit: r3 }), m4 = unitToPx({ unitVal: a3, dpi: e18.dpi, unit: r3 });
    e18.setUnit({ unit: r3, dpi: e18.dpi }), e18.setSize(c5, m4, p8), "auto" !== (null === (t10 = e18.activePage) || void 0 === t10 ? void 0 : t10.width) && (null === (n7 = e18.activePage) || void 0 === n7 || n7.set({ width: c5 })), "auto" !== (null === (i = e18.activePage) || void 0 === i ? void 0 : i.height) && (null === (o4 = e18.activePage) || void 0 === o4 || o4.set({ height: m4 }));
  } }, import_react5.default.createElement("div", { style: { fontSize: "22px", marginBottom: "4px" } }, o3), import_react5.default.createElement("div", null, n6), import_react5.default.createElement("div", { style: { fontSize: "0.7rem", opacity: 0.7 } }, l4, "×", a3, " ", r3)))))));
});

// node_modules/polotno/side-panel/photos-panel.js
var import_react6 = __toESM(require_react(), 1);
var PhotosPanel = ({ store: i }) => {
  const { setQuery: u8, loadMore: p8, isReachingEnd: c5, data: h7, isLoading: g8, error: d5 } = useInfiniteAPI({ defaultQuery: "", getAPI: ({ page: e18, query: t10 }) => unsplashList({ page: e18, query: t10 }) });
  return import_react6.default.createElement("div", { style: { height: "100%", display: "flex", flexDirection: "column" } }, import_react6.default.createElement(InputGroup, { leftIcon: import_react6.default.createElement(Search, null), placeholder: t("sidePanel.searchPlaceholder"), onChange: (e18) => {
    u8(e18.target.value);
  }, type: "search", style: { marginBottom: "20px" } }), import_react6.default.createElement("p", { style: { textAlign: "center" } }, "Photos by", " ", import_react6.default.createElement("a", { href: "https://unsplash.com/", target: "_blank" }, "Unsplash")), import_react6.default.createElement(ImagesGrid, { images: null == h7 ? void 0 : h7.map((e18) => e18.results).flat().filter(Boolean), getPreview: (e18) => e18.urls.small, onSelect: async (e18, t10, r3) => {
    fetch(unsplashDownload(e18.id)), selectImage({ src: e18.urls.regular, store: i, droppedPos: t10, targetElement: r3 });
  }, isLoading: g8, error: d5, loadMore: !c5 && p8, getCredit: (t10) => import_react6.default.createElement("span", null, "Photo by", " ", import_react6.default.createElement("a", { href: `https://unsplash.com/@${t10.user.username}?utm_source=polotno&utm_medium=referral`, target: "_blank" }, t10.user.name), " ", "on", " ", import_react6.default.createElement("a", { href: "https://unsplash.com/?utm_source=polotno&utm_medium=referral", target: "_blank" }, "Unsplash")) }));
};

// node_modules/polotno/side-panel/background-panel.js
var import_react7 = __toESM(require_react(), 1);
var import_IosColorPalette = __toESM(require_IosColorPalette(), 1);
var e6 = function(e18, t10) {
  var r3 = {};
  for (var o3 in e18) {
    Object.prototype.hasOwnProperty.call(e18, o3) && t10.indexOf(o3) < 0 && (r3[o3] = e18[o3]);
  }
  if (null != e18 && "function" == typeof Object.getOwnPropertySymbols) {
    var l2 = 0;
    for (o3 = Object.getOwnPropertySymbols(e18); l2 < o3.length; l2++) {
      t10.indexOf(o3[l2]) < 0 && Object.prototype.propertyIsEnumerable.call(e18, o3[l2]) && (r3[o3[l2]] = e18[o3[l2]]);
    }
  }
  return r3;
};
var g2 = "gradient";
var h2 = observable(["white", "rgb(82, 113, 255)", "rgb(255, 145, 77)", "rgb(126, 217, 87)", "rgb(255, 222, 89)", "rgb(203, 108, 230)", "rgb(0, 0, 0, 0)"]);
var f = styled_default("div")`
  display: inline-block;
  width: 30px;
  height: 30px;
  border-radius: 2px;
  box-shadow: 0 0 2px rgba(16, 22, 26, 0.3);
  cursor: pointer;
`;
var b3 = (r3) => {
  var { children: o3, color: l2 } = r3, a2 = e6(r3, ["children", "color"]);
  return import_react7.default.createElement(f, Object.assign({}, a2, { style: Object.assign(Object.assign({}, a2.style), { background: `url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='15' height='15' viewBox='0 0 8 8'%3E%3Cg fill='rgba(112, 112, 116, 1)' fill-opacity='1'%3E%3Cpath fill-rule='evenodd' d='M0 0h4v4H0V0zm4 4h4v4H4V4z'/%3E%3C/g%3E%3C/svg%3E")` }) }), import_react7.default.createElement("div", { style: { width: "100%", height: "100%", background: l2 } }, o3));
};
var BackgroundPanel = observer(({ store: e18 }) => {
  var r3, o3;
  const { setQuery: c5, loadMore: f5, isReachingEnd: v7, data: y3, isLoading: x5, error: E4 } = useInfiniteAPI({ defaultQuery: g2, getAPI: ({ page: e19, query: t10 }) => unsplashList({ page: e19, query: t10 }) });
  return import_react7.default.createElement("div", { style: { height: "100%", display: "flex", flexDirection: "column" } }, import_react7.default.createElement("div", { style: { display: "flex", justifyContent: "space-around", paddingBottom: "10px" } }, import_react7.default.createElement(ColorPicker, { value: (null === (r3 = e18.activePage) || void 0 === r3 ? void 0 : r3.background) || "white", onChange: (t10) => {
    var r4;
    null === (r4 = e18.activePage) || void 0 === r4 || r4.set({ background: t10 });
  }, store: e18, position: "bottom-left", gradientEnabled: true }, import_react7.default.createElement(b3, { color: null === (o3 = e18.activePage) || void 0 === o3 ? void 0 : o3.background, style: { fontSize: "30px" } }, import_react7.default.createElement(import_IosColorPalette.default, { style: { mixBlendMode: "difference" } }))), h2.map((r4) => import_react7.default.createElement(b3, { key: r4, color: r4, onClick: () => {
    var t10;
    null === (t10 = e18.activePage) || void 0 === t10 || t10.set({ background: r4 });
  } }))), import_react7.default.createElement(InputGroup, { leftIcon: import_react7.default.createElement(Search, null), placeholder: t("sidePanel.searchPlaceholder"), onChange: (e19) => {
    c5(e19.target.value || g2);
  }, type: "search", style: { marginBottom: "20px" } }), import_react7.default.createElement("p", { style: { textAlign: "center" } }, "Photos by", " ", import_react7.default.createElement("a", { href: "https://unsplash.com/", target: "_blank" }, "Unsplash")), import_react7.default.createElement(ImagesGrid, { images: null == y3 ? void 0 : y3.map((e19) => e19.results).flat().filter(Boolean), isLoading: x5, getPreview: (e19) => e19.urls.small, loadMore: !v7 && f5, onSelect: async (t10) => {
    var r4;
    fetch(unsplashDownload(t10.id)), null === (r4 = e18.activePage) || void 0 === r4 || r4.set({ background: t10.urls.regular });
  }, error: E4, getCredit: (e19) => import_react7.default.createElement("span", null, "Photo by", " ", import_react7.default.createElement("a", { href: `https://unsplash.com/@${e19.user.username}?utm_source=polotno&utm_medium=referral`, target: "_blank" }, e19.user.name), " ", "on", " ", import_react7.default.createElement("a", { href: "https://unsplash.com/?utm_source=polotno&utm_medium=referral", target: "_blank" }, "Unsplash")) }));
});

// node_modules/polotno/side-panel/elements-panel.js
var import_react8 = __toESM(require_react(), 1);
var p2 = async (e18) => {
  const t10 = await fetch(URLS.nounProjectDownload(e18)), r3 = await t10.text();
  return await svgToURL(r3);
};
var g3 = styled_default("div")`
  height: 100%;
  overflow: hidden;

  .bp5-dark & img {
    filter: invert(1);
  }
`;
var NounprojectPanel = ({ store: r3, query: i }) => {
  const { data: a2, isLoading: s3, loadMore: n4, setQuery: d5, hasMore: l2 } = useInfiniteAPI({ defaultQuery: i, getAPI: ({ page: e18, query: t10 }) => URLS.nounProjectList({ query: t10, page: e18, limit: 50 }), getSize: (e18) => e18.pagesNumber });
  return import_react8.default.useEffect(() => {
    d5(i);
  }, [i]), import_react8.default.createElement(g3, null, import_react8.default.createElement(ImagesGrid, { shadowEnabled: false, images: null == a2 ? void 0 : a2.map((e18) => e18.icons).flat(), getPreview: (e18) => e18.preview_url_84, isLoading: s3, onSelect: async (e18, i2, o3) => {
    if (o3 && "image" === o3.type && o3.contentEditable) {
      const t10 = await p2(e18.id);
      return void o3.set({ clipSrc: t10 });
    }
    if (o3 && "video" === o3.type && o3.contentEditable) {
      const t10 = await p2(e18.id);
      return void o3.set({ clipSrc: t10 });
    }
    r3.history.transaction(async () => {
      var o4;
      const a3 = ((null == i2 ? void 0 : i2.x) || r3.width / 2) - 100, s4 = ((null == i2 ? void 0 : i2.y) || r3.height / 2) - 100, n5 = null === (o4 = r3.activePage) || void 0 === o4 ? void 0 : o4.addElement({ type: "svg", width: 200, height: 200, x: a3, y: s4 }), d6 = await p2(e18.id);
      isAlive(n5) && await n5.set({ src: d6 });
    });
  }, rowsNumber: 4, loadMore: l2 && n4 }));
};
var u2 = [{ preview: svgToURL`
<svg xmlns="http://www.w3.org/2000/svg" width="32" height="16">
  <path stroke="#C0BFBF" strokeWidth="4" d="M 1 8 L 30 8"></path>
</svg>
`, data: {} }, { preview: svgToURL`
<svg xmlns="http://www.w3.org/2000/svg" width="32" height="16">
  <path stroke="#C0BFBF" strokeWidth="4" stroke-dasharray="4 2" d="M 1 8 L 30 8"></path>
</svg>
`, data: { dash: [4, 2] } }, { preview: svgToURL`
<svg xmlns="http://www.w3.org/2000/svg" width="32" height="16">
  <path stroke="#C0BFBF" strokeWidth="4" stroke-dasharray="1 1" d="M 1 8 L 30 8"></path>
</svg>
`, data: { dash: [1, 1] } }, { preview: svgToURL`
    <svg xmlns="http://www.w3.org/2000/svg" width="32" height="16">
    <path
      stroke="#C0BFBF"
      strokeWidth="2"
      d="M 25 6 L 29 8 L 25 10"
      fill="none"
      strokeLinejoin="round"
      strokeLinecap="round"
    ></path>
    <path
      stroke="#C0BFBF"
      strokeWidth="4" d="M 1 8 L 29 8"
      strokeLinejoin="round"
      strokeLinecap="round"
    ></path>
  </svg>
`, data: { endHead: "arrow" } }, { preview: svgToURL`
    <svg xmlns="http://www.w3.org/2000/svg" width="32" height="16">
    <path
      stroke="#C0BFBF"
      strokeWidth="2"
      d="M 25 6 L 29 8 L 25 10 Z"
      fill="#C0BFBF"
      strokeLinejoin="round"
      strokeLinecap="round"
    ></path>
    <path
      stroke="#C0BFBF"
      strokeWidth="4" d="M 1 8 L 29 8"
      strokeLinejoin="round"
      strokeLinecap="round"
    ></path>
    <circle cx="3" cy="8" r="2" fill="#C0BFBF"></circle>
  </svg>
`, data: { startHead: "circle", endHead: "triangle" } }, { preview: svgToURL`
    <svg xmlns="http://www.w3.org/2000/svg" width="32" height="16">
    <path
      stroke="#C0BFBF"
      strokeWidth="2"
      d="M 1 6 L 5 6 L 5 10 L 1 10 Z"
      fill="#C0BFBF"
      strokeLinejoin="round"
      strokeLinecap="round"
    ></path>
    <path
      stroke="#C0BFBF"
      strokeWidth="4" d="M 1 8 L 29 8"
      strokeLinejoin="round"
      strokeLinecap="round"
      stroke-dasharray="2 1"
    ></path>
    <path
      stroke="#C0BFBF"
      strokeWidth="4" d="M 29 6 L 29 10"
      strokeLinejoin="round"
      strokeLinecap="round"
    ></path>
  </svg>
`, data: { startHead: "square", endHead: "bar", dash: [2, 1] } }];
var m = "rgba(191, 191, 191, 100)";
var v3 = ({ store: t10 }) => import_react8.default.createElement(ImagesGrid, { shadowEnabled: false, rowsNumber: 3, images: u2, getPreview: (e18) => e18.preview, itemHeight: 50, isLoading: false, onSelect: async (e18, r3, i) => {
  const o3 = t10.activePage.computedWidth / 3;
  t10.activePage.addElement(Object.assign({ type: "line", x: r3 ? r3.x : t10.activePage.computedWidth / 2 - o3 / 2, y: r3 ? r3.y : t10.activePage.computedHeight / 2, color: m, width: o3 }, e18.data));
} });
var w = Object.keys(TYPES);
var f2 = [{ width: 300, height: 300, fill: "rgba(191, 191, 191, 100)", stroke: "#0c0c0c", strokeWidth: 0, url: "" }];
var k = [];
w.forEach((e18) => {
  f2.forEach((t10) => {
    k.push(Object.assign({ subType: e18 }, t10));
  });
}), k.forEach((e18) => {
  e18.url = svgToURL(figureToSvg(e18));
});
var y = styled_default("div")`
  height: 220px;
`;
var L = ({ store: t10 }) => {
  const r3 = Math.ceil(k.length / 4) || 1;
  return import_react8.default.createElement(y, { style: { height: 110 * r3 + "px" } }, import_react8.default.createElement(ImagesGrid, { shadowEnabled: false, rowsNumber: 4, images: k, getPreview: (e18) => e18.url, isLoading: false, itemHeight: 100, onSelect: async (e18, r4, i) => {
    var o3;
    if (i && "image" === i.type && i.contentEditable) {
      return void i.set({ clipSrc: e18.url });
    }
    if (i && "video" === i.type && i.contentEditable) {
      return void i.set({ clipSrc: e18.url });
    }
    const a2 = (t10.activePage.computedWidth + t10.activePage.computedHeight) / 2160, s3 = e18.width * a2, n4 = e18.height * a2, d5 = ((null == r4 ? void 0 : r4.x) || t10.activePage.computedWidth / 2) - s3 / 2, l2 = ((null == r4 ? void 0 : r4.y) || t10.activePage.computedHeight / 2) - n4 / 2;
    null === (o3 = t10.activePage) || void 0 === o3 || o3.addElement(Object.assign(Object.assign({ type: "figure" }, e18), { x: d5, y: l2, width: s3, height: n4, fill: m }));
  } }));
};
var E2 = styled_default("div")`
  height: 220px;
`;
var Shapes = ({ store: t10 }) => import_react8.default.createElement("div", { style: { display: "flex", flexDirection: "column", height: "100%", overflow: "auto" } }, import_react8.default.createElement("p", null, t("sidePanel.lines")), import_react8.default.createElement(E2, null, import_react8.default.createElement(v3, { store: t10 })), import_react8.default.createElement("p", null, t("sidePanel.shapes")), import_react8.default.createElement(L, { store: t10 }));
var ElementsPanel = ({ store: t10 }) => {
  const o3 = import_react8.default.useRef(), [a2, s3] = import_react8.default.useState(""), [n4, d5] = import_react8.default.useState(a2);
  import_react8.default.useEffect(() => (o3.current = setTimeout(() => {
    d5(a2);
  }, 500), () => {
    clearTimeout(o3.current);
  }), [a2]);
  const c5 = !!n4;
  return import_react8.default.createElement("div", { style: { height: "100%", display: "flex", flexDirection: "column" } }, import_react8.default.createElement(InputGroup, { leftIcon: import_react8.default.createElement(Search, null), placeholder: t("sidePanel.searchPlaceholder"), onChange: (e18) => {
    s3(e18.target.value);
  }, style: { marginBottom: "20px" }, type: "search" }), c5 && import_react8.default.createElement(NounprojectPanel, { query: n4, store: t10 }), !c5 && import_react8.default.createElement(Shapes, { store: t10 }));
};

// node_modules/polotno/side-panel/pages-panel.js
var import_react9 = __toESM(require_react(), 1);
var PagesPanel = observer(({ store: t10 }) => {
  const [a2, s3] = import_react9.default.useState({}), i = () => {
    const e18 = {};
    t10.pages.forEach((r3) => {
      const a3 = t10.toDataURL({ pageId: r3.id, pixelRatio: 0.2 });
      e18[r3.id] = a3;
    }), s3(e18);
  };
  return import_react9.default.useEffect(() => {
    const e18 = setInterval(i, 1e3);
    return () => clearInterval(e18);
  }, []), import_react9.default.createElement("div", { style: { height: "100%" } }, import_react9.default.createElement(ImagesGrid, { images: t10.pages.slice(), getPreview: (e18) => a2[e18.id] || t10.pages.indexOf(e18), onSelect: async (e18) => {
    t10.selectPage(e18.id);
  }, isLoading: false, rowsNumber: 2 }));
});

// node_modules/polotno/side-panel/templates-panel.js
var import_react10 = __toESM(require_react(), 1);
var g4 = (t10, r3) => {
  const i = import_react10.default.useRef(true);
  import_react10.default.useEffect(() => {
    i.current ? i.current = false : t10();
  }, r3);
};
var h3 = observer(({ sizeQuery: t10, query: r3, store: i }) => {
  const { setQuery: o3, loadMore: l2, hasMore: n4, data: h7, isLoading: d5, reset: u8, error: f5 } = useInfiniteAPI({ getAPI: ({ page: e18, query: r4 }) => templateList({ page: e18, query: r4, sizeQuery: t10 }), getSize: (e18) => e18.totalPages });
  return g4(() => {
    u8();
  }, [t10]), g4(() => {
    o3(r3);
  }, [r3]), import_react10.default.createElement(ImagesGrid, { images: null == h7 ? void 0 : h7.map((e18) => e18.items).flat(), getPreview: (e18) => e18.preview, isLoading: d5, onSelect: async (e18) => {
    const t11 = await fetch(e18.json), r4 = await t11.json();
    if (i.pages.length <= 1) {
      i.loadJSON(r4, true);
    } else {
      const e19 = JSON.parse(JSON.stringify(i.toJSON()));
      e19.width === r4.width && e19.height === r4.height || r4.pages.forEach((e20) => {
        e20.width = e20.width || r4.width, e20.height = e20.height || r4.height;
      }), forEveryChild({ children: r4.pages }, (e20) => {
        e20.id = nanoid(10);
      });
      const t12 = i.pages.indexOf(i.activePage);
      e19.pages.splice(t12, 1, ...r4.pages), i.loadJSON(e19, true);
    }
  }, loadMore: n4 && l2, error: f5 });
});
var TemplatesPanel = observer(({ store: t10 }) => {
  const [a2, s3] = import_react10.default.useState(true), [m4, c5] = import_react10.default.useState(""), p8 = a2 ? `${t10.width}x${t10.height}` : "all";
  return import_react10.default.createElement("div", { style: { height: "100%", display: "flex", flexDirection: "column" } }, import_react10.default.createElement(InputGroup, { leftIcon: import_react10.default.createElement(Search, null), placeholder: t("sidePanel.searchPlaceholder"), type: "search", onChange: (e18) => {
    c5(e18.target.value);
  }, style: { marginBottom: "20px" } }), import_react10.default.createElement(Switch, { checked: a2, onChange: (e18) => {
    s3(e18.target.checked);
  }, alignIndicator: Alignment.RIGHT, style: { marginTop: "8px", marginBottom: "25px" } }, t("sidePanel.searchTemplatesWithSameSize"), " "), import_react10.default.createElement(h3, { store: t10, sizeQuery: "size=" + p8, query: m4 }));
});

// node_modules/polotno/side-panel/layers-panel.js
var import_react11 = __toESM(require_react(), 1);
var import_react_sortablejs = __toESM(require_dist(), 1);
var v4 = observer(({ element: t10, store: r3 }) => {
  const o3 = r3.selectedElements.indexOf(t10) >= 0, [v7, y3] = import_react11.default.useState(false), x5 = () => y3(false), g8 = v7 ? t10.name : t10.name || removeTags(t10.text) || `#${t10.id}`;
  return import_react11.default.createElement(Card, { onMouseDown: (e18) => {
    const l2 = e18.ctrlKey || e18.metaKey || e18.shiftKey ? [...r3.selectedElementsIds] : [];
    l2.indexOf(t10.id) < 0 && l2.push(t10.id), r3.selectElements(l2);
  }, className: o3 ? "selected" : "", style: { padding: "5px", margin: "0px 1px 5px 1px", backgroundColor: o3 ? "rgb(0, 161, 255, 0.2)" : "", display: t10.selectable || "admin" === r3.role ? "auto" : "none" } }, import_react11.default.createElement("div", { style: { display: "flex", justifyContent: "space-between" } }, import_react11.default.createElement("div", { style: { lineHeight: "30px", display: "flex" } }, import_react11.default.createElement("div", { className: "drag-handle", style: { display: "flex", justifyContent: "center", alignItems: "center", cursor: "move", height: "30px" } }, import_react11.default.createElement(DragHandleVertical, null)), import_react11.default.createElement("div", { style: { padding: "0 7px", opacity: 0.5, width: "60px" } }, t("sidePanel.layerTypes." + t10.type)), import_react11.default.createElement("div", { style: { maxWidth: "142px" } }, import_react11.default.createElement(EditableText, { minWidth: 130, placeholder: t("sidePanel.namePlaceholder"), value: g8, maxLines: 1, onEdit: () => y3(true), onCancel: x5, onConfirm: x5, onChange: (e18) => {
    t10.set({ name: e18 });
  } }))), import_react11.default.createElement("div", null, import_react11.default.createElement(Button, { minimal: true, icon: (null == t10 ? void 0 : t10.visible) ? import_react11.default.createElement(EyeOpen, null) : import_react11.default.createElement(EyeOff, null), onClick: () => {
    t10.set({ visible: !t10.visible });
  } }), import_react11.default.createElement(Button, { minimal: true, icon: (null == t10 ? void 0 : t10.locked) ? import_react11.default.createElement(Lock, null) : import_react11.default.createElement(Unlock, null), onClick: () => {
    t10.set({ draggable: t10.locked, contentEditable: t10.locked, styleEditable: t10.locked, resizable: t10.locked, removable: t10.locked });
  } }), import_react11.default.createElement(Button, { icon: import_react11.default.createElement(Trash, null), minimal: true, disabled: !t10.removable, onClick: () => {
    r3.deleteElements([t10.id]);
  }, style: { marginLeft: "auto" } }))));
});
var LayersPanel = observer(({ store: t10 }) => {
  var l2;
  const n4 = (null === (l2 = t10.activePage) || void 0 === l2 ? void 0 : l2.children.map((e18) => ({ id: e18.id }))) || [];
  n4.reverse();
  const i = isMobile();
  return import_react11.default.createElement("div", { style: { height: "100%", overflow: "auto" } }, import_react11.default.createElement("div", { style: { height: "40px", paddingTop: "5px" } }, t("sidePanel.layersTip")), import_react11.default.createElement("div", null, 0 === n4.length ? import_react11.default.createElement("div", null, t("sidePanel.noLayers")) : null, import_react11.default.createElement(import_react_sortablejs.ReactSortable, { list: n4, setList: (e18) => {
    e18.forEach(({ id: l3 }, n5) => {
      var i2, a2;
      const r3 = e18.length - n5 - 1, o3 = t10.getElementById(l3);
      (null === (i2 = t10.activePage) || void 0 === i2 ? void 0 : i2.children.indexOf(o3)) !== r3 && (null === (a2 = t10.activePage) || void 0 === a2 || a2.setElementZIndex(o3.id, r3));
    });
  }, direction: "horizontal", handle: i ? ".drag-handle" : void 0 }, n4.map(({ id: l3 }) => {
    const n5 = t10.getElementById(l3);
    return import_react11.default.createElement(v4, { element: n5, store: t10, key: l3 });
  }))));
});

// node_modules/polotno/side-panel/videos-panel.js
var import_react13 = __toESM(require_react(), 1);

// node_modules/polotno/side-panel/videos-grid.js
var import_react12 = __toESM(require_react(), 1);
var a = styled_default("div")`
  height: 100%;
  overflow: auto;
`;
var l = styled_default("div")`
  width: 50%;
  float: left;
`;
var c = styled_default("div")`
  padding: 5px;
  width: 100%;
  &:hover .video-grid__item-credit {
    opacity: 1;
  }
`;
var d2 = styled_default("div")`
  position: relative;
`;
var s = styled_default("video", import_react12.default.forwardRef)`
  width: 100%;
  cursor: pointer;
  display: block;
  max-height: 300px;
  min-height: 50px;
  object-fit: cover;
  border-radius: 5px;
  box-shadow: 0 0 5px rgba(16, 22, 26, 0.3);
`;
var u3 = styled_default("div")`
  position: absolute;
  top: 0.5rem;
  right: 0.5rem;
  background-color: rgba(0, 0, 0, 0.5);
  color: white;
  padding: 2px 7px;
  text-align: center;
  display: flex;
  justify-content: center;
  align-items: center;
  border-radius: 4rem;
`;
var g5 = styled_default("span")`
  font-size: 12px;
`;
var m2 = styled_default("div", import_react12.default.forwardRef)`
  padding: 3rem;
`;
var p3 = styled_default("div")`
  position: absolute;
  opacity: 0;
  bottom: 0;
  left: 0;
  right: 0;
  padding: 3px;
  background: linear-gradient(
    to bottom,
    rgba(0, 0, 0, 0),
    rgba(0, 0, 0, 0.4),
    rgba(0, 0, 0, 0.6)
  );
  color: white;
  font-size: 10px;
  text-align: center;
`;
var VideosGrid = ({ items: n4, onSelect: c5, loadMore: d5, isLoading: s3, error: u8, getCredit: g8 }) => {
  const p8 = (0, import_react12.useRef)(null), f5 = (0, import_react12.useCallback)((e18) => {
    s3 || (p8.current && p8.current.disconnect(), p8.current = new IntersectionObserver((e19) => {
      e19[0].isIntersecting && d5();
    }), e18 && p8.current.observe(e18));
  }, [s3]);
  if (u8) {
    return import_react12.default.createElement("div", null, u8.message);
  }
  if (!n4 || 0 === n4.length) {
    return null;
  }
  const b5 = n4.filter((e18, t10) => t10 % 2 == 1), h7 = n4.filter((e18, t10) => t10 % 2 == 0);
  return import_react12.default.createElement(a, null, [b5, h7].map((t10, r3) => import_react12.default.createElement(l, { key: r3 }, t10.map((t11) => import_react12.default.createElement(v5, { key: t11.id, item: t11, onClick: () => c5(t11), onDragStart: (e18) => {
    registerNextDomDrop((e19, r4) => {
      c5(t11, e19, r4);
    });
  }, onDragEnd: () => registerNextDomDrop(null), getCredit: g8 })), import_react12.default.createElement(m2, { ref: f5 }, s3 && import_react12.default.createElement(Spinner, null)))));
};
var v5 = ({ item: t10, onClick: n4, onDragEnd: i, onDragStart: o3, getCredit: a2 }) => {
  var l2;
  const m4 = (0, import_react12.useRef)(null), v7 = (null === (l2 = t10.video_files.find((e18) => "sd" === e18.quality)) || void 0 === l2 ? void 0 : l2.link) || "";
  if (!v7) {
    return null;
  }
  const f5 = new Date(1e3 * t10.duration).toISOString();
  let b5;
  return b5 = t10.duration > 3600 ? f5.substring(11, 19) : f5.substring(14, 19), import_react12.default.createElement(c, null, import_react12.default.createElement(d2, { draggable: true, onClick: n4, onDragEnd: i, onDragStart: o3, onMouseEnter: () => {
    var e18;
    null === (e18 = m4.current.play()) || void 0 === e18 || e18.catch(() => {
    });
  }, onMouseLeave: () => {
    var e18;
    null === (e18 = m4.current.pause()) || void 0 === e18 || e18.catch(() => {
    }), m4.current.currentTime = 0;
  } }, import_react12.default.createElement(s, { poster: t10.video_pictures[0].picture, controls: false, ref: m4, muted: true, preload: "none", playsInline: true }, import_react12.default.createElement("source", { src: v7 })), import_react12.default.createElement(u3, null, import_react12.default.createElement(g5, null, b5)), a2 && import_react12.default.createElement(p3, { className: "video-grid__item-credit" }, a2(t10))));
};

// node_modules/polotno/side-panel/videos-panel.js
var VideosPanel = observer(({ store: i }) => {
  const { setQuery: p8, loadMore: m4, isReachingEnd: c5, data: d5, isLoading: u8, error: f5 } = useInfiniteAPI({ defaultQuery: "", getAPI: ({ page: e18, query: t10 }) => (({ query: e19, page: t11 }) => `https://api.polotno.com/api/pexels/videos/${e19 ? "search" : "popular"}?query=${e19}&per_page=20&page=${t11}&KEY=${getKey()}`)({ page: e18, query: t10 }), getSize: (e18) => e18.total_results / e18.per_page });
  return import_react13.default.createElement("div", { style: { height: "100%", display: "flex", flexDirection: "column" } }, import_react13.default.createElement(InputGroup, { leftIcon: import_react13.default.createElement(Search, null), placeholder: t("sidePanel.searchPlaceholder"), onChange: (e18) => {
    p8(e18.target.value);
  }, type: "search", style: { marginBottom: "20px" } }), import_react13.default.createElement("p", { style: { textAlign: "center" } }, "Videos by", " ", import_react13.default.createElement("a", { href: "https://www.pexels.com/", target: "_blank" }, "Pexels")), import_react13.default.createElement(VideosGrid, { items: null == d5 ? void 0 : d5.map((e18) => e18.videos).flat().filter(Boolean), onSelect: async (e18, t10, r3) => {
    var o3;
    const a2 = (null === (o3 = e18.video_files.find((e19) => "hd" === e19.quality)) || void 0 === o3 ? void 0 : o3.link) || e18.video_files[0].link;
    selectVideo({ src: a2, store: i, droppedPos: t10, targetElement: r3, attrs: { width: e18.width, height: e18.height } });
  }, isLoading: u8, error: f5, loadMore: !c5 && m4, getCredit: (t10) => import_react13.default.createElement("span", null, "Video by", " ", import_react13.default.createElement("a", { href: t10.user.url, target: "_blank", rel: "noreferrer" }, t10.user.name), " ", "on", " ", import_react13.default.createElement("a", { href: "https://pexels.com/?utm_source=polotno&utm_medium=referral", target: "_blank", rel: "noreferrer noopener" }, "Pexels")) }));
});

// node_modules/polotno/side-panel/image-clip-panel.js
var import_react14 = __toESM(require_react(), 1);
var c2 = Object.keys(TYPES);
var p4 = [{ width: 300, height: 300, fill: "lightgray", stroke: "#0c0c0c", strokeWidth: 0, url: "" }];
var d3 = [];
c2.forEach((e18) => {
  p4.forEach((t10) => {
    d3.push(Object.assign({ subType: e18 }, t10));
  });
}), d3.forEach((e18) => {
  e18.url = svgToURL(figureToSvg(e18));
});
var u4 = styled_default("div")`
  height: 220px;
`;
var ImageClipPanel = observer(({ store: l2 }) => {
  const o3 = Math.ceil(d3.length / 4) || 1, s3 = () => l2.selectedElements.map((e18) => e18.id).join(","), n4 = import_react14.default.useMemo(s3, []), m4 = s3();
  return import_react14.default.useEffect(() => {
    n4 !== m4 && l2.openSidePanel(l2.previousOpenedSidePanel);
  }, [n4, m4]), import_react14.default.createElement("div", { style: { height: "100%", display: "flex", flexDirection: "column", overflow: "auto" } }, import_react14.default.createElement("div", { style: { display: "flex", justifyContent: "space-between" } }, import_react14.default.createElement("h3", { style: { margin: 0, lineHeight: "30px" } }, t("sidePanel.clipImage")), import_react14.default.createElement(Button, { minimal: true, icon: import_react14.default.createElement(Cross, null), onClick: () => l2.openSidePanel(l2.previousOpenedSidePanel) })), import_react14.default.createElement(u4, { style: { height: 110 * o3 + "px" } }, import_react14.default.createElement(ImagesGrid, { shadowEnabled: false, rowsNumber: 4, images: d3, getPreview: (e18) => e18.url, isLoading: false, itemHeight: 100, onSelect: async (e18, t10, i) => {
    (i ? [i] : l2.selectedElements).forEach((t11) => {
      ("image" === t11.type || "video" === t11.type) && t11.contentEditable && t11.set({ clipSrc: e18.url });
    });
  } })));
});

// node_modules/polotno/side-panel/animations-panel.js
var import_react15 = __toESM(require_react(), 1);
var e14 = function(e18, t10) {
  var n4 = {};
  for (var l2 in e18) {
    Object.prototype.hasOwnProperty.call(e18, l2) && t10.indexOf(l2) < 0 && (n4[l2] = e18[l2]);
  }
  if (null != e18 && "function" == typeof Object.getOwnPropertySymbols) {
    var i = 0;
    for (l2 = Object.getOwnPropertySymbols(e18); i < l2.length; i++) {
      t10.indexOf(l2[i]) < 0 && Object.prototype.propertyIsEnumerable.call(e18, l2[i]) && (n4[l2[i]] = e18[l2[i]]);
    }
  }
  return n4;
};
var c3 = styled_default("div")`
  padding: 10px;
  background-color: rgba(0, 0, 0, 0.05);

  .bp5-dark & {
    background-color: rgba(255, 255, 255, 0.05);
  }
`;
var NumberInput = (n4) => {
  var { value: i, onValueChange: a2 } = n4, o3 = e14(n4, ["value", "onValueChange"]);
  const [r3, m4] = import_react15.default.useState(i.toString());
  return import_react15.default.useEffect(() => {
    m4(i.toString());
  }, [i]), import_react15.default.createElement(NumericInput, Object.assign({ value: r3, onValueChange: (e18, t10) => {
    m4(t10), Number.isNaN(e18) || a2(e18);
  } }, o3));
};
var C = () => import_react15.default.createElement("svg", { width: "28", height: "28", viewBox: "0 0 28 28", fill: "none", xmlns: "http://www.w3.org/2000/svg", style: { margin: 0 } }, import_react15.default.createElement("path", { d: "M9.88114 6.74408C9.79978 6.66282 9.73524 6.56631 9.69121 6.46009C9.64718 6.35387 9.62451 6.24001 9.62451 6.12502C9.62451 6.01003 9.64718 5.89617 9.69121 5.78994C9.73524 5.68372 9.79978 5.58722 9.88114 5.50595L13.3811 2.00595C13.4624 1.9246 13.5589 1.86006 13.6651 1.81603C13.7714 1.77199 13.8852 1.74933 14.0002 1.74933C14.1152 1.74933 14.229 1.77199 14.3353 1.81603C14.4415 1.86006 14.538 1.9246 14.6193 2.00595L18.1193 5.50595C18.2834 5.67014 18.3757 5.89282 18.3757 6.12502C18.3757 6.35721 18.2834 6.57989 18.1193 6.74408C17.9551 6.90827 17.7324 7.0005 17.5002 7.0005C17.268 7.0005 17.0453 6.90827 16.8811 6.74408L14.8752 4.73705V10.5C14.8752 10.7321 14.783 10.9546 14.6189 11.1187C14.4548 11.2828 14.2323 11.375 14.0002 11.375C13.7681 11.375 13.5456 11.2828 13.3815 11.1187C13.2174 10.9546 13.1252 10.7321 13.1252 10.5V4.73705L11.1193 6.74408C11.038 6.82543 10.9415 6.88997 10.8353 6.93401C10.729 6.97804 10.6152 7.00071 10.5002 7.00071C10.3852 7.00071 10.2714 6.97804 10.1651 6.93401C10.0589 6.88997 9.9624 6.82543 9.88114 6.74408ZM16.8811 21.256L14.8752 23.263V17.5C14.8752 17.268 14.783 17.0454 14.6189 16.8813C14.4548 16.7172 14.2323 16.625 14.0002 16.625C13.7681 16.625 13.5456 16.7172 13.3815 16.8813C13.2174 17.0454 13.1252 17.268 13.1252 17.5V23.263L11.1193 21.256C10.9551 21.0918 10.7324 20.9995 10.5002 20.9995C10.268 20.9995 10.0453 21.0918 9.88114 21.256C9.71695 21.4201 9.62471 21.6428 9.62471 21.875C9.62471 22.1072 9.71695 22.3299 9.88114 22.4941L13.3811 25.9941C13.4624 26.0754 13.5589 26.14 13.6651 26.184C13.7714 26.228 13.8852 26.2507 14.0002 26.2507C14.1152 26.2507 14.229 26.228 14.3353 26.184C14.4415 26.14 14.538 26.0754 14.6193 25.9941L18.1193 22.4941C18.2834 22.3299 18.3757 22.1072 18.3757 21.875C18.3757 21.6428 18.2834 21.4201 18.1193 21.256C17.9551 21.0918 17.7324 20.9995 17.5002 20.9995C17.268 20.9995 17.0453 21.0918 16.8811 21.256ZM25.9943 13.381L22.4943 9.88095C22.3301 9.71677 22.1074 9.62453 21.8752 9.62453C21.643 9.62453 21.4203 9.71677 21.2561 9.88095C21.092 10.0451 20.9997 10.2678 20.9997 10.5C20.9997 10.7322 21.092 10.9549 21.2561 11.1191L23.2632 13.125H17.5002C17.2681 13.125 17.0456 13.2172 16.8815 13.3813C16.7174 13.5454 16.6252 13.768 16.6252 14C16.6252 14.2321 16.7174 14.4546 16.8815 14.6187C17.0456 14.7828 17.2681 14.875 17.5002 14.875H23.2632L21.2561 16.881C21.092 17.0451 20.9997 17.2678 20.9997 17.5C20.9997 17.7322 21.092 17.9549 21.2561 18.1191C21.4203 18.2833 21.643 18.3755 21.8752 18.3755C22.1074 18.3755 22.3301 18.2833 22.4943 18.1191L25.9943 14.6191C26.0756 14.5378 26.1402 14.4413 26.1842 14.3351C26.2282 14.2289 26.2509 14.115 26.2509 14C26.2509 13.885 26.2282 13.7712 26.1842 13.6649C26.1402 13.5587 26.0756 13.4622 25.9943 13.381ZM4.73723 14.875H10.5002C10.7323 14.875 10.9548 14.7828 11.1189 14.6187C11.283 14.4546 11.3752 14.2321 11.3752 14C11.3752 13.768 11.283 13.5454 11.1189 13.3813C10.9548 13.2172 10.7323 13.125 10.5002 13.125H4.73723L6.74426 11.1191C6.90845 10.9549 7.00069 10.7322 7.00069 10.5C7.00069 10.2678 6.90845 10.0451 6.74426 9.88095C6.58008 9.71677 6.35739 9.62453 6.1252 9.62453C5.89301 9.62453 5.67032 9.71677 5.50614 9.88095L2.00614 13.381C1.92478 13.4622 1.86024 13.5587 1.81621 13.6649C1.77218 13.7712 1.74951 13.885 1.74951 14C1.74951 14.115 1.77218 14.2289 1.81621 14.3351C1.86024 14.4413 1.92478 14.5378 2.00614 14.6191L5.50614 18.1191C5.67032 18.2833 5.89301 18.3755 6.1252 18.3755C6.35739 18.3755 6.58008 18.2833 6.74426 18.1191C6.90845 17.9549 7.00069 17.7322 7.00069 17.5C7.00069 17.2678 6.90845 17.0451 6.74426 16.881L4.73723 14.875Z", fill: "currentColor" }));
var p5 = () => import_react15.default.createElement("svg", { width: "28", height: "28", viewBox: "0 0 28 28", fill: "none", xmlns: "http://www.w3.org/2000/svg", style: { margin: 0 } }, import_react15.default.createElement("circle", { cx: "7", cy: "14", r: "5", fill: "currentColor", fillOpacity: "0.2", stroke: "currentColor", strokeWidth: "2", strokeOpacity: "0.3" }), import_react15.default.createElement("circle", { cx: "14", cy: "14", r: "5", fill: "currentColor", fillOpacity: "0.5", stroke: "currentColor", strokeWidth: "2", strokeOpacity: "0.6" }), import_react15.default.createElement("circle", { cx: "21", cy: "14", r: "5", fill: "currentColor", fillOpacity: "0.9", stroke: "currentColor", strokeWidth: "2", strokeOpacity: "1" }));
var u5 = () => import_react15.default.createElement("svg", { width: "28", height: "28", viewBox: "0 0 28 28", fill: "none", xmlns: "http://www.w3.org/2000/svg", style: { margin: 0 } }, import_react15.default.createElement("path", { d: "M15.75 11.375V7C15.75 6.76793 15.8422 6.54537 16.0063 6.38128C16.1704 6.21719 16.3929 6.125 16.625 6.125C16.8571 6.125 17.0796 6.21719 17.2437 6.38128C17.4078 6.54537 17.5 6.76793 17.5 7V9.26297L22.1309 4.63094C22.2951 4.46675 22.5178 4.37451 22.75 4.37451C22.9822 4.37451 23.2049 4.46675 23.3691 4.63094C23.5332 4.79512 23.6255 5.0178 23.6255 5.25C23.6255 5.48219 23.5332 5.70488 23.3691 5.86906L18.737 10.5H21C21.2321 10.5 21.4546 10.5922 21.6187 10.7563C21.7828 10.9204 21.875 11.1429 21.875 11.375C21.875 11.6071 21.7828 11.8296 21.6187 11.9937C21.4546 12.1578 21.2321 12.25 21 12.25H16.625C16.3929 12.25 16.1704 12.1578 16.0063 11.9937C15.8422 11.8296 15.75 11.6071 15.75 11.375ZM11.375 15.75H7C6.76793 15.75 6.54537 15.8422 6.38128 16.0063C6.21719 16.1704 6.125 16.3929 6.125 16.625C6.125 16.8571 6.21719 17.0796 6.38128 17.2437C6.54537 17.4078 6.76793 17.5 7 17.5H9.26297L4.63094 22.1309C4.46675 22.2951 4.37451 22.5178 4.37451 22.75C4.37451 22.9822 4.46675 23.2049 4.63094 23.3691C4.79512 23.5332 5.0178 23.6255 5.25 23.6255C5.48219 23.6255 5.70488 23.5332 5.86906 23.3691L10.5 18.737V21C10.5 21.2321 10.5922 21.4546 10.7563 21.6187C10.9204 21.7828 11.1429 21.875 11.375 21.875C11.6071 21.875 11.8296 21.7828 11.9937 21.6187C12.1578 21.4546 12.25 21.2321 12.25 21V16.625C12.25 16.3929 12.1578 16.1704 11.9937 16.0063C11.8296 15.8422 11.6071 15.75 11.375 15.75ZM18.737 17.5H21C21.2321 17.5 21.4546 17.4078 21.6187 17.2437C21.7828 17.0796 21.875 16.8571 21.875 16.625C21.875 16.3929 21.7828 16.1704 21.6187 16.0063C21.4546 15.8422 21.2321 15.75 21 15.75H16.625C16.3929 15.75 16.1704 15.8422 16.0063 16.0063C15.8422 16.1704 15.75 16.3929 15.75 16.625V21C15.75 21.2321 15.8422 21.4546 16.0063 21.6187C16.1704 21.7828 16.3929 21.875 16.625 21.875C16.8571 21.875 17.0796 21.7828 17.2437 21.6187C17.4078 21.4546 17.5 21.2321 17.5 21V18.737L22.1309 23.3691C22.2122 23.4504 22.3087 23.5148 22.415 23.5588C22.5212 23.6028 22.635 23.6255 22.75 23.6255C22.865 23.6255 22.9788 23.6028 23.085 23.5588C23.1913 23.5148 23.2878 23.4504 23.3691 23.3691C23.4504 23.2878 23.5148 23.1913 23.5588 23.085C23.6028 22.9788 23.6255 22.865 23.6255 22.75C23.6255 22.635 23.6028 22.5212 23.5588 22.415C23.5148 22.3087 23.4504 22.2122 23.3691 22.1309L18.737 17.5ZM11.375 6.125C11.1429 6.125 10.9204 6.21719 10.7563 6.38128C10.5922 6.54537 10.5 6.76793 10.5 7V9.26297L5.86906 4.63094C5.70488 4.46675 5.48219 4.37451 5.25 4.37451C5.0178 4.37451 4.79512 4.46675 4.63094 4.63094C4.46675 4.79512 4.37451 5.0178 4.37451 5.25C4.37451 5.48219 4.46675 5.70488 4.63094 5.86906L9.26297 10.5H7C6.76793 10.5 6.54537 10.5922 6.38128 10.7563C6.21719 10.9204 6.125 11.1429 6.125 11.375C6.125 11.6071 6.21719 11.8296 6.38128 11.9937C6.54537 12.1578 6.76793 12.25 7 12.25H11.375C11.6071 12.25 11.8296 12.1578 11.9937 11.9937C12.1578 11.8296 12.25 11.6071 12.25 11.375V7C12.25 6.76793 12.1578 6.54537 11.9937 6.38128C11.8296 6.21719 11.6071 6.125 11.375 6.125Z", fill: "currentColor" }));
var g6 = () => import_react15.default.createElement("svg", { width: "28", height: "28", viewBox: "0 0 28 28", xmlns: "http://www.w3.org/2000/svg", style: { margin: 0 } }, import_react15.default.createElement("path", { d: "M9.625 11.375H4.375C4.14294 11.375 3.92038 11.2828 3.75628 11.1187C3.59219 10.9546 3.5 10.7321 3.5 10.5V5.25001C3.5 5.01794 3.59219 4.79538 3.75628 4.63129C3.92038 4.46719 4.14294 4.37501 4.375 4.37501C4.60706 4.37501 4.82962 4.46719 4.99372 4.63129C5.15781 4.79538 5.25 5.01794 5.25 5.25001V8.38797L6.85016 6.78782C8.80164 4.82651 11.452 3.72026 14.2188 3.71219H14.2767C17.0199 3.70513 19.6555 4.77908 21.6125 6.70141C21.7723 6.86488 21.8618 7.0844 21.8618 7.313C21.8618 7.5416 21.7723 7.76112 21.6126 7.92461C21.4528 8.0881 21.2354 8.18257 21.0068 8.18781C20.7783 8.19306 20.5568 8.10865 20.3897 7.95266C18.7584 6.3515 16.5625 5.45684 14.2767 5.46219H14.2275C11.9221 5.46929 9.71368 6.39096 8.08719 8.02485L6.48703 9.62501H9.625C9.85706 9.62501 10.0796 9.71719 10.2437 9.88129C10.4078 10.0454 10.5 10.2679 10.5 10.5C10.5 10.7321 10.4078 10.9546 10.2437 11.1187C10.0796 11.2828 9.85706 11.375 9.625 11.375ZM23.625 16.625H18.375C18.1429 16.625 17.9204 16.7172 17.7563 16.8813C17.5922 17.0454 17.5 17.2679 17.5 17.5C17.5 17.7321 17.5922 17.9546 17.7563 18.1187C17.9204 18.2828 18.1429 18.375 18.375 18.375H21.513L19.9128 19.9752C18.2866 21.6088 16.0786 22.5304 13.7736 22.5378H13.7244C11.4386 22.5432 9.24264 21.6485 7.61141 20.0473C7.52991 19.964 7.43257 19.8977 7.32511 19.8525C7.21764 19.8073 7.10223 19.784 6.98564 19.784C6.86904 19.784 6.75363 19.8073 6.64617 19.8525C6.53872 19.8978 6.44138 19.964 6.35989 20.0474C6.2784 20.1308 6.2144 20.2296 6.17164 20.3381C6.12889 20.4466 6.10824 20.5625 6.11091 20.679C6.11359 20.7956 6.13953 20.9105 6.18721 21.0169C6.2349 21.1232 6.30337 21.219 6.38859 21.2986C8.3456 23.2209 10.9812 24.2949 13.7244 24.2878H13.7812C16.5476 24.2795 19.1975 23.1732 21.1488 21.2122L22.75 19.612V22.75C22.75 22.9821 22.8422 23.2046 23.0063 23.3687C23.1704 23.5328 23.3929 23.625 23.625 23.625C23.8571 23.625 24.0796 23.5328 24.2437 23.3687C24.4078 23.2046 24.5 22.9821 24.5 22.75V17.5C24.5 17.2679 24.4078 17.0454 24.2437 16.8813C24.0796 16.7172 23.8571 16.625 23.625 16.625Z", fill: "currentColor" }));
var v6 = () => import_react15.default.createElement("svg", { width: "28", height: "28", viewBox: "0 0 28 28", xmlns: "http://www.w3.org/2000/svg", style: { margin: 0 } }, import_react15.default.createElement("path", { d: "M24.9374 19.1406C24.8375 19.1976 24.7273 19.2343 24.6132 19.2487C24.499 19.263 24.3831 19.2547 24.2722 19.2243C24.1613 19.1938 24.0574 19.1417 23.9666 19.0711C23.8758 19.0004 23.7999 18.9126 23.7431 18.8125L21.6649 15.1813C20.4568 15.9982 19.124 16.6136 17.7187 17.0034L18.3607 20.8556C18.3797 20.969 18.3761 21.0851 18.3502 21.1971C18.3242 21.3091 18.2765 21.4149 18.2096 21.5085C18.1428 21.602 18.0582 21.6815 17.9606 21.7423C17.8631 21.8031 17.7545 21.8441 17.641 21.863C17.5944 21.8706 17.5472 21.8746 17.4999 21.875C17.2929 21.8747 17.0928 21.801 16.935 21.667C16.7772 21.5331 16.672 21.3475 16.6381 21.1433L16.007 17.3611C14.6761 17.5463 13.326 17.5463 11.9951 17.3611L11.364 21.1433C11.33 21.3479 11.2245 21.5337 11.0663 21.6677C10.908 21.8018 10.7073 21.8752 10.4999 21.875C10.4516 21.8748 10.4033 21.8708 10.3556 21.863C10.2421 21.8441 10.1335 21.8031 10.036 21.7423C9.93842 21.6815 9.8538 21.602 9.78696 21.5085C9.72012 21.4149 9.67238 21.3091 9.64645 21.1971C9.62053 21.0851 9.61694 20.969 9.63588 20.8556L10.2812 17.0034C8.87641 16.6123 7.54441 15.9958 6.33713 15.178L4.26557 18.8125C4.14954 19.0147 3.95794 19.1625 3.73292 19.2234C3.50791 19.2843 3.26791 19.2534 3.06573 19.1374C2.86354 19.0213 2.71573 18.8297 2.65481 18.6047C2.59389 18.3797 2.62485 18.1397 2.74088 17.9375L4.92838 14.1094C4.16002 13.4456 3.45348 12.7134 2.81744 11.9219C2.73812 11.8333 2.67768 11.7295 2.63981 11.6168C2.60194 11.5041 2.58744 11.3849 2.59718 11.2664C2.60693 11.1479 2.64071 11.0327 2.69649 10.9277C2.75226 10.8227 2.82884 10.7301 2.92156 10.6557C3.01428 10.5813 3.1212 10.5266 3.23578 10.4948C3.35036 10.4631 3.4702 10.4551 3.58799 10.4712C3.70578 10.4873 3.81905 10.5273 3.92088 10.5887C4.02271 10.65 4.11096 10.7315 4.18026 10.8281C5.99588 13.0747 9.17213 15.75 13.9999 15.75C18.8278 15.75 22.004 13.0714 23.8196 10.8281C23.8881 10.7295 23.9762 10.6461 24.0783 10.583C24.1805 10.5199 24.2945 10.4785 24.4133 10.4614C24.5321 10.4442 24.6532 10.4517 24.769 10.4834C24.8848 10.5151 24.9928 10.5702 25.0864 10.6454C25.18 10.7207 25.2571 10.8143 25.3129 10.9206C25.3687 11.0269 25.402 11.1435 25.4108 11.2633C25.4196 11.383 25.4037 11.5032 25.364 11.6166C25.3244 11.7299 25.2618 11.8338 25.1803 11.9219C24.5442 12.7134 23.8377 13.4456 23.0693 14.1094L25.2568 17.9375C25.3155 18.0373 25.3539 18.1477 25.3696 18.2625C25.3853 18.3772 25.3781 18.4939 25.3484 18.6058C25.3187 18.7177 25.2671 18.8226 25.1965 18.9144C25.126 19.0062 25.0379 19.0831 24.9374 19.1406Z", fill: "currentColor" }));
var x3 = () => import_react15.default.createElement("svg", { width: "28", height: "28", viewBox: "0 0 28 28", xmlns: "http://www.w3.org/2000/svg", style: { margin: 0 } }, import_react15.default.createElement("path", { d: "M14 3.5C18.6944 3.5 22.5 7.30558 22.5 12C22.5 16.6944 18.6944 20.5 14 20.5C9.30558 20.5 5.5 16.6944 5.5 12C5.5 7.30558 9.30558 3.5 14 3.5ZM14 5.25C10.2721 5.25 7.25 8.27208 7.25 12C7.25 15.7279 10.2721 18.75 14 18.75C17.7279 18.75 20.75 15.7279 20.75 12C20.75 8.27208 17.7279 5.25 14 5.25ZM14 7C16.7614 7 19 9.23858 19 12C19 14.7614 16.7614 17 14 17C11.2386 17 9 14.7614 9 12C9 9.23858 11.2386 7 14 7ZM14 8.75C12.2051 8.75 10.75 10.2051 10.75 12C10.75 13.7949 12.2051 15.25 14 15.25C15.7949 15.25 17.25 13.7949 17.25 12C17.25 10.2051 15.7949 8.75 14 8.75ZM14 10.5C14.8284 10.5 15.5 11.1716 15.5 12C15.5 12.8284 14.8284 13.5 14 13.5C13.1716 13.5 12.5 12.8284 12.5 12C12.5 11.1716 13.1716 10.5 14 10.5Z", fill: "currentColor" }));
var y2 = observer(({ element: e18, store: l2, enabled: i }) => {
  const a2 = e18.animations.find((e19) => "enter" === e19.type), o3 = e18.animations.find((e19) => "exit" === e19.type);
  return i ? import_react15.default.createElement("div", null, import_react15.default.createElement("div", { style: { padding: "10px 0px" } }, "Animate"), import_react15.default.createElement("div", { style: { display: "flex", gap: 10 } }, import_react15.default.createElement(Button, { fill: true, active: (null == a2 ? void 0 : a2.enabled) && !(null == o3 ? void 0 : o3.enabled), onClick: () => {
    l2.history.transaction(() => {
      e18.setAnimation("enter", { enabled: true }), e18.setAnimation("exit", { enabled: false });
    });
  } }, "Enter"), import_react15.default.createElement(Button, { fill: true, active: (null == a2 ? void 0 : a2.enabled) && (null == o3 ? void 0 : o3.enabled), onClick: () => {
    l2.history.transaction(() => {
      e18.setAnimation("enter", { enabled: true }), e18.setAnimation("exit", { enabled: true });
    });
  } }, "Both"), import_react15.default.createElement(Button, { fill: true, active: (null == o3 ? void 0 : o3.enabled) && !(null == a2 ? void 0 : a2.enabled), onClick: () => {
    l2.history.transaction(() => {
      e18.setAnimation("enter", { enabled: false }), e18.setAnimation("exit", { enabled: true });
    });
  } }, "Exit"))) : null;
});
var f3 = (e18, { handleClick: n4, handleFocus: l2, modifiers: a2, query: o3 }) => a2.matchesPredicate ? import_react15.default.createElement(MenuItem, { active: a2.active, disabled: a2.disabled, key: e18, onClick: n4, icon: "arrow-" + e18, onFocus: l2, roleStructure: "listoption", text: e18, shouldDismissPopover: false }) : null;
var E3 = ["right", "left", "up", "down", "bottom-right", "bottom-left", "top-right", "top-left"];
var b4 = observer(({ value: e18, onChange: l2 }) => import_react15.default.createElement("div", { style: { paddingTop: "10px" } }, import_react15.default.createElement("div", { style: { paddingBottom: "10px" } }, "Direction"), import_react15.default.createElement(Select, { items: E3, itemRenderer: f3, filterable: false, activeItem: e18, onItemSelect: (e19) => {
  l2(e19);
} }, import_react15.default.createElement(Button, { text: e18, icon: "arrow-" + e18, fill: true }))));
var h4 = observer(({ value: e18, onChange: l2 }) => import_react15.default.createElement("div", { style: { paddingTop: "10px" } }, import_react15.default.createElement("div", { style: { paddingBottom: "10px" } }, "Direction"), import_react15.default.createElement(Select, { items: ["in", "out"], itemRenderer: (e19, { handleClick: n4, handleFocus: l3, modifiers: a2, query: o3 }) => a2.matchesPredicate ? import_react15.default.createElement(MenuItem, { active: a2.active, disabled: a2.disabled, key: e19, onClick: n4, onFocus: l3, roleStructure: "listoption", text: "out" === e19 ? "Zoom Out" : "Zoom In", shouldDismissPopover: false }) : null, filterable: false, activeItem: e18, onItemSelect: (e19) => {
  l2(e19);
} }, import_react15.default.createElement(Button, { text: "out" === e18 ? "Zoom Out" : "Zoom In", fill: true }))));
var w2 = observer(({ element: e18, store: n4 }) => {
  const l2 = e18.animations.find((e19) => "enter" === e19.type);
  if (!l2) {
    return null;
  }
  const i = e18.page.duration;
  return import_react15.default.createElement("div", { style: { padding: "10px" } }, import_react15.default.createElement("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between", paddingTop: "5px", paddingBottom: "5px" } }, import_react15.default.createElement("div", null, "Delay"), import_react15.default.createElement("div", null, import_react15.default.createElement(NumberInput, { value: parseFloat((l2.delay / 1e3).toFixed(2)), onValueChange: (t10) => {
    e18.setAnimation("enter", { delay: 1e3 * t10 });
  }, style: { width: "50px" }, minorStepSize: 0.01, stepSize: 0.01, min: 0, max: i / 1e3, buttonPosition: "none" }))), import_react15.default.createElement(Slider, { min: 0, max: i, value: l2.delay, showTrackFill: false, labelRenderer: false, onChange: (t10) => {
    e18.setAnimation("enter", { delay: t10 });
  } }));
});
var k2 = observer(({ element: e18, store: n4 }) => {
  const l2 = e18.animations.find((e19) => "loop" === e19.type && e19.enabled);
  if (!l2) {
    return null;
  }
  const i = 500 / l2.duration;
  return import_react15.default.createElement("div", { style: { padding: "10px" } }, import_react15.default.createElement("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between", paddingTop: "5px", paddingBottom: "5px" } }, import_react15.default.createElement("div", null, "Speed"), import_react15.default.createElement("div", null, import_react15.default.createElement(NumberInput, { value: i, onValueChange: (t10) => {
    const n5 = Math.min(Math.max(0.1, t10), 3);
    e18.setAnimation("loop", { duration: 500 / n5 });
  }, style: { width: "50px" }, minorStepSize: 0.01, stepSize: 0.01, min: 0.1, max: 3, buttonPosition: "none" }))), import_react15.default.createElement(Slider, { min: 0.1, max: 3, stepSize: 0.01, value: i, showTrackFill: false, labelRenderer: false, onChange: (t10) => {
    e18.setAnimation("loop", { duration: 500 / t10 });
  }, onRelease: () => {
    const t10 = n4.activePage;
    n4.play({ animatedElementsIds: [e18.id], currentTime: e18.page.startTime }), setTimeout(() => {
      n4.stop(), n4.selectPage(null == t10 ? void 0 : t10.id);
    }, 1e3);
  } }));
});
var L2 = observer(({ element: e18, store: n4 }) => {
  const l2 = e18.animations.find((e19) => "enter" === e19.type);
  if (!l2) {
    return null;
  }
  const i = e18.page.duration;
  return import_react15.default.createElement("div", { style: { padding: "10px" } }, import_react15.default.createElement("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between", paddingTop: "5px", paddingBottom: "5px" } }, import_react15.default.createElement("div", null, "Duration"), import_react15.default.createElement("div", null, import_react15.default.createElement(NumberInput, { value: parseFloat((l2.duration / 1e3).toFixed(2)), onValueChange: (t10) => {
    e18.setAnimation("enter", { duration: 1e3 * t10 }), e18.setAnimation("exit", { duration: 1e3 * t10 });
  }, style: { width: "50px" }, minorStepSize: 0.01, stepSize: 0.01, min: 0, max: i / 1e3, buttonPosition: "none" }))), import_react15.default.createElement(Slider, { min: 0, max: i, value: l2.duration, showTrackFill: false, labelRenderer: false, onChange: (t10) => {
    e18.setAnimation("enter", { duration: t10 }), e18.setAnimation("exit", { duration: t10 });
  } }));
});
var T = observer(({ element: e18, store: n4, animationName: l2 }) => {
  var i, o3;
  const r3 = e18.animations.find((e19) => e19.name === l2 && e19.enabled);
  if (!r3) {
    return null;
  }
  const m4 = null !== (o3 = null === (i = r3.data) || void 0 === i ? void 0 : i.strength) && void 0 !== o3 ? o3 : 1;
  let d5 = 2;
  "bounce" === l2 || "zoom" === l2 ? d5 = 2 : "move" === l2 && (d5 = 3);
  const c5 = (t10) => {
    n4.history.transaction(() => {
      e18.animations.forEach((n5) => {
        if (n5.name === l2) {
          const l3 = n5.data || {};
          e18.setAnimation(n5.type, { data: Object.assign(Object.assign({}, l3), { strength: t10 }) });
        }
      });
    });
    const i2 = n4.activePage;
    (() => {
      let t11;
      return (...l3) => {
        t11 && clearTimeout(t11), t11 = setTimeout(() => {
          (() => {
            n4.isPlaying || (n4.play({ animatedElementsIds: [e18.id], currentTime: e18.page.startTime }), setTimeout(() => {
              n4.stop(), i2 && n4.selectPage(i2.id);
            }, 1e3));
          })(...l3);
        }, 300);
      };
    })()();
  }, C2 = Math.max(3, m4);
  return import_react15.default.createElement("div", { style: { padding: "10px" } }, import_react15.default.createElement("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between", paddingTop: "5px", paddingBottom: "5px" } }, import_react15.default.createElement("div", null, t("toolbar.strength")), import_react15.default.createElement("div", null, import_react15.default.createElement(NumberInput, { value: parseFloat(m4.toFixed(2)), onValueChange: (e19) => {
    c5(Math.max(0.1, e19));
  }, style: { width: "50px" }, minorStepSize: 0.05, stepSize: 0.1, min: 0.1, buttonPosition: "none" }))), import_react15.default.createElement(Slider, { min: 0.1, max: C2, stepSize: 0.05, value: m4, showTrackFill: false, labelRenderer: false, onChange: (e19) => {
    c5(e19);
  } }));
});
var S2 = observer(({ element: e18, store: n4 }) => {
  const l2 = e18.animations.find((e19) => "exit" === e19.type);
  if (!l2) {
    return null;
  }
  const i = e18.page.duration;
  return import_react15.default.createElement("div", { style: { padding: "10px" } }, import_react15.default.createElement("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between", paddingTop: "5px", paddingBottom: "5px" } }, import_react15.default.createElement("div", null, "End Delay"), import_react15.default.createElement("div", null, import_react15.default.createElement(NumberInput, { value: parseFloat((l2.delay / 1e3).toFixed(2)), onValueChange: (t10) => {
    e18.setAnimation("exit", { delay: 1e3 * t10 });
  }, style: { width: "50px" }, minorStepSize: 0.01, stepSize: 0.01, min: 0, max: i / 1e3, buttonPosition: "none" }))), import_react15.default.createElement(Slider, { min: 0, max: i, value: l2.delay, showTrackFill: false, labelRenderer: false, onChange: (t10) => {
    e18.setAnimation("exit", { delay: t10 });
  } }));
});
var AnimationsPanel = observer(({ store: e18 }) => {
  var l2, i, a2, o3;
  const m4 = e18.selectedElements, d5 = m4[0], f5 = d5, E4 = () => e18.selectedElements.map((e19) => e19.id).join(","), I2 = import_react15.default.useMemo(E4, []), P = E4();
  if (import_react15.default.useEffect(() => {
    I2 !== P && e18.openSidePanel(e18.previousOpenedSidePanel);
  }, [I2, P]), !d5 || !d5.animations) {
    return null;
  }
  const O2 = (t10, n4) => {
    if (e18.history.transaction(() => {
      m4.forEach((e19) => {
        e19.setAnimation("enter", Object.assign({ name: t10 }, n4)), e19.setAnimation("exit", Object.assign(Object.assign({ name: t10 }, n4), { from: n4.to, to: n4.from }));
      });
    }), n4.enabled) {
      const t11 = e18.activePage;
      e18.play({ animatedElementsIds: m4.map((e19) => e19.id), currentTime: d5.page.startTime }), setTimeout(() => {
        e18.stop(), e18.selectPage(null == t11 ? void 0 : t11.id);
      }, 1e3);
    }
  }, A2 = (t10, n4) => {
    if (e18.history.transaction(() => {
      m4.forEach((e19) => {
        e19.setAnimation("loop", Object.assign({ name: t10 }, n4));
      });
    }), n4.enabled) {
      const t11 = e18.activePage;
      e18.play({ animatedElementsIds: m4.map((e19) => e19.id), currentTime: d5.page.startTime }), setTimeout(() => {
        e18.stop(), e18.selectPage(null == t11 ? void 0 : t11.id);
      }, 1e3);
    }
  }, V2 = (e19) => {
    var t10;
    return !!((e19 ? null === (t10 = d5.animations) || void 0 === t10 ? void 0 : t10.filter((t11) => t11.name === e19 || t11.type === e19) : d5.animations) || []).find((e20) => e20.enabled);
  }, j = V2("move") || V2("fade") || V2("zoom"), z = V2("rotate") || V2("blink") || V2("bounce");
  return import_react15.default.createElement("div", { style: { height: "100%", display: "flex", flexDirection: "column", overflow: "auto", padding: "0 10px" } }, import_react15.default.createElement("div", { style: { display: "flex", justifyContent: "space-between", paddingBottom: "10px" } }, import_react15.default.createElement("h3", { style: { margin: 0, lineHeight: "30px" } }, t("sidePanel.animate")), import_react15.default.createElement(Button, { minimal: true, icon: import_react15.default.createElement(Cross, null), onClick: () => e18.openSidePanel(e18.previousOpenedSidePanel) })), import_react15.default.createElement("div", { style: { paddingTop: "10px", lineHeight: "35px" } }, "Animations", " ", import_react15.default.createElement(Button, { outlined: true, style: { marginLeft: "10px", display: j ? "inline-flex" : "none" }, onClick: () => {
    f5.set({ animations: [] });
  } }, "Remove All")), import_react15.default.createElement("div", { style: { paddingTop: "25px" } }, import_react15.default.createElement("div", { style: { display: "grid", gridTemplateColumns: "repeat(auto-fit, minmax(100px, 1fr))", gap: "5px", paddingBottom: "10px" } }, import_react15.default.createElement("div", null, import_react15.default.createElement(Button, { outlined: true, large: true, style: { padding: "20px", display: "flex", flexDirection: "column", alignItems: "center", gap: "8px" }, icon: import_react15.default.createElement(C, null), active: V2("move"), fill: true, onClick: () => {
    O2("move", { enabled: !V2("move") });
  } }, t("toolbar.move"))), import_react15.default.createElement("div", null, import_react15.default.createElement(Button, { outlined: true, large: true, style: { padding: "20px", display: "flex", flexDirection: "column", alignItems: "center", gap: "8px" }, icon: import_react15.default.createElement(p5, null), fill: true, active: V2("fade"), onClick: () => {
    O2("fade", { enabled: !V2("fade") });
  } }, t("toolbar.fade"))), import_react15.default.createElement("div", null, import_react15.default.createElement(Button, { outlined: true, large: true, style: { padding: "20px", display: "flex", flexDirection: "column", alignItems: "center", gap: "8px" }, icon: import_react15.default.createElement(u5, null), fill: true, active: V2("zoom"), onClick: () => {
    O2("zoom", { enabled: !V2("zoom") });
  } }, t("toolbar.zoom")))), import_react15.default.createElement(c3, { style: { display: j ? "block" : "none" } }, import_react15.default.createElement(y2, { element: d5, store: e18, name: "move", enabled: V2("enter") || V2("exit") }), V2("move") && import_react15.default.createElement(b4, { value: (null === (i = null === (l2 = d5.animations.find((e19) => "move" === e19.name)) || void 0 === l2 ? void 0 : l2.data) || void 0 === i ? void 0 : i.direction) || "right", onChange: (e19) => {
    O2("move", { data: { direction: e19 }, enabled: true });
  } }), V2("move") && import_react15.default.createElement(T, { store: e18, element: f5, animationName: "move" }), V2("zoom") && import_react15.default.createElement(h4, { value: (null === (o3 = null === (a2 = d5.animations.find((e19) => "zoom" === e19.name)) || void 0 === a2 ? void 0 : a2.data) || void 0 === o3 ? void 0 : o3.direction) || "in", onChange: (e19) => {
    O2("zoom", { data: { direction: e19 }, enabled: true });
  } }), V2("zoom") && import_react15.default.createElement(T, { store: e18, element: f5, animationName: "zoom" }), V2("enter") && import_react15.default.createElement(w2, { store: e18, element: f5 }), V2("enter") && import_react15.default.createElement(L2, { store: e18, element: f5 }), V2("exit") && import_react15.default.createElement(S2, { store: e18, element: f5 })), import_react15.default.createElement("div", { style: { paddingTop: "10px", lineHeight: "35px" } }, "Effects", " ", import_react15.default.createElement(Button, { outlined: true, style: { marginLeft: "10px", display: z ? "inline-flex" : "none" }, onClick: () => {
    f5.set({ animations: [] });
  } }, "Remove All")), import_react15.default.createElement("div", { style: { display: "grid", gridTemplateColumns: "repeat(auto-fit, minmax(100px, 1fr))", gap: "5px", paddingTop: "10px" } }, import_react15.default.createElement("div", null, import_react15.default.createElement(Button, { minimal: true, outlined: true, large: true, fill: true, style: { padding: "20px", display: "flex", flexDirection: "column", alignItems: "center", gap: "8px" }, icon: import_react15.default.createElement(g6, null), active: V2("rotate"), onClick: () => {
    A2("rotate", { enabled: !V2("rotate") });
  } }, t("toolbar.rotate"))), import_react15.default.createElement("div", null, import_react15.default.createElement(Button, { outlined: true, large: true, style: { padding: "20px", display: "flex", flexDirection: "column", alignItems: "center", gap: "8px" }, fill: true, icon: import_react15.default.createElement(v6, null), active: V2("blink"), onClick: () => {
    A2("blink", { enabled: !V2("blink") });
  } }, t("toolbar.blink"))), import_react15.default.createElement("div", null, import_react15.default.createElement(Button, { minimal: true, outlined: true, large: true, style: { padding: "20px", display: "flex", flexDirection: "column", alignItems: "center", gap: "8px" }, icon: import_react15.default.createElement(x3, null), fill: true, active: V2("bounce"), onClick: () => {
    A2("bounce", { enabled: !V2("bounce") });
  } }, t("toolbar.bounce")))), z && import_react15.default.createElement(k2, { store: e18, element: f5 }), V2("bounce") && import_react15.default.createElement(T, { store: e18, element: f5, animationName: "bounce" })));
});

// node_modules/polotno/side-panel/effects-panel.js
var import_react17 = __toESM(require_react(), 1);

// node_modules/polotno/side-panel/effect-card.js
var import_react16 = __toESM(require_react(), 1);
var e15;
var t8;
var n3 = styled_default("div")`
  display: flex;
  flex-direction: column;
  flex-grow: 0;
  width: calc(33% - 16px);
  gap: 8px;
  cursor: pointer;
`;
var o2 = styled_default("span")`
  text-align: center;
`;
var s2 = styled_default("div")`
  position: relative;
  border-radius: 10px;
  box-sizing: border-box;
  height: 90px;
`;
var c4 = styled_default("img")`
  height: 100%;
  width: 100%;
  object-fit: cover;
  border-radius: 10px;
`;
var d4 = styled_default("div")`
  left: -4px;
  top: -4px;
  bottom: -4px;
  right: -4px;
  display: flex;
  position: absolute;
  border-radius: 15px;
  padding: 2px;
  transition: 0.2s border;
  border: 2px solid ${(e18) => e18.active ? "white" : "transparent"};
`;
var EffectCard = ({ title: e18, imageSrc: t10, effect: i, onClick: l2, active: a2 }) => {
  const c5 = g7(i);
  return import_react16.default.createElement(n3, { onClick: l2 }, import_react16.default.createElement(s2, null, import_react16.default.createElement(d4, { active: a2 }), import_react16.default.createElement(c5, { src: t10 })), import_react16.default.createElement(o2, null, e18));
};
var p6 = styled_default(c4)`
  filter: sepia(1);
`;
var u6 = styled_default(c4)`
  filter: grayscale(1);
`;
var f4 = styled_default(c4)`
  filter: ${null === (e15 = shapeFilterToCSS(Effects.warm)) || void 0 === e15 ? void 0 : e15.filter};
`;
var m3 = (e18) => {
  const { html: t10, filter: i } = shapeFilterToCSS(Effects.cold);
  return import_react16.default.createElement(import_react16.default.Fragment, null, import_react16.default.createElement("div", { style: { display: "none" }, dangerouslySetInnerHTML: { __html: t10 } }), import_react16.default.createElement(c4, Object.assign({ style: { filter: i } }, e18)));
};
var x4 = styled_default(c4)`
  filter: ${null === (t8 = shapeFilterToCSS(Effects.natural)) || void 0 === t8 ? void 0 : t8.filter};
`;
var g7 = (e18) => {
  switch (e18) {
    case Effects.sepia:
      return p6;
    case Effects.grayscale:
      return u6;
    case Effects.warm:
      return f4;
    case Effects.cold:
      return m3;
    case Effects.natural:
      return x4;
    default:
      return c4;
  }
};

// node_modules/polotno/side-panel/effects-panel.js
var e16 = function(e18, t10) {
  var a2 = {};
  for (var n4 in e18) {
    Object.prototype.hasOwnProperty.call(e18, n4) && t10.indexOf(n4) < 0 && (a2[n4] = e18[n4]);
  }
  if (null != e18 && "function" == typeof Object.getOwnPropertySymbols) {
    var l2 = 0;
    for (n4 = Object.getOwnPropertySymbols(e18); l2 < n4.length; l2++) {
      t10.indexOf(n4[l2]) < 0 && Object.prototype.propertyIsEnumerable.call(e18, n4[l2]) && (a2[n4[l2]] = e18[n4[l2]]);
    }
  }
  return a2;
};
var h5 = (e18, t10, a2) => Math.max(t10, Math.min(a2, e18));
var NumberInput2 = (a2) => {
  var { value: n4, onValueChange: r3 } = a2, o3 = e16(a2, ["value", "onValueChange"]);
  const [i, d5] = import_react17.default.useState(n4.toString());
  return import_react17.default.useEffect(() => {
    d5(n4.toString());
  }, [n4]), import_react17.default.createElement(NumericInput, Object.assign({ value: i, onValueChange: (e18, t10) => {
    d5(t10), Number.isNaN(e18) || r3(e18);
  } }, o3));
};
var p7 = ({ label: e18, enabled: n4, visible: i = true, onEnabledChange: d5, numberValue: s3, onNumberValueChange: c5, min: u8, max: m4 }) => i ? import_react17.default.createElement(import_react17.default.Fragment, null, import_react17.default.createElement(Switch, { checked: n4, label: e18, onChange: (e19) => {
  d5(e19.target.checked);
}, alignIndicator: Alignment.RIGHT, style: { marginTop: "20px" } }), n4 && import_react17.default.createElement("div", { style: { display: "flex", width: "100%", justifyContent: "space-between" } }, import_react17.default.createElement("div", { style: { paddingTop: "7px", paddingLeft: "10px", width: "calc(100% - 80px)" } }, import_react17.default.createElement(Slider, { value: s3, onChange: (e19) => {
  c5(e19);
}, min: u8, max: m4, labelStepSize: 50, showTrackFill: false, labelRenderer: false })), import_react17.default.createElement(NumericInput, { value: s3, onValueChange: (e19) => {
  c5(h5(e19, u8, m4));
}, buttonPosition: "none", style: { width: "50px", padding: "0 5px", marginLeft: "10px" }, min: u8, max: m4 }))) : null;
var EffectsPanel = observer(({ store: e18 }) => {
  var i, g8, E4, f5, v7, x5, y3, C2, w3, k3, V2, O2, j, I2;
  const M2 = e18.selectedElements, R2 = M2[0], T2 = () => e18.selectedElements.map((e19) => e19.id).join(","), S3 = import_react17.default.useMemo(T2, []), N = T2();
  if (import_react17.default.useEffect(() => {
    S3 !== N && e18.openSidePanel(e18.previousOpenedSidePanel);
  }, [S3, N]), !R2 || !R2.filters) {
    return null;
  }
  const P = ((e19) => "text" === e19.type)(R2), B2 = ((e19) => "image" === e19.type)(R2), z = ((e19) => "svg" === e19.type)(R2), F2 = B2 || z, H = (t10) => {
    e18.history.transaction(() => {
      M2.forEach((e19) => {
        e19.set(t10);
      });
    });
  }, W = (t10, a2) => {
    e18.history.transaction(() => {
      M2.forEach((e19) => {
        let n4 = +a2;
        return 0 == a2 || a2 || (n4 = e19.filters.has(t10) ? null : 1), INDEPENDENT_FILTERS.includes(t10) || e19.set({ grayscaleEnabled: "grayscale" === t10 && a2, sepiaEnabled: "sepia" === t10 && a2 }), e19.setFilter(t10, n4);
      });
    });
  };
  return import_react17.default.createElement("div", { style: { height: "100%", display: "flex", flexDirection: "column", overflow: "auto", padding: "0 10px" } }, import_react17.default.createElement("div", { style: { display: "flex", justifyContent: "space-between" } }, import_react17.default.createElement("h3", { style: { margin: 0, lineHeight: "30px" } }, t("sidePanel.effects")), import_react17.default.createElement(Button, { minimal: true, icon: import_react17.default.createElement(Cross, null), onClick: () => e18.openSidePanel(e18.previousOpenedSidePanel) })), F2 && import_react17.default.createElement("div", { style: { display: "flex", flexDirection: "column", gap: "16px", marginTop: "16px" } }, import_react17.default.createElement("div", { style: { display: "flex", gap: "16px", flexWrap: "wrap" } }, import_react17.default.createElement(EffectCard, { active: R2.grayscaleEnabled, onClick: () => {
    W("grayscale", !R2.grayscaleEnabled);
  }, title: t("toolbar.grayscale"), imageSrc: R2.src, effect: Effects.grayscale }), import_react17.default.createElement(EffectCard, { active: R2.sepiaEnabled, onClick: () => {
    W("sepia", !R2.sepiaEnabled);
  }, title: t("toolbar.sepia"), imageSrc: R2.src, effect: Effects.sepia }), import_react17.default.createElement(EffectCard, { active: R2.filters.has("cold"), onClick: () => {
    W("cold", R2.filters.has("cold") ? null : 1);
  }, title: t("toolbar.cold"), imageSrc: R2.src, effect: Effects.cold }), import_react17.default.createElement(EffectCard, { active: R2.filters.has("natural"), onClick: () => {
    W("natural", R2.filters.has("natural") ? null : 1);
  }, title: t("toolbar.natural"), imageSrc: R2.src, effect: Effects.natural }), import_react17.default.createElement(EffectCard, { active: R2.filters.has("warm"), onClick: () => {
    W("warm", R2.filters.has("warm") ? null : 1);
  }, title: t("toolbar.warm"), imageSrc: R2.src, effect: Effects.warm }))), import_react17.default.createElement(p7, { label: t("toolbar.blur"), enabled: R2.blurEnabled, visible: F2 || P, onEnabledChange: (e19) => {
    H({ blurEnabled: e19 });
  }, numberValue: R2.blurRadius, onNumberValueChange: (e19) => {
    H({ blurRadius: e19 });
  }, min: 0, max: 100 }), import_react17.default.createElement(p7, { label: t("toolbar.brightness"), visible: F2, enabled: R2.brightnessEnabled, onEnabledChange: (e19) => {
    H({ brightnessEnabled: e19 });
  }, numberValue: Math.round(100 * R2.brightness), onNumberValueChange: (e19) => {
    H({ brightness: e19 / 100 });
  }, min: -100, max: 100 }), import_react17.default.createElement(p7, { label: t("toolbar.temperature"), visible: F2, enabled: R2.filters.has("temperature"), onEnabledChange: (e19) => {
    W("temperature", e19 ? 0 : null);
  }, numberValue: Math.round(100 * (null !== (g8 = null === (i = R2.filters.get("temperature")) || void 0 === i ? void 0 : i.intensity) && void 0 !== g8 ? g8 : 0)), onNumberValueChange: (e19) => {
    W("temperature", e19 / 100);
  }, min: -100, max: 100 }), import_react17.default.createElement(p7, { label: t("toolbar.contrast"), visible: F2, enabled: R2.filters.has("contrast"), onEnabledChange: (e19) => {
    W("contrast", e19 ? 0 : null);
  }, numberValue: Math.round(100 * (null !== (f5 = null === (E4 = R2.filters.get("contrast")) || void 0 === E4 ? void 0 : E4.intensity) && void 0 !== f5 ? f5 : 0)), onNumberValueChange: (e19) => {
    W("contrast", e19 / 100);
  }, min: -100, max: 100 }), import_react17.default.createElement(p7, { label: t("toolbar.shadows"), visible: F2, enabled: R2.filters.has("shadows"), onEnabledChange: (e19) => {
    W("shadows", e19 ? 0 : null);
  }, numberValue: Math.round(100 * (null !== (x5 = null === (v7 = R2.filters.get("shadows")) || void 0 === v7 ? void 0 : v7.intensity) && void 0 !== x5 ? x5 : 0)), onNumberValueChange: (e19) => {
    W("shadows", e19 / 100);
  }, min: -100, max: 100 }), import_react17.default.createElement(p7, { label: t("toolbar.white"), visible: F2, enabled: R2.filters.has("white"), onEnabledChange: (e19) => {
    W("white", e19 ? 0 : null);
  }, numberValue: Math.round(100 * (null !== (C2 = null === (y3 = R2.filters.get("white")) || void 0 === y3 ? void 0 : y3.intensity) && void 0 !== C2 ? C2 : 0)), onNumberValueChange: (e19) => {
    W("white", e19 / 100);
  }, min: -100, max: 100 }), import_react17.default.createElement(p7, { label: t("toolbar.black"), visible: F2, enabled: R2.filters.has("black"), onEnabledChange: (e19) => {
    W("black", e19 ? 0 : null);
  }, numberValue: Math.round(100 * (null !== (k3 = null === (w3 = R2.filters.get("black")) || void 0 === w3 ? void 0 : w3.intensity) && void 0 !== k3 ? k3 : 0)), onNumberValueChange: (e19) => {
    W("black", e19 / 100);
  }, min: -100, max: 100 }), import_react17.default.createElement(p7, { label: t("toolbar.vibrance"), visible: F2, enabled: R2.filters.has("vibrance"), onEnabledChange: (e19) => {
    W("vibrance", e19 ? 0 : null);
  }, numberValue: Math.round(100 * (null !== (O2 = null === (V2 = R2.filters.get("vibrance")) || void 0 === V2 ? void 0 : V2.intensity) && void 0 !== O2 ? O2 : 0)), onNumberValueChange: (e19) => {
    W("vibrance", e19 / 100);
  }, min: -100, max: 100 }), import_react17.default.createElement(p7, { label: t("toolbar.saturation"), visible: F2, enabled: R2.filters.has("saturation"), onEnabledChange: (e19) => {
    W("saturation", e19 ? 0 : null);
  }, numberValue: Math.round(100 * (null !== (I2 = null === (j = R2.filters.get("saturation")) || void 0 === j ? void 0 : j.intensity) && void 0 !== I2 ? I2 : 0)), onNumberValueChange: (e19) => {
    W("saturation", e19 / 100);
  }, min: -100, max: 100 }), P && import_react17.default.createElement(Switch, { checked: !!R2.strokeWidth, label: t("toolbar.textStroke"), onChange: (e19) => {
    H({ strokeWidth: e19.target.checked ? 2 : 0 });
  }, alignIndicator: Alignment.RIGHT, style: { marginTop: "20px" } }), P && !!R2.strokeWidth && import_react17.default.createElement(import_react17.default.Fragment, null, import_react17.default.createElement("div", { style: { display: "flex", justifyContent: "space-between" } }, import_react17.default.createElement(color_picker_default, { value: R2.stroke, size: 30, onChange: (e19) => {
    H({ stroke: e19 });
  }, store: e18 }), import_react17.default.createElement(NumericInput, { defaultValue: R2.strokeWidth, onValueChange: (e19) => {
    H({ strokeWidth: h5(e19, 1, 30) });
  }, style: { width: "80px" }, min: 1, max: Math.round(R2.fontSize / 2) }))), P && import_react17.default.createElement(Switch, { checked: !!R2.backgroundEnabled, label: t("toolbar.textBackground"), onChange: (e19) => {
    H({ backgroundEnabled: e19.target.checked });
  }, alignIndicator: Alignment.RIGHT, style: { marginTop: "20px" } }), P && !!R2.backgroundEnabled && import_react17.default.createElement(import_react17.default.Fragment, null, import_react17.default.createElement("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between", paddingTop: "5px", paddingBottom: "5px" } }, import_react17.default.createElement("div", null, t("toolbar.backgroundCornerRadius")), import_react17.default.createElement("div", null, import_react17.default.createElement(NumberInput2, { value: 100 * R2.backgroundCornerRadius, onValueChange: (e19) => {
    H({ backgroundCornerRadius: h5(e19, 0, 100) / 100 });
  }, style: { width: "50px" }, min: 0, max: 100, buttonPosition: "none" }))), import_react17.default.createElement(Slider, { value: 100 * R2.backgroundCornerRadius, onChange: (e19) => {
    H({ backgroundCornerRadius: h5(e19, 0, 100) / 100 });
  }, min: 0, max: 100, labelRenderer: false }), import_react17.default.createElement("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between", paddingTop: "5px", paddingBottom: "5px" } }, import_react17.default.createElement("div", null, t("toolbar.backgroundPadding")), import_react17.default.createElement("div", null, import_react17.default.createElement(NumberInput2, { value: Math.round(100 * R2.backgroundPadding), onValueChange: (e19) => {
    H({ backgroundPadding: h5(e19, 0, 100) / 100 });
  }, style: { width: "50px" }, min: 0, max: 100, buttonPosition: "none" }))), import_react17.default.createElement(Slider, { value: Math.round(100 * R2.backgroundPadding), onChange: (e19) => {
    H({ backgroundPadding: h5(e19, 0, 100) / 100 });
  }, min: 0, max: 100, labelRenderer: false }), import_react17.default.createElement("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between", paddingTop: "5px", paddingBottom: "5px" } }, import_react17.default.createElement("div", null, t("toolbar.opacity")), import_react17.default.createElement("div", null, import_react17.default.createElement(NumberInput2, { value: Math.round(100 * R2.backgroundOpacity), onValueChange: (e19) => {
    H({ backgroundOpacity: e19 / 100 });
  }, style: { width: "50px" }, min: 0, max: 100, buttonPosition: "none" }))), import_react17.default.createElement(Slider, { value: 100 * R2.backgroundOpacity, onChange: (e19) => {
    H({ backgroundOpacity: e19 / 100 });
  }, min: 0, max: 100, labelRenderer: false }), import_react17.default.createElement("div", { style: { display: "flex", justifyContent: "space-between", paddingTop: "5px", paddingBottom: "5px" } }, import_react17.default.createElement("div", { style: { lineHeight: "30px" } }, t("toolbar.color")), import_react17.default.createElement(color_picker_default, { value: R2.backgroundColor, size: 30, onChange: (e19) => {
    H({ backgroundColor: e19 });
  }, store: e18 }))), F2 && import_react17.default.createElement(Switch, { checked: !!R2.borderSize, label: t("toolbar.border"), onChange: (e19) => {
    H({ borderSize: e19.target.checked ? 2 : 0 });
  }, alignIndicator: Alignment.RIGHT, style: { marginTop: "20px" } }), F2 && !!R2.borderSize && import_react17.default.createElement(import_react17.default.Fragment, null, import_react17.default.createElement("div", { style: { display: "flex", justifyContent: "space-between" } }, import_react17.default.createElement(color_picker_default, { value: R2.borderColor, size: 30, onChange: (e19) => {
    H({ borderColor: e19 });
  }, store: e18 }), import_react17.default.createElement(NumericInput, { defaultValue: R2.borderSize, onValueChange: (e19) => {
    H({ borderSize: h5(e19, 1, Math.min(R2.width, R2.height) / 2) });
  }, style: { width: "80px" }, min: 1, max: Math.max(1, Math.min(R2.width, R2.height) / 2) }))), F2 && import_react17.default.createElement(p7, { label: t("toolbar.cornerRadius"), visible: F2, enabled: 0 !== R2.cornerRadius, onEnabledChange: (e19) => {
    H({ cornerRadius: e19 ? Math.min(R2.width / 4, R2.height / 4) : 0 });
  }, numberValue: Math.min(R2.cornerRadius, Math.round(Math.min(R2.width / 2, R2.height / 2))), onNumberValueChange: (e19) => {
    H({ cornerRadius: e19 });
  }, min: 1, max: Math.round(Math.min(R2.width / 2, R2.height / 2)) }), import_react17.default.createElement(Switch, { checked: R2.shadowEnabled, label: t("toolbar.shadow"), onChange: (e19) => {
    H({ shadowEnabled: e19.target.checked });
  }, alignIndicator: Alignment.RIGHT, style: { marginTop: "20px" } }), R2.shadowEnabled && import_react17.default.createElement(import_react17.default.Fragment, null, import_react17.default.createElement("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between", paddingTop: "5px", paddingBottom: "5px" } }, import_react17.default.createElement("div", null, t("toolbar.blur")), import_react17.default.createElement("div", null, import_react17.default.createElement(NumberInput2, { value: R2.shadowBlur, onValueChange: (e19) => {
    H({ shadowBlur: h5(e19, -50, 50) });
  }, style: { width: "50px" }, min: 0, max: 50, buttonPosition: "none" }))), import_react17.default.createElement("div", null, import_react17.default.createElement(Slider, { value: R2.shadowBlur, onChange: (e19) => {
    H({ shadowBlur: e19 });
  }, min: 0, max: 50, showTrackFill: false, labelRenderer: false })), import_react17.default.createElement("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between", paddingTop: "5px", paddingBottom: "5px" } }, import_react17.default.createElement("div", null, t("toolbar.offsetX")), import_react17.default.createElement("div", null, import_react17.default.createElement(NumberInput2, { value: R2.shadowOffsetX, onValueChange: (e19) => {
    H({ shadowOffsetX: h5(e19, -50, 50) });
  }, style: { width: "50px" }, min: -50, max: 50, buttonPosition: "none" }))), import_react17.default.createElement("div", null, import_react17.default.createElement(Slider, { value: R2.shadowOffsetX, onChange: (e19) => {
    H({ shadowOffsetX: e19 });
  }, min: -50, max: 50, showTrackFill: false, labelRenderer: false })), import_react17.default.createElement("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between", paddingTop: "5px", paddingBottom: "5px" } }, import_react17.default.createElement("div", null, t("toolbar.offsetY")), import_react17.default.createElement("div", null, import_react17.default.createElement(NumberInput2, { value: R2.shadowOffsetY, onValueChange: (e19) => {
    H({ shadowOffsetY: h5(e19, -50, 50) });
  }, style: { width: "50px" }, min: -50, max: 50, buttonPosition: "none" }))), import_react17.default.createElement("div", null, import_react17.default.createElement(Slider, { value: R2.shadowOffsetY, onChange: (e19) => {
    H({ shadowOffsetY: e19 });
  }, min: -50, max: 50, showTrackFill: false, labelRenderer: false })), import_react17.default.createElement("div", { style: { display: "flex", alignItems: "center", justifyContent: "space-between", paddingTop: "5px", paddingBottom: "5px" } }, import_react17.default.createElement("div", null, t("toolbar.opacity")), import_react17.default.createElement("div", null, import_react17.default.createElement(NumberInput2, { value: Math.round(100 * R2.shadowOpacity), onValueChange: (e19) => {
    H({ shadowOpacity: e19 / 100 });
  }, style: { width: "50px" }, min: 0, max: 100, buttonPosition: "none" }))), import_react17.default.createElement("div", null, import_react17.default.createElement(Slider, { value: 100 * R2.shadowOpacity, onChange: (e19) => {
    H({ shadowOpacity: e19 / 100 });
  }, min: 0, max: 100, labelRenderer: false })), import_react17.default.createElement("div", { style: { display: "flex", justifyContent: "space-between", paddingTop: "5px", paddingBottom: "5px" } }, import_react17.default.createElement("div", { style: { lineHeight: "30px" } }, t("toolbar.color")), import_react17.default.createElement(color_picker_default, { value: R2.shadowColor, size: 30, onChange: (e19) => {
    H({ shadowColor: e19 });
  }, store: e18 }))));
});

// node_modules/polotno/side-panel/side-panel.js
var TemplatesSection = { name: "templates", Tab: observer((t10) => import_react18.default.createElement(SectionTab, Object.assign({ name: t("sidePanel.templates") }, t10), import_react18.default.createElement(Icon, { icon: import_react18.default.createElement(Control, null) }))), Panel: ({ store: t10 }) => import_react18.default.createElement(TemplatesPanel, { store: t10 }) };
var TextSection = { name: "text", Tab: observer((t10) => import_react18.default.createElement(SectionTab, Object.assign({ name: t("sidePanel.text") }, t10), import_react18.default.createElement(Icon, { icon: import_react18.default.createElement(NewTextBox, null) }))), Panel: ({ store: t10 }) => import_react18.default.createElement(TextPanel, { store: t10 }) };
var PhotosSection = { name: "photos", Tab: observer((t10) => import_react18.default.createElement(SectionTab, Object.assign({ name: t("sidePanel.photos") }, t10), import_react18.default.createElement(Icon, { icon: import_react18.default.createElement(Media, null) }))), Panel: ({ store: t10 }) => import_react18.default.createElement(PhotosPanel, { store: t10 }) };
var ElementsSection = { name: "elements", Tab: observer((t10) => import_react18.default.createElement(SectionTab, Object.assign({ name: t("sidePanel.elements"), iconSize: 16 }, t10), import_react18.default.createElement("span", { className: "bp5-icon" }, import_react18.default.createElement(import_FaShapes.default, null)))), Panel: ({ store: t10 }) => import_react18.default.createElement(ElementsPanel, { store: t10 }) };
var UploadSection = { name: "upload", Tab: observer((t10) => import_react18.default.createElement(SectionTab, Object.assign({ name: t("sidePanel.upload") }, t10), import_react18.default.createElement(Icon, { icon: import_react18.default.createElement(CloudUpload, null) }))), Panel: ({ store: t10 }) => import_react18.default.createElement(UploadPanel, { store: t10 }) };
var BackgroundSection = { name: "background", Tab: observer((t10) => import_react18.default.createElement(SectionTab, Object.assign({ name: t("sidePanel.background") }, t10), import_react18.default.createElement(Icon, { icon: import_react18.default.createElement(LayoutGrid, null) }))), Panel: ({ store: t10 }) => import_react18.default.createElement(BackgroundPanel, { store: t10 }) };
var PagesSection = { name: "pages", Tab: observer((t10) => import_react18.default.createElement(SectionTab, Object.assign({ name: t("sidePanel.pages") }, t10), import_react18.default.createElement(import_FdPageMultiple.default, null))), Panel: ({ store: t10 }) => import_react18.default.createElement(PagesPanel, { store: t10 }), visibleInList: false };
var LayersSection = { name: "layers", Tab: observer((t10) => import_react18.default.createElement(SectionTab, Object.assign({ name: t("sidePanel.layers") }, t10), import_react18.default.createElement(Icon, { icon: import_react18.default.createElement(Layers, null) }))), Panel: ({ store: t10 }) => import_react18.default.createElement(LayersPanel, { store: t10 }) };
var SizeSection = { name: "size", Tab: observer((t10) => import_react18.default.createElement(SectionTab, Object.assign({ name: t("sidePanel.resize") }, t10), import_react18.default.createElement(Icon, { icon: import_react18.default.createElement(Fullscreen, null) }))), Panel: ({ store: t10 }) => import_react18.default.createElement(SizePanel, { store: t10 }) };
var VideosSection = { name: "videos", Tab: (t10) => import_react18.default.createElement(SectionTab, Object.assign({ name: t("sidePanel.videos") }, t10), import_react18.default.createElement(Video, null)), Panel: VideosPanel };
observer((t10) => import_react18.default.createElement(SectionTab, Object.assign({ name: t("sidePanel.more") }, t10), import_react18.default.createElement(Icon, { icon: import_react18.default.createElement(More, null) })));
var DEFAULT_SECTIONS = [TemplatesSection, TextSection, PhotosSection, ElementsSection, UploadSection, BackgroundSection, LayersSection, SizeSection];
var I = { name: "image-clip", Tab: () => null, Panel: ImageClipPanel };
var R = { name: "effects", Tab: () => null, Panel: EffectsPanel };
var $ = { name: "animation", Tab: () => null, Panel: AnimationsPanel };
var INTERNAL_SECTIONS = [I, R];
var A = styled_default("div")`
  display: flex;
  height: 100% !important;
  padding: 0px !important;
  position: relative;

  &.bp5-navbar {
    box-shadow: none;
  }

  ${mobileStyle("\n    height: auto !important;\n    width: 100%;\n    position: relative;\n  ")}
`;
var F = styled_default("div", import_react18.default.forwardRef)`
  @media screen and (min-width: 501px) {
    overflow-y: auto;
    overflow-x: hidden;
    min-width: 72px;
  }
  ${mobileStyle("\n    width: 100%;\n    overflow: auto;\n  ")}
`;
var M = styled_default("div", import_react18.default.forwardRef)`
  display: flex;
  flex-direction: column;

  ${mobileStyle("\n    flex-direction: row;\n    min-width: min-content;\n  ")}
`;
var U = styled_default("div")`
  padding: 10px 10px 0px 10px !important;
  height: 100% !important;

  &.bp5-navbar {
    width: 350px;
  }

  &.bp5-navbar.collapsed {
    width: 0px;
  }

  ${mobileStyle("\n    &.bp5-navbar {\n      position: absolute;\n      bottom: 54px;\n      z-index: 100;\n      height: 50vh !important;\n      width: 100%;\n    }\n  ")}
`;
var _ = styled_default("div")`
  display: none;

  ${mobileStyle("\n    position: absolute;\n    bottom: 72px;\n    display: block;\n    width: 100vw;\n    height: 100vh;\n    background-color: rgba(0, 0, 0, 0.05);\n  ")}
`;
var B = styled_default("div")`
  position: absolute;
  right: -14px;
  top: 50%;
  height: 96px;
  width: 15px;
  fill: white;
  cursor: pointer;
  z-index: 10;

  .bp5-dark & {
    right: -13px;
  }

  & .stroke {
    stroke: rgba(0, 0, 0, 0.3);
    fill: none;
  }

  & .fill {
    fill: white;
  }

  .bp5-dark & .fill {
    fill: #2f343c;
  }

  & .pointer {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scaleY(2);
    font-size: 0.5rem;
    color: rgba(171, 179, 191, 0.6);
  }

  .bp5-dark & .pointer {
    color: rgba(171, 179, 191, 0.6);
  }

  &:hover .pointer {
    color: black;
  }

  .bp5-dark &:hover .pointer {
    color: white;
  }

  ${mobileStyle("\n    display: none;\n  ")}
`;
var V = ({ onClick: t10 }) => import_react18.default.createElement(B, { onClick: t10 }, import_react18.default.createElement("svg", { width: "15", height: "96", viewBox: "0 0 16 96", xmlns: "http://www.w3.org/2000/svg" }, import_react18.default.createElement("path", { className: "fill stroke", d: "M 1 7 C 2 9 4 10 7.2 13.28 C 7.45 13.4625 7.6 13.6 7.7 13.8048 L 7.8 13.8 C 9.8 15.8 11.6 17.6 12.9 19.7 C 14 21.6 14.7 23.9 14.9 27 H 15 V 68 C 15 71.7 14.3 74.3 13 76.6 C 11.7 78.8 9.9 80.5 7.8 82.6344 L 7.79 82.6 C 7.6 82.8 7.4507 83 7.2729 83.2127 C 3.9102 86.5228 2 87 1 90" })), import_react18.default.createElement("div", { className: "pointer" }, "<"));
var SidePanel = observer(({ store: t10, sections: n4, defaultSection: o3 = "photos" }) => {
  var a2;
  (() => {
    const n5 = import_react18.default.useRef(true);
    n5.current && (n5.current = false, t10.openSidePanel(o3));
  })();
  const l2 = useMobile();
  import_react18.default.useLayoutEffect(() => {
    l2 ? t10.openSidePanel("") : t10.openSidePanel(o3);
  }, [l2]);
  const i = [...n4 || DEFAULT_SECTIONS];
  if (INTERNAL_SECTIONS.forEach((e18) => {
    i.find((t11) => t11.name === e18.name) || i.push(e18);
  }), flags.animationsEnabled) {
    if (!i.find((e18) => "videos" === e18.name)) {
      const e18 = Math.floor(i.length / 2);
      i.splice(e18, 0, VideosSection);
    }
    if (!i.find((e18) => "animations" === e18.name)) {
      const e18 = Math.floor(i.length / 2);
      i.splice(e18, 0, $);
    }
  }
  const r3 = i.filter((e18) => {
    var t11;
    return null === (t11 = e18.visibleInList) || void 0 === t11 || t11;
  }), s3 = null === (a2 = i.find((e18) => e18.name === t10.openedSidePanel)) || void 0 === a2 ? void 0 : a2.Panel, m4 = import_react18.default.useRef(null);
  return import_react18.default.createElement(A, { className: "bp5-navbar polotno-side-panel" + (t10.openedSidePanel ? "" : " collapsed") }, import_react18.default.createElement(F, { ref: m4, className: "polotno-side-tabs-container" }, import_react18.default.createElement(M, { className: "polotno-side-tabs-inner" }, r3.map(({ name: n5, Tab: o4 }) => import_react18.default.createElement(o4, { key: n5, active: n5 === t10.openedSidePanel, onClick: () => {
    n5 === t10.openedSidePanel && l2 ? t10.openSidePanel("") : t10.openSidePanel(n5);
  } })))), s3 && import_react18.default.createElement(U, { className: "bp5-navbar polotno-panel-container", onClick: (e18) => {
    const n5 = e18.target.closest(".polotno-close-panel"), o4 = e18.target.closest(".polotno-mobile");
    n5 && (l2 || o4) && t10.openSidePanel("");
  } }, import_react18.default.createElement(s3, { store: t10 })), t10.openedSidePanel && import_react18.default.createElement(_, { onClick: () => t10.openSidePanel("") }), t10.openedSidePanel && import_react18.default.createElement(V, { onClick: () => t10.openSidePanel("") }));
});
var side_panel_default = SidePanel;

export {
  SectionTab,
  TemplatesSection,
  TextSection,
  PhotosSection,
  ElementsSection,
  UploadSection,
  BackgroundSection,
  PagesSection,
  LayersSection,
  SizeSection,
  VideosSection,
  DEFAULT_SECTIONS,
  INTERNAL_SECTIONS,
  SidePanel,
  side_panel_default
};
/*! Bundled license information:

sortablejs/modular/sortable.esm.js:
  (**!
   * Sortable 1.15.6
   * @author	RubaXa   <trash@rubaxa.org>
   * @author	owenm    <owen23355@gmail.com>
   * @license MIT
   *)

classnames/index.js:
  (*!
    Copyright (c) 2018 Jed Watson.
    Licensed under the MIT License (MIT), see
    http://jedwatson.github.io/classnames
  *)
*/
//# sourceMappingURL=chunk-XHQENUHY.js.map
