import e from"react";import{observer as t}from"mobx-react-lite";import{autorun as n}from"mobx";export const AudioElement=t(({audio:t,store:r})=>{const[i,o]=function(t){const[n,r]=e.useState(null),[i,o]=e.useState("loading");return e.useEffect(()=>{const e=new Audio(t),n=()=>{o("loaded"),r(e)},i=()=>{o("failed"),r(null)};return e.addEventListener("canplay",n),e.addEventListener("error",i),()=>{e.removeEventListener("canplay",n),e.removeEventListener("error",i)}},[t]),[n,i]}(t.src);return e.useEffect(()=>{i&&r.history.ignore(()=>{t.set({duration:1e3*i.duration})})},[i,t,r.history]),e.useEffect(()=>{if(!i){return}const e=()=>{i.currentTime=t.startTime*t.duration/1e3},o=()=>{const e=t.endTime*t.duration/1e3;i.currentTime>=e&&(i.pause(),i.currentTime=t.startTime*t.duration/1e3)};i.addEventListener("ended",e),i.addEventListener("timeupdate",o);const s=n(()=>{const e=r.animatedElementsIds;if(e.length&&!e.includes(t.id)){return}const n=r.currentTime-t.delay,o=t.duration*(t.endTime-t.startTime),s=n>=0&&n<o;if(!r.isPlaying||0!==r.animatedElementsIds.length||!s){return void i.pause()}i.volume=t.volume,i.paused&&i.play();const a=n%o/1e3+t.startTime*t.duration/1e3,u=i.currentTime;Math.abs(u-a)>.5&&a!==u&&(i.currentTime=a)});return()=>{i.pause(),i.removeEventListener("ended",e),i.removeEventListener("timeupdate",o),s()}},[r.isPlaying,t.startTime,t.endTime,t.volume,i]),null});