var e=this&&this.__rest||function(e,t){var r={};for(var o in e){Object.prototype.hasOwnProperty.call(e,o)&&t.indexOf(o)<0&&(r[o]=e[o])}if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(o=Object.getOwnPropertySymbols(e);i<o.length;i++){t.indexOf(o[i])<0&&Object.prototype.propertyIsEnumerable.call(e,o[i])&&(r[o[i]]=e[o[i]])}}return r};import{types as t,detach as r}from"mobx-state-tree";import{nanoid as o}from"nanoid";import{Node as i}from"./node-model.js";import{Shape as l}from"./shape-model.js";import{TextElement as n}from"./text-model.js";import{ImageElement as d}from"./image-model.js";import{VideoElement as s}from"./video-model.js";import{LineElement as a}from"./line-model.js";import{SVGElement as p}from"./svg-model.js";import{FigureElement as m}from"./figure-model.js";import{GifElement as c}from"./gif-model.js";export const forEveryChild=(e,t)=>{if(e.children){for(const r of e.children){if(!0===t(r)){break}forEveryChild(r,t)}}};const f=[...new Array(20)].map((e,r)=>t.late(()=>y[r]));export const ElementTypes=t.union({dispatcher:e=>{const t=TYPES_MAP[e.type];if(!t){throw new Error(`Unknown element type: "${e.type}"`)}return t}},p,n,d,a,s,m,c,t.late(()=>GroupElement),...f);export const GroupElement=i.named("Group").props({type:"group",children:t.array(ElementTypes)}).views(e=>({get draggable(){let t=!0;return forEveryChild(e,e=>{e.draggable||(t=!1)}),t},get resizable(){let t=!0;return forEveryChild(e,e=>{e.resizable||(t=!1)}),t},get contentEditable(){let t=!0;return forEveryChild(e,e=>{e.contentEditable||(t=!1)}),t},get styleEditable(){let t=!0;return forEveryChild(e,e=>{e.styleEditable||(t=!1)}),t},get locked(){let t=!0;return forEveryChild(e,e=>{e.locked||(t=!1)}),t}})).actions(t=>({set(r){var{draggable:o,contentEditable:i,styleEditable:l,resizable:n}=r,d=e(r,["draggable","contentEditable","styleEditable","resizable"]);void 0!==o&&forEveryChild(t,e=>{e.set({draggable:o})}),void 0!==i&&forEveryChild(t,e=>{e.set({contentEditable:i})}),void 0!==l&&forEveryChild(t,e=>{e.set({styleEditable:l})}),void 0!==n&&forEveryChild(t,e=>{e.set({resizable:n})}),Object.assign(t,d)},addElement(e,{skipSelect:r=!1}={}){const i=TYPES_MAP[e.type];if(!i){return void console.error("Can not find model with type "+e.type)}e.children&&e.children.forEach(e=>{e.id=e.id||o(10)});const l=i.create(Object.assign({id:o(10)},e));return t.children.push(l),l.selectable&&!r&&t.store.selectElements([l.id]),l},setElementZIndex(e,o){const i=t.children.find(t=>t.id===e);i&&(r(i),t.children.remove(i),t.children.splice(o,0,i))}}));const y=[];export const TYPES_MAP={svg:p,text:n,image:d,group:GroupElement,line:a,video:s,figure:m,gif:c};export function registerShapeModel(e,t){const r=e.type;if(!r){throw new Error('You must pass "type" attribute to custom model.')}let o=l.named(r).props(e);t&&(o=t(o)),TYPES_MAP[r]=o,y.push(o)}